
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4822      	ldr	r0, [pc, #136]	; (800024c <endfiniloop+0x4>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f001 fbcd 	bl	8001970 <__core_init>
 80001d6:	f001 f91b 	bl	8001410 <__early_init>
 80001da:	481d      	ldr	r0, [pc, #116]	; (8000250 <endfiniloop+0x8>)
 80001dc:	491d      	ldr	r1, [pc, #116]	; (8000254 <endfiniloop+0xc>)
 80001de:	4a1e      	ldr	r2, [pc, #120]	; (8000258 <endfiniloop+0x10>)

080001e0 <msloop>:
 80001e0:	4291      	cmp	r1, r2
 80001e2:	bf3c      	itt	cc
 80001e4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e8:	e7fa      	bcc.n	80001e0 <msloop>
 80001ea:	491c      	ldr	r1, [pc, #112]	; (800025c <endfiniloop+0x14>)
 80001ec:	4a17      	ldr	r2, [pc, #92]	; (800024c <endfiniloop+0x4>)

080001ee <psloop>:
 80001ee:	4291      	cmp	r1, r2
 80001f0:	bf3c      	itt	cc
 80001f2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f6:	e7fa      	bcc.n	80001ee <psloop>
 80001f8:	4919      	ldr	r1, [pc, #100]	; (8000260 <endfiniloop+0x18>)
 80001fa:	4a1a      	ldr	r2, [pc, #104]	; (8000264 <endfiniloop+0x1c>)
 80001fc:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <endfiniloop+0x20>)

080001fe <dloop>:
 80001fe:	429a      	cmp	r2, r3
 8000200:	bf3e      	ittt	cc
 8000202:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000206:	f842 0b04 	strcc.w	r0, [r2], #4
 800020a:	e7f8      	bcc.n	80001fe <dloop>
 800020c:	2000      	movs	r0, #0
 800020e:	4917      	ldr	r1, [pc, #92]	; (800026c <endfiniloop+0x24>)
 8000210:	4a17      	ldr	r2, [pc, #92]	; (8000270 <endfiniloop+0x28>)

08000212 <bloop>:
 8000212:	4291      	cmp	r1, r2
 8000214:	bf3c      	itt	cc
 8000216:	f841 0b04 	strcc.w	r0, [r1], #4
 800021a:	e7fa      	bcc.n	8000212 <bloop>
 800021c:	f001 fb70 	bl	8001900 <__init_ram_areas>
 8000220:	f001 fb9e 	bl	8001960 <__late_init>
 8000224:	4c13      	ldr	r4, [pc, #76]	; (8000274 <endfiniloop+0x2c>)
 8000226:	4d14      	ldr	r5, [pc, #80]	; (8000278 <endfiniloop+0x30>)

08000228 <initloop>:
 8000228:	42ac      	cmp	r4, r5
 800022a:	da03      	bge.n	8000234 <endinitloop>
 800022c:	f854 1b04 	ldr.w	r1, [r4], #4
 8000230:	4788      	blx	r1
 8000232:	e7f9      	b.n	8000228 <initloop>

08000234 <endinitloop>:
 8000234:	f002 f8f4 	bl	8002420 <main>
 8000238:	4c10      	ldr	r4, [pc, #64]	; (800027c <endfiniloop+0x34>)
 800023a:	4d11      	ldr	r5, [pc, #68]	; (8000280 <endfiniloop+0x38>)

0800023c <finiloop>:
 800023c:	42ac      	cmp	r4, r5
 800023e:	da03      	bge.n	8000248 <endfiniloop>
 8000240:	f854 1b04 	ldr.w	r1, [r4], #4
 8000244:	4788      	blx	r1
 8000246:	e7f9      	b.n	800023c <finiloop>

08000248 <endfiniloop>:
 8000248:	f001 bb82 	b.w	8001950 <__default_exit>
 800024c:	20000800 	.word	0x20000800
 8000250:	55555555 	.word	0x55555555
 8000254:	20000000 	.word	0x20000000
 8000258:	20000400 	.word	0x20000400
 800025c:	20000400 	.word	0x20000400
 8000260:	08003168 	.word	0x08003168
 8000264:	20000800 	.word	0x20000800
 8000268:	20000cb4 	.word	0x20000cb4
 800026c:	20000cb8 	.word	0x20000cb8
 8000270:	2000b464 	.word	0x2000b464
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	080001c0 	.word	0x080001c0
 8000280:	080001c0 	.word	0x080001c0
	...

08000290 <_port_switch>:
 8000290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000294:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000298:	68c3      	ldr	r3, [r0, #12]
 800029a:	469d      	mov	sp, r3
 800029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a0 <_port_thread_start>:
 80002a0:	2300      	movs	r3, #0
 80002a2:	f383 8811 	msr	BASEPRI, r3
 80002a6:	4628      	mov	r0, r5
 80002a8:	47a0      	blx	r4
 80002aa:	2000      	movs	r0, #0
 80002ac:	f001 fad0 	bl	8001850 <chThdExit>

080002b0 <_port_switch_from_isr>:
 80002b0:	f001 fb06 	bl	80018c0 <chSchDoReschedule>

080002b4 <_port_exit_from_isr>:
 80002b4:	df00      	svc	0
 80002b6:	e7fe      	b.n	80002b6 <_port_exit_from_isr+0x2>
	...

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>
	...

08000a60 <__aeabi_d2iz>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d215      	bcs.n	8000a96 <__aeabi_d2iz+0x36>
 8000a6a:	d511      	bpl.n	8000a90 <__aeabi_d2iz+0x30>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d912      	bls.n	8000a9c <__aeabi_d2iz+0x3c>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	4240      	negne	r0, r0
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9a:	d105      	bne.n	8000aa8 <__aeabi_d2iz+0x48>
 8000a9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	bf08      	it	eq
 8000aa2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <notify2.lto_priv.27>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8000ab0:	4a02      	ldr	r2, [pc, #8]	; (8000abc <notify2.lto_priv.27+0xc>)
 8000ab2:	68d3      	ldr	r3, [r2, #12]
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab8:	60d3      	str	r3, [r2, #12]
 8000aba:	4770      	bx	lr
 8000abc:	40004400 	.word	0x40004400

08000ac0 <notify1.lto_priv.26>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8000ac0:	4a02      	ldr	r2, [pc, #8]	; (8000acc <notify1.lto_priv.26+0xc>)
 8000ac2:	68d3      	ldr	r3, [r2, #12]
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac8:	60d3      	str	r3, [r2, #12]
 8000aca:	4770      	bx	lr
 8000acc:	40011000 	.word	0x40011000

08000ad0 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8000ad0:	6983      	ldr	r3, [r0, #24]
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8000ad2:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8000ad4:	691a      	ldr	r2, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8000ad6:	68dc      	ldr	r4, [r3, #12]
 8000ad8:	4014      	ands	r4, r2
 8000ada:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 8000adc:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8000ade:	07a6      	lsls	r6, r4, #30
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8000ae0:	4605      	mov	r5, r0
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
 8000ae2:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8000ae4:	d503      	bpl.n	8000aee <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 8000ae6:	6843      	ldr	r3, [r0, #4]
 8000ae8:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8000aea:	b103      	cbz	r3, 8000aee <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 8000aec:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000aee:	0760      	lsls	r0, r4, #29
 8000af0:	d504      	bpl.n	8000afc <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 8000af2:	686b      	ldr	r3, [r5, #4]
 8000af4:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000af6:	b10b      	cbz	r3, 8000afc <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 8000af8:	4628      	mov	r0, r5
 8000afa:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8000afc:	0721      	lsls	r1, r4, #28
 8000afe:	d504      	bpl.n	8000b0a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 8000b00:	686b      	ldr	r3, [r5, #4]
 8000b02:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8000b04:	b10b      	cbz	r3, 8000b0a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 8000b06:	4628      	mov	r0, r5
 8000b08:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8000b0a:	06e2      	lsls	r2, r4, #27
 8000b0c:	d504      	bpl.n	8000b18 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 8000b0e:	686b      	ldr	r3, [r5, #4]
 8000b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8000b12:	b10b      	cbz	r3, 8000b18 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 8000b14:	4628      	mov	r0, r5
 8000b16:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8000b18:	07e3      	lsls	r3, r4, #31
 8000b1a:	d506      	bpl.n	8000b2a <pwm_lld_serve_interrupt+0x5a>
 8000b1c:	686b      	ldr	r3, [r5, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	b11b      	cbz	r3, 8000b2a <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 8000b22:	4628      	mov	r0, r5
}
 8000b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
    pwmp->config->callback(pwmp);
 8000b28:	4718      	bx	r3
 8000b2a:	bd70      	pop	{r4, r5, r6, pc}
 8000b2c:	0000      	movs	r0, r0
	...

08000b30 <_port_irq_epilogue>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000b30:	2320      	movs	r3, #32
 8000b32:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <_port_irq_epilogue+0x44>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000b3e:	d102      	bne.n	8000b46 <_port_irq_epilogue+0x16>
 8000b40:	f383 8811 	msr	BASEPRI, r3
 8000b44:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000b46:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000b4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b4e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000b52:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000b56:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000b5a:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <_port_irq_epilogue+0x48>)
 8000b5c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8000b5e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000b60:	6889      	ldr	r1, [r1, #8]
 8000b62:	6892      	ldr	r2, [r2, #8]
 8000b64:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000b66:	bf8c      	ite	hi
 8000b68:	4a04      	ldrhi	r2, [pc, #16]	; (8000b7c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000b6a:	4a05      	ldrls	r2, [pc, #20]	; (8000b80 <_port_irq_epilogue+0x50>)
 8000b6c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	2000b2d0 	.word	0x2000b2d0
 8000b7c:	080002b1 	.word	0x080002b1
 8000b80:	080002b4 	.word	0x080002b4
	...

08000b90 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8000b90:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD3);
 8000b92:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <VectorB4+0x10>)
 8000b94:	f7ff ff9c 	bl	8000ad0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8000b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD3);

  OSAL_IRQ_EPILOGUE();
 8000b9c:	f7ff bfc8 	b.w	8000b30 <_port_irq_epilogue>
 8000ba0:	2000b2ac 	.word	0x2000b2ac
	...

08000bb0 <VectorAC>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_CC_HANDLER) {
 8000bb0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);
 8000bb2:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <VectorAC+0x10>)
 8000bb4:	f7ff ff8c 	bl	8000ad0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8000bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);

  OSAL_IRQ_EPILOGUE();
 8000bbc:	f7ff bfb8 	b.w	8000b30 <_port_irq_epilogue>
 8000bc0:	2000b28c 	.word	0x2000b28c
	...

08000bd0 <VectorA4>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8000bd0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);
 8000bd2:	4803      	ldr	r0, [pc, #12]	; (8000be0 <VectorA4+0x10>)
 8000bd4:	f7ff ff7c 	bl	8000ad0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8000bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);

  OSAL_IRQ_EPILOGUE();
 8000bdc:	f7ff bfa8 	b.w	8000b30 <_port_irq_epilogue>
 8000be0:	2000b28c 	.word	0x2000b28c
	...

08000bf0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000bf4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000bf8:	692b      	ldr	r3, [r5, #16]
 8000bfa:	079b      	lsls	r3, r3, #30
 8000bfc:	d403      	bmi.n	8000c06 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8000bfe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000c02:	f7ff bf95 	b.w	8000b30 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8000c06:	2700      	movs	r7, #0
 8000c08:	612f      	str	r7, [r5, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000c0a:	2620      	movs	r6, #32
 8000c0c:	f386 8811 	msr	BASEPRI, r6
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8000c10:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000c8c <VectorB0+0x9c>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000c14:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000c16:	f8d9 301c 	ldr.w	r3, [r9, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000c1a:	f8d9 e028 	ldr.w	lr, [r9, #40]	; 0x28
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	ebce 0001 	rsb	r0, lr, r1
 8000c24:	4290      	cmp	r0, r2
 8000c26:	f109 081c 	add.w	r8, r9, #28
 8000c2a:	d31c      	bcc.n	8000c66 <VectorB0+0x76>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000c2c:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8000c2e:	68dc      	ldr	r4, [r3, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000c30:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000c32:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000c34:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000c38:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8000c3c:	f8c9 101c 	str.w	r1, [r9, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8000c40:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000c42:	bf08      	it	eq
 8000c44:	60ef      	streq	r7, [r5, #12]
 8000c46:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8000c4a:	6918      	ldr	r0, [r3, #16]
 8000c4c:	47a0      	blx	r4
 8000c4e:	f386 8811 	msr	BASEPRI, r6
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000c52:	f8d9 301c 	ldr.w	r3, [r9, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000c56:	6a69      	ldr	r1, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000c58:	f8d9 e028 	ldr.w	lr, [r9, #40]	; 0x28
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	ebce 0001 	rsb	r0, lr, r1
 8000c62:	4282      	cmp	r2, r0
 8000c64:	d9e2      	bls.n	8000c2c <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000c66:	4543      	cmp	r3, r8
 8000c68:	d008      	beq.n	8000c7c <VectorB0+0x8c>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8000c6a:	4472      	add	r2, lr
 8000c6c:	1a52      	subs	r2, r2, r1
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000c6e:	2a01      	cmp	r2, #1
 8000c70:	bf98      	it	ls
 8000c72:	2202      	movls	r2, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  }
  port_timer_set_alarm(now + delta);
 8000c78:	440a      	add	r2, r1
 8000c7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8000c82:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000c86:	f7ff bf53 	b.w	8000b30 <_port_irq_epilogue>
 8000c8a:	bf00      	nop
 8000c8c:	2000b2d0 	.word	0x2000b2d0

08000c90 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000c90:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000c94:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000c96:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f383 8811 	msr	BASEPRI, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
	...

08000cb0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000cb0:	b410      	push	{r4}
 8000cb2:	2320      	movs	r3, #32
 8000cb4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000cb8:	4c09      	ldr	r4, [pc, #36]	; (8000ce0 <chCoreAlloc+0x30>)
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <chCoreAlloc+0x34>)
 8000cbc:	6822      	ldr	r2, [r4, #0]
 8000cbe:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000cc0:	1dc3      	adds	r3, r0, #7
 8000cc2:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000cc6:	1a89      	subs	r1, r1, r2
 8000cc8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8000cca:	bf9d      	ittte	ls
 8000ccc:	189b      	addls	r3, r3, r2
 8000cce:	6023      	strls	r3, [r4, #0]

  return p;
 8000cd0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8000cd2:	2000      	movhi	r0, #0
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8000cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	2000b2c8 	.word	0x2000b2c8
 8000ce4:	2000b2a8 	.word	0x2000b2a8
	...

08000cf0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000cf0:	b410      	push	{r4}
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000cf8:	7f03      	ldrb	r3, [r0, #28]
 8000cfa:	2b07      	cmp	r3, #7
 8000cfc:	d80e      	bhi.n	8000d1c <wakeup+0x2c>
 8000cfe:	e8df f003 	tbb	[pc, r3]
 8000d02:	0d27      	.short	0x0d27
 8000d04:	0408230d 	.word	0x0408230d
 8000d08:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8000d0a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 8000d0c:	6893      	ldr	r3, [r2, #8]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000d12:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000d16:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000d18:	6802      	ldr	r2, [r0, #0]
 8000d1a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000d1c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000d20:	2200      	movs	r2, #0
 8000d22:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000d26:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000d28:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000d2a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	428a      	cmp	r2, r1
 8000d30:	d2fb      	bcs.n	8000d2a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000d36:	6003      	str	r3, [r0, #0]
 8000d38:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8000d3a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8000d3c:	6058      	str	r0, [r3, #4]
 8000d3e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d46:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8000d48:	6a03      	ldr	r3, [r0, #32]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	e7e5      	b.n	8000d1c <wakeup+0x2c>
 8000d50:	2300      	movs	r3, #0
 8000d52:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	2000b2d0 	.word	0x2000b2d0

08000d60 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000d60:	2200      	movs	r2, #0
 8000d62:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000d66:	b410      	push	{r4}
 8000d68:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000d6a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000d6c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	428a      	cmp	r2, r1
 8000d72:	d2fb      	bcs.n	8000d6c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000d78:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 8000d7a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8000d7c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000d7e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8000d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	2000b2d0 	.word	0x2000b2d0
 8000d8c:	00000000 	.word	0x00000000

08000d90 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8000d92:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000d94:	42a0      	cmp	r0, r4
 8000d96:	d021      	beq.n	8000ddc <chEvtBroadcastFlagsI+0x4c>
 8000d98:	460e      	mov	r6, r1
 8000d9a:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000d9c:	2500      	movs	r5, #0
 8000d9e:	e002      	b.n	8000da6 <chEvtBroadcastFlagsI+0x16>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8000da0:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000da2:	42a7      	cmp	r7, r4
 8000da4:	d01a      	beq.n	8000ddc <chEvtBroadcastFlagsI+0x4c>
  /*lint -restore*/
    elp->el_flags |= flags;
 8000da6:	68e3      	ldr	r3, [r4, #12]
 8000da8:	4333      	orrs	r3, r6
 8000daa:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000dac:	b116      	cbz	r6, 8000db4 <chEvtBroadcastFlagsI+0x24>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8000dae:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000db0:	4213      	tst	r3, r2
 8000db2:	d0f5      	beq.n	8000da0 <chEvtBroadcastFlagsI+0x10>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8000db4:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000db6:	68a3      	ldr	r3, [r4, #8]
 8000db8:	6b41      	ldr	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000dba:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000dbc:	430b      	orrs	r3, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000dbe:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000dc0:	6343      	str	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000dc2:	d00c      	beq.n	8000dde <chEvtBroadcastFlagsI+0x4e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000dc4:	2a0b      	cmp	r2, #11
 8000dc6:	d1eb      	bne.n	8000da0 <chEvtBroadcastFlagsI+0x10>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8000dc8:	6a02      	ldr	r2, [r0, #32]
 8000dca:	4013      	ands	r3, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d1e7      	bne.n	8000da0 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000dd0:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 8000dd2:	f7ff ffc5 	bl	8000d60 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8000dd6:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000dd8:	42a7      	cmp	r7, r4
 8000dda:	d1e4      	bne.n	8000da6 <chEvtBroadcastFlagsI+0x16>
 8000ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000dde:	6a02      	ldr	r2, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000de0:	4213      	tst	r3, r2
 8000de2:	d0dd      	beq.n	8000da0 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000de4:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 8000de6:	f7ff ffbb 	bl	8000d60 <chSchReadyI>
 8000dea:	e7f4      	b.n	8000dd6 <chEvtBroadcastFlagsI+0x46>
 8000dec:	0000      	movs	r0, r0
	...

08000df0 <serve_interrupt>:
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8000df0:	f644 6374 	movw	r3, #20084	; 0x4e74
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8000df8:	58c6      	ldr	r6, [r0, r3]
  uint16_t cr1 = u->CR1;
 8000dfa:	f8d6 a00c 	ldr.w	sl, [r6, #12]
  uint16_t sr = u->SR;
 8000dfe:	6833      	ldr	r3, [r6, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8000e00:	05da      	lsls	r2, r3, #23
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8000e02:	b082      	sub	sp, #8
 8000e04:	4605      	mov	r5, r0
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8000e06:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8000e08:	f100 8082 	bmi.w	8000f10 <serve_interrupt+0x120>
 8000e0c:	2320      	movs	r3, #32
 8000e0e:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000e12:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000e16:	d04a      	beq.n	8000eae <serve_interrupt+0xbe>
    sts |= SD_PARITY_ERROR;
  if (sr & USART_SR_FE)
    sts |= SD_FRAMING_ERROR;
  if (sr & USART_SR_NE)
    sts |= SD_NOISE_ERROR;
  chnAddFlagsI(sdp, sts);
 8000e18:	f105 0804 	add.w	r8, r5, #4
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 8000e1c:	f105 070c 	add.w	r7, r5, #12

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000e20:	f04f 0900 	mov.w	r9, #0
 8000e24:	e007      	b.n	8000e36 <serve_interrupt+0x46>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8000e26:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8000e28:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000e2a:	d41d      	bmi.n	8000e68 <serve_interrupt+0x78>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8000e2c:	6834      	ldr	r4, [r6, #0]
 8000e2e:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000e30:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000e34:	d03b      	beq.n	8000eae <serve_interrupt+0xbe>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000e36:	0723      	lsls	r3, r4, #28
 8000e38:	d0f5      	beq.n	8000e26 <serve_interrupt+0x36>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8000e3a:	f014 0f08 	tst.w	r4, #8
 8000e3e:	bf0c      	ite	eq
 8000e40:	2100      	moveq	r1, #0
 8000e42:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8000e44:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 8000e46:	bf48      	it	mi
 8000e48:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8000e4c:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8000e4e:	bf48      	it	mi
 8000e50:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8000e54:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8000e56:	bf48      	it	mi
 8000e58:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	f7ff ff97 	bl	8000d90 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8000e62:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8000e64:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000e66:	d5e1      	bpl.n	8000e2c <serve_interrupt+0x3c>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8000e68:	696a      	ldr	r2, [r5, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	d03e      	beq.n	8000eec <serve_interrupt+0xfc>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8000e6e:	6a2a      	ldr	r2, [r5, #32]
 8000e70:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000e72:	428a      	cmp	r2, r1
 8000e74:	d044      	beq.n	8000f00 <serve_interrupt+0x110>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8000e76:	6969      	ldr	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8000e78:	1c50      	adds	r0, r2, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8000e7a:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 8000e7c:	6228      	str	r0, [r5, #32]

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8000e7e:	6169      	str	r1, [r5, #20]
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8000e80:	7013      	strb	r3, [r2, #0]
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
 8000e82:	6a2a      	ldr	r2, [r5, #32]
 8000e84:	69eb      	ldr	r3, [r5, #28]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d301      	bcc.n	8000e8e <serve_interrupt+0x9e>
    iqp->q_wrptr = iqp->q_buffer;
 8000e8a:	69ab      	ldr	r3, [r5, #24]
 8000e8c:	622b      	str	r3, [r5, #32]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000e8e:	68eb      	ldr	r3, [r5, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000e90:	429f      	cmp	r7, r3
 8000e92:	d0cb      	beq.n	8000e2c <serve_interrupt+0x3c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	60ea      	str	r2, [r5, #12]
  (void) chSchReadyI(tp);
 8000e98:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000e9a:	6057      	str	r7, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000e9c:	f8c3 9020 	str.w	r9, [r3, #32]
  (void) chSchReadyI(tp);
 8000ea0:	f7ff ff5e 	bl	8000d60 <chSchReadyI>
    if (sr & USART_SR_RXNE)
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8000ea4:	6834      	ldr	r4, [r6, #0]
 8000ea6:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000ea8:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000eac:	d1c3      	bne.n	8000e36 <serve_interrupt+0x46>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000eb4:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8000eb8:	d001      	beq.n	8000ebe <serve_interrupt+0xce>
 8000eba:	0622      	lsls	r2, r4, #24
 8000ebc:	d437      	bmi.n	8000f2e <serve_interrupt+0x13e>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8000ebe:	0663      	lsls	r3, r4, #25
 8000ec0:	d511      	bpl.n	8000ee6 <serve_interrupt+0xf6>
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000ec8:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000eca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d054      	beq.n	8000f7a <serve_interrupt+0x18a>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000ed0:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000ed4:	ea0a 0303 	and.w	r3, sl, r3
    u->SR = ~USART_SR_TC;
 8000ed8:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000edc:	60f3      	str	r3, [r6, #12]
 8000ede:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8000ee0:	6032      	str	r2, [r6, #0]
 8000ee2:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }
}
 8000ee6:	b002      	add	sp, #8
 8000ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eec:	2104      	movs	r1, #4
 8000eee:	4640      	mov	r0, r8
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	f7ff ff4d 	bl	8000d90 <chEvtBroadcastFlagsI>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8000ef6:	6a2a      	ldr	r2, [r5, #32]
 8000ef8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000efa:	9b01      	ldr	r3, [sp, #4]
 8000efc:	428a      	cmp	r2, r1
 8000efe:	d1ba      	bne.n	8000e76 <serve_interrupt+0x86>
 8000f00:	6969      	ldr	r1, [r5, #20]
 8000f02:	2900      	cmp	r1, #0
 8000f04:	d0b7      	beq.n	8000e76 <serve_interrupt+0x86>
 8000f06:	4640      	mov	r0, r8
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	f7ff ff41 	bl	8000d90 <chEvtBroadcastFlagsI>
 8000f0e:	e78d      	b.n	8000e2c <serve_interrupt+0x3c>
 8000f10:	2320      	movs	r3, #32
 8000f12:	f383 8811 	msr	BASEPRI, r3
 8000f16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1a:	3004      	adds	r0, #4
 8000f1c:	f7ff ff38 	bl	8000d90 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8000f20:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8000f24:	6033      	str	r3, [r6, #0]
 8000f26:	2300      	movs	r3, #0
 8000f28:	f383 8811 	msr	BASEPRI, r3
 8000f2c:	e76e      	b.n	8000e0c <serve_interrupt+0x1c>
 8000f2e:	2320      	movs	r3, #32
 8000f30:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000f34:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000f36:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d026      	beq.n	8000f8a <serve_interrupt+0x19a>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8000f3c:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8000f3e:	6c29      	ldr	r1, [r5, #64]	; 0x40
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8000f40:	1c58      	adds	r0, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8000f42:	3201      	adds	r2, #1
 8000f44:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8000f46:	64a8      	str	r0, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8000f48:	4288      	cmp	r0, r1
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8000f4a:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8000f4c:	d301      	bcc.n	8000f52 <serve_interrupt+0x162>
    oqp->q_rdptr = oqp->q_buffer;
 8000f4e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000f50:	64ab      	str	r3, [r5, #72]	; 0x48
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000f52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 8000f54:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d009      	beq.n	8000f70 <serve_interrupt+0x180>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000f5c:	6819      	ldr	r1, [r3, #0]
 8000f5e:	6329      	str	r1, [r5, #48]	; 0x30

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000f60:	f04f 0e00 	mov.w	lr, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f64:	604a      	str	r2, [r1, #4]
  (void) chSchReadyI(tp);
 8000f66:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000f68:	f8c3 e020 	str.w	lr, [r3, #32]
  (void) chSchReadyI(tp);
 8000f6c:	f7ff fef8 	bl	8000d60 <chSchReadyI>
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 8000f70:	6077      	str	r7, [r6, #4]
 8000f72:	2300      	movs	r3, #0
 8000f74:	f383 8811 	msr	BASEPRI, r3
 8000f78:	e7a1      	b.n	8000ebe <serve_interrupt+0xce>
 8000f7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0a7      	beq.n	8000ed0 <serve_interrupt+0xe0>
 8000f80:	1d28      	adds	r0, r5, #4
 8000f82:	2110      	movs	r1, #16
 8000f84:	f7ff ff04 	bl	8000d90 <chEvtBroadcastFlagsI>
 8000f88:	e7a2      	b.n	8000ed0 <serve_interrupt+0xe0>
 8000f8a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000f8c:	2a00      	cmp	r2, #0
 8000f8e:	d0d5      	beq.n	8000f3c <serve_interrupt+0x14c>
 8000f90:	1d28      	adds	r0, r5, #4
 8000f92:	2108      	movs	r1, #8
 8000f94:	f7ff fefc 	bl	8000d90 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8000f98:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000f9c:	ea0a 0303 	and.w	r3, sl, r3
 8000fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa4:	60f3      	str	r3, [r6, #12]
 8000fa6:	e7e4      	b.n	8000f72 <serve_interrupt+0x182>
	...

08000fb0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000fb0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <VectorD8+0x10>)
 8000fb4:	f7ff ff1c 	bl	8000df0 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8000fb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8000fbc:	f7ff bdb8 	b.w	8000b30 <_port_irq_epilogue>
 8000fc0:	20006408 	.word	0x20006408
	...

08000fd0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8000fd0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <VectorD4+0x10>)
 8000fd4:	f7ff ff0c 	bl	8000df0 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8000fd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 8000fdc:	f7ff bda8 	b.w	8000b30 <_port_irq_epilogue>
 8000fe0:	20001590 	.word	0x20001590
	...

08000ff0 <_idle_thread.lto_priv.25>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000ff0:	e7fe      	b.n	8000ff0 <_idle_thread.lto_priv.25>
 8000ff2:	bf00      	nop
	...

08001000 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001000:	e7fe      	b.n	8001000 <BusFault_Handler>
 8001002:	bf00      	nop
	...

08001010 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001012:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001014:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001016:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8001018:	6814      	ldr	r4, [r2, #0]
  otp->p_state = newstate;
 800101a:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800101c:	2501      	movs	r5, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 800101e:	6063      	str	r3, [r4, #4]
 8001020:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001022:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8001024:	4610      	mov	r0, r2
}
 8001026:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001028:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800102a:	f7ff b931 	b.w	8000290 <_port_switch>
 800102e:	bf00      	nop
 8001030:	2000b2d0 	.word	0x2000b2d0
	...

08001040 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001042:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001044:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001046:	d047      	beq.n	80010d8 <chSchGoSleepTimeoutS+0x98>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8001048:	4c3e      	ldr	r4, [pc, #248]	; (8001144 <chSchGoSleepTimeoutS+0x104>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800104a:	4a3f      	ldr	r2, [pc, #252]	; (8001148 <chSchGoSleepTimeoutS+0x108>)
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 800104c:	69a3      	ldr	r3, [r4, #24]
 800104e:	9305      	str	r3, [sp, #20]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001050:	4625      	mov	r5, r4
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001052:	2901      	cmp	r1, #1
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001054:	f855 3f1c 	ldr.w	r3, [r5, #28]!
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001058:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 800105c:	bf98      	it	ls
 800105e:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001060:	42ab      	cmp	r3, r5
 8001062:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8001066:	9204      	str	r2, [sp, #16]
 8001068:	4686      	mov	lr, r0
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800106a:	d055      	beq.n	8001118 <chSchGoSleepTimeoutS+0xd8>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 800106c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (delta < ch.vtlist.vt_next->vt_delta) {
 800106e:	6898      	ldr	r0, [r3, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8001070:	4431      	add	r1, r6
 8001072:	1a8a      	subs	r2, r1, r2
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8001074:	4282      	cmp	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001076:	bf38      	it	cc
 8001078:	f8cc 1034 	strcc.w	r1, [ip, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800107c:	4282      	cmp	r2, r0
 800107e:	d904      	bls.n	800108a <chSchGoSleepTimeoutS+0x4a>
    delta -= p->vt_delta;
    p = p->vt_next;
 8001080:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8001082:	1a12      	subs	r2, r2, r0
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001084:	6898      	ldr	r0, [r3, #8]
 8001086:	4290      	cmp	r0, r2
 8001088:	d3fa      	bcc.n	8001080 <chSchGoSleepTimeoutS+0x40>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800108a:	6859      	ldr	r1, [r3, #4]
 800108c:	9102      	str	r1, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 800108e:	af01      	add	r7, sp, #4
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8001090:	9301      	str	r3, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8001092:	600f      	str	r7, [r1, #0]
  p->vt_prev = vtp;
 8001094:	605f      	str	r7, [r3, #4]
  vtp->vt_delta = delta
 8001096:	9203      	str	r2, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001098:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800109e:	1a8a      	subs	r2, r1, r2
 80010a0:	609a      	str	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80010a2:	6260      	str	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 80010a4:	4670      	mov	r0, lr
 80010a6:	f7ff ffb3 	bl	8001010 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80010aa:	9b04      	ldr	r3, [sp, #16]
 80010ac:	b183      	cbz	r3, 80010d0 <chSchGoSleepTimeoutS+0x90>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 80010ae:	69e3      	ldr	r3, [r4, #28]
 80010b0:	4a24      	ldr	r2, [pc, #144]	; (8001144 <chSchGoSleepTimeoutS+0x104>)
 80010b2:	42bb      	cmp	r3, r7
 80010b4:	d017      	beq.n	80010e6 <chSchGoSleepTimeoutS+0xa6>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 80010b6:	9a02      	ldr	r2, [sp, #8]
 80010b8:	9b01      	ldr	r3, [sp, #4]
 80010ba:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 80010bc:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 80010be:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 80010c0:	42ab      	cmp	r3, r5
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 80010c2:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 80010c4:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 80010c6:	d003      	beq.n	80010d0 <chSchGoSleepTimeoutS+0x90>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 80010c8:	6899      	ldr	r1, [r3, #8]
 80010ca:	9a03      	ldr	r2, [sp, #12]
 80010cc:	440a      	add	r2, r1
 80010ce:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 80010d0:	69a3      	ldr	r3, [r4, #24]
}
 80010d2:	6a18      	ldr	r0, [r3, #32]
 80010d4:	b007      	add	sp, #28
 80010d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d8:	4c1a      	ldr	r4, [pc, #104]	; (8001144 <chSchGoSleepTimeoutS+0x104>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80010da:	f7ff ff99 	bl	8001010 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 80010de:	69a3      	ldr	r3, [r4, #24]
}
 80010e0:	6a18      	ldr	r0, [r3, #32]
 80010e2:	b007      	add	sp, #28
 80010e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 80010e6:	9901      	ldr	r1, [sp, #4]
 80010e8:	61d1      	str	r1, [r2, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 80010ea:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80010ec:	42a9      	cmp	r1, r5
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80010ee:	604d      	str	r5, [r1, #4]
  vtp->vt_func = NULL;
 80010f0:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80010f2:	d022      	beq.n	800113a <chSchGoSleepTimeoutS+0xfa>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80010f4:	9803      	ldr	r0, [sp, #12]
 80010f6:	688b      	ldr	r3, [r1, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80010f8:	6a92      	ldr	r2, [r2, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80010fa:	4403      	add	r3, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80010fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001100:	608b      	str	r3, [r1, #8]
 8001102:	6a41      	ldr	r1, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001104:	1a8a      	subs	r2, r1, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001106:	4293      	cmp	r3, r2
 8001108:	d9e2      	bls.n	80010d0 <chSchGoSleepTimeoutS+0x90>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 800110a:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800110c:	2b01      	cmp	r3, #1
 800110e:	bf98      	it	ls
 8001110:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8001112:	440b      	add	r3, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001114:	6343      	str	r3, [r0, #52]	; 0x34
 8001116:	e7db      	b.n	80010d0 <chSchGoSleepTimeoutS+0x90>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8001118:	af01      	add	r7, sp, #4
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 800111a:	1988      	adds	r0, r1, r6
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 800111c:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800111e:	2302      	movs	r3, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8001120:	62a6      	str	r6, [r4, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8001122:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001124:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 8001126:	9103      	str	r1, [sp, #12]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8001128:	61e7      	str	r7, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 800112a:	6227      	str	r7, [r4, #32]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800112c:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001130:	f8cc 2010 	str.w	r2, [ip, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001134:	f8cc 300c 	str.w	r3, [ip, #12]
 8001138:	e7b4      	b.n	80010a4 <chSchGoSleepTimeoutS+0x64>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800113a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113e:	60d3      	str	r3, [r2, #12]
 8001140:	e7c6      	b.n	80010d0 <chSchGoSleepTimeoutS+0x90>
 8001142:	bf00      	nop
 8001144:	2000b2d0 	.word	0x2000b2d0
 8001148:	08000cf1 	.word	0x08000cf1
 800114c:	00000000 	.word	0x00000000

08001150 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001150:	b169      	cbz	r1, 800116e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001154:	b410      	push	{r4}
 8001156:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001158:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800115a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800115c:	2004      	movs	r0, #4
 800115e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8001162:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8001164:	6053      	str	r3, [r2, #4]
}
 8001166:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800116a:	f7ff bf69 	b.w	8001040 <chSchGoSleepTimeoutS>
}
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	4770      	bx	lr
 8001174:	2000b2d0 	.word	0x2000b2d0
	...

08001180 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001184:	b083      	sub	sp, #12
 8001186:	4604      	mov	r4, r0
 8001188:	468b      	mov	fp, r1
 800118a:	4615      	mov	r5, r2
 800118c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800118e:	69c7      	ldr	r7, [r0, #28]
 8001190:	f04f 0820 	mov.w	r8, #32
 8001194:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8001198:	2600      	movs	r6, #0
 800119a:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800119c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800119e:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 80011a2:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80011a4:	b1fb      	cbz	r3, 80011e6 <chOQWriteTimeout+0x66>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80011a6:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80011a8:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80011aa:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80011ac:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 80011ae:	6161      	str	r1, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80011b0:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80011b2:	f89b 3000 	ldrb.w	r3, [fp]
 80011b6:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 80011b8:	6923      	ldr	r3, [r4, #16]
 80011ba:	6962      	ldr	r2, [r4, #20]
 80011bc:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 80011be:	bf24      	itt	cs
 80011c0:	68e3      	ldrcs	r3, [r4, #12]
 80011c2:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 80011c4:	b107      	cbz	r7, 80011c8 <chOQWriteTimeout+0x48>
      nfy(oqp);
 80011c6:	47b8      	blx	r7
 80011c8:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 80011cc:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 80011ce:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 80011d2:	d012      	beq.n	80011fa <chOQWriteTimeout+0x7a>
 80011d4:	f388 8811 	msr	BASEPRI, r8
 80011d8:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80011da:	46d3      	mov	fp, sl
 80011dc:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 80011e0:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1df      	bne.n	80011a6 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 80011e6:	4620      	mov	r0, r4
 80011e8:	9901      	ldr	r1, [sp, #4]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f7ff ffb0 	bl	8001150 <chThdEnqueueTimeoutS>
 80011f0:	9b00      	ldr	r3, [sp, #0]
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d0d2      	beq.n	800119c <chOQWriteTimeout+0x1c>
 80011f6:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 80011fa:	4630      	mov	r0, r6
 80011fc:	b003      	add	sp, #12
 80011fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001202:	bf00      	nop
	...

08001210 <writet.lto_priv.34>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001210:	3030      	adds	r0, #48	; 0x30
 8001212:	f7ff bfb5 	b.w	8001180 <chOQWriteTimeout>
 8001216:	bf00      	nop
	...

08001220 <write.lto_priv.28>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001220:	3030      	adds	r0, #48	; 0x30
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	f7ff bfab 	b.w	8001180 <chOQWriteTimeout>
 800122a:	bf00      	nop
 800122c:	0000      	movs	r0, r0
	...

08001230 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001232:	4604      	mov	r4, r0
 8001234:	460f      	mov	r7, r1
 8001236:	4616      	mov	r6, r2
 8001238:	2320      	movs	r3, #32
 800123a:	f383 8811 	msr	BASEPRI, r3
 800123e:	e003      	b.n	8001248 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001240:	f7ff ff86 	bl	8001150 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001244:	2800      	cmp	r0, #0
 8001246:	db19      	blt.n	800127c <chOQPutTimeout+0x4c>
 8001248:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800124a:	4620      	mov	r0, r4
 800124c:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800124e:	2d00      	cmp	r5, #0
 8001250:	d0f6      	beq.n	8001240 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001252:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001254:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001256:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001258:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800125a:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800125c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800125e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001260:	6923      	ldr	r3, [r4, #16]
 8001262:	6962      	ldr	r2, [r4, #20]
 8001264:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001266:	bf24      	itt	cs
 8001268:	68e3      	ldrcs	r3, [r4, #12]
 800126a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 800126c:	69e3      	ldr	r3, [r4, #28]
 800126e:	b10b      	cbz	r3, 8001274 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001270:	4620      	mov	r0, r4
 8001272:	4798      	blx	r3
 8001274:	2000      	movs	r0, #0
 8001276:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 800127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800127c:	f385 8811 	msr	BASEPRI, r5
 8001280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001282:	bf00      	nop
	...

08001290 <putt.lto_priv.32>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001290:	3030      	adds	r0, #48	; 0x30
 8001292:	f7ff bfcd 	b.w	8001230 <chOQPutTimeout>
 8001296:	bf00      	nop
	...

080012a0 <put.lto_priv.30>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80012a0:	3030      	adds	r0, #48	; 0x30
 80012a2:	f04f 32ff 	mov.w	r2, #4294967295
 80012a6:	f7ff bfc3 	b.w	8001230 <chOQPutTimeout>
 80012aa:	bf00      	nop
 80012ac:	0000      	movs	r0, r0
	...

080012b0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 80012b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b4:	4604      	mov	r4, r0
 80012b6:	b083      	sub	sp, #12
 80012b8:	4689      	mov	r9, r1
 80012ba:	4693      	mov	fp, r2
 80012bc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 80012be:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80012c2:	2720      	movs	r7, #32
 80012c4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 80012c8:	2600      	movs	r6, #0
 80012ca:	9701      	str	r7, [sp, #4]
 80012cc:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 80012ce:	f1b8 0f00 	cmp.w	r8, #0
 80012d2:	d005      	beq.n	80012e0 <chIQReadTimeout+0x30>
      nfy(iqp);
 80012d4:	4620      	mov	r0, r4
 80012d6:	47c0      	blx	r8
 80012d8:	e002      	b.n	80012e0 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 80012da:	f7ff ff39 	bl	8001150 <chThdEnqueueTimeoutS>
 80012de:	b9e0      	cbnz	r0, 800131a <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80012e0:	68a7      	ldr	r7, [r4, #8]
 80012e2:	4620      	mov	r0, r4
 80012e4:	4629      	mov	r1, r5
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 80012e6:	2f00      	cmp	r7, #0
 80012e8:	d0f7      	beq.n	80012da <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 80012ea:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 80012ec:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80012ee:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 80012f0:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 80012f2:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 80012f4:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80012f6:	7813      	ldrb	r3, [r2, #0]
 80012f8:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 80012fc:	6923      	ldr	r3, [r4, #16]
 80012fe:	69a2      	ldr	r2, [r4, #24]
 8001300:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001302:	bf24      	itt	cs
 8001304:	68e3      	ldrcs	r3, [r4, #12]
 8001306:	61a3      	strcs	r3, [r4, #24]
 8001308:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800130c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800130e:	45b3      	cmp	fp, r6
 8001310:	d005      	beq.n	800131e <chIQReadTimeout+0x6e>
 8001312:	9b01      	ldr	r3, [sp, #4]
 8001314:	f383 8811 	msr	BASEPRI, r3
 8001318:	e7d9      	b.n	80012ce <chIQReadTimeout+0x1e>
 800131a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800131e:	4630      	mov	r0, r6
 8001320:	b003      	add	sp, #12
 8001322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001326:	bf00      	nop
	...

08001330 <readt.lto_priv.35>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001330:	300c      	adds	r0, #12
 8001332:	f7ff bfbd 	b.w	80012b0 <chIQReadTimeout>
 8001336:	bf00      	nop
	...

08001340 <read.lto_priv.29>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001340:	300c      	adds	r0, #12
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	f7ff bfb3 	b.w	80012b0 <chIQReadTimeout>
 800134a:	bf00      	nop
 800134c:	0000      	movs	r0, r0
	...

08001350 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001350:	b570      	push	{r4, r5, r6, lr}
 8001352:	2320      	movs	r3, #32
 8001354:	460e      	mov	r6, r1
 8001356:	4604      	mov	r4, r0
 8001358:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800135c:	69c3      	ldr	r3, [r0, #28]
 800135e:	b12b      	cbz	r3, 800136c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8001360:	4798      	blx	r3
 8001362:	e003      	b.n	800136c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001364:	f7ff fef4 	bl	8001150 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001368:	2800      	cmp	r0, #0
 800136a:	db15      	blt.n	8001398 <chIQGetTimeout+0x48>
 800136c:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800136e:	4620      	mov	r0, r4
 8001370:	4631      	mov	r1, r6
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8001372:	2d00      	cmp	r5, #0
 8001374:	d0f6      	beq.n	8001364 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001376:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001378:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800137a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800137c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800137e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8001380:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001382:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8001384:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001386:	bf28      	it	cs
 8001388:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800138a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800138c:	bf28      	it	cs
 800138e:	61a3      	strcs	r3, [r4, #24]
 8001390:	2300      	movs	r3, #0
 8001392:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8001396:	bd70      	pop	{r4, r5, r6, pc}
 8001398:	f385 8811 	msr	BASEPRI, r5
 800139c:	bd70      	pop	{r4, r5, r6, pc}
 800139e:	bf00      	nop

080013a0 <gett.lto_priv.33>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80013a0:	300c      	adds	r0, #12
 80013a2:	f7ff bfd5 	b.w	8001350 <chIQGetTimeout>
 80013a6:	bf00      	nop
	...

080013b0 <get.lto_priv.31>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80013b0:	300c      	adds	r0, #12
 80013b2:	f04f 31ff 	mov.w	r1, #4294967295
 80013b6:	f7ff bfcb 	b.w	8001350 <chIQGetTimeout>
 80013ba:	bf00      	nop
 80013bc:	0000      	movs	r0, r0
	...

080013c0 <strcpy>:
    return len;
}

char *strcpy(char *dest, const char *src){
  unsigned i;
  for (i=0; src[i] != '\0'; ++i)
 80013c0:	780b      	ldrb	r3, [r1, #0]
 80013c2:	b173      	cbz	r3, 80013e2 <strcpy+0x22>
    int len;
    for (len = 0; str[len]; len++);
    return len;
}

char *strcpy(char *dest, const char *src){
 80013c4:	b410      	push	{r4}
  unsigned i;
  for (i=0; src[i] != '\0'; ++i)
 80013c6:	2200      	movs	r2, #0
 80013c8:	1e44      	subs	r4, r0, #1
    dest[i] = src[i];
 80013ca:	f804 3f01 	strb.w	r3, [r4, #1]!
    return len;
}

char *strcpy(char *dest, const char *src){
  unsigned i;
  for (i=0; src[i] != '\0'; ++i)
 80013ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80013d2:	3201      	adds	r2, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f8      	bne.n	80013ca <strcpy+0xa>
    dest[i] = src[i];
  dest[i] = '\0';
 80013d8:	2300      	movs	r3, #0
 80013da:	5483      	strb	r3, [r0, r2]
  return dest;
}
 80013dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013e0:	4770      	bx	lr
    return len;
}

char *strcpy(char *dest, const char *src){
  unsigned i;
  for (i=0; src[i] != '\0'; ++i)
 80013e2:	461a      	mov	r2, r3
    dest[i] = src[i];
  dest[i] = '\0';
 80013e4:	2300      	movs	r3, #0
 80013e6:	5483      	strb	r3, [r0, r2]
  return dest;
}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	0000      	movs	r0, r0
	...

080013f0 <strlen>:
/**
 * Return length of str as char (es. '47')
 */
int strlen(const char * str){
    int len;
    for (len = 0; str[len]; len++);
 80013f0:	7803      	ldrb	r3, [r0, #0]
 80013f2:	b13b      	cbz	r3, 8001404 <strlen+0x14>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2000      	movs	r0, #0
 80013f8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80013fc:	3001      	adds	r0, #1
 80013fe:	2a00      	cmp	r2, #0
 8001400:	d1fa      	bne.n	80013f8 <strlen+0x8>
 8001402:	4770      	bx	lr
 8001404:	4618      	mov	r0, r3
    return len;
}
 8001406:	4770      	bx	lr
	...

08001410 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001410:	4928      	ldr	r1, [pc, #160]	; (80014b4 <__early_init+0xa4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <__early_init+0xa8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001414:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800141c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800141e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001420:	680b      	ldr	r3, [r1, #0]
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001428:	680a      	ldr	r2, [r1, #0]
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <__early_init+0xa4>)
 800142c:	0792      	lsls	r2, r2, #30
 800142e:	d5fb      	bpl.n	8001428 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	f022 0203 	bic.w	r2, r2, #3
 8001436:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800143c:	4619      	mov	r1, r3
 800143e:	688b      	ldr	r3, [r1, #8]
 8001440:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <__early_init+0xa4>)
 8001442:	f013 030c 	ands.w	r3, r3, #12
 8001446:	d1fa      	bne.n	800143e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001448:	6811      	ldr	r1, [r2, #0]
 800144a:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800144e:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001450:	6093      	str	r3, [r2, #8]
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001452:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800145a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800145c:	4915      	ldr	r1, [pc, #84]	; (80014b4 <__early_init+0xa4>)
 800145e:	0798      	lsls	r0, r3, #30
 8001460:	d5fb      	bpl.n	800145a <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <__early_init+0xac>)
 8001464:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001466:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <__early_init+0xa8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800146a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800146e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001470:	6853      	ldr	r3, [r2, #4]
 8001472:	0459      	lsls	r1, r3, #17
 8001474:	d5fc      	bpl.n	8001470 <__early_init+0x60>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001476:	490f      	ldr	r1, [pc, #60]	; (80014b4 <__early_init+0xa4>)
 8001478:	680a      	ldr	r2, [r1, #0]
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <__early_init+0xa4>)
 800147c:	0192      	lsls	r2, r2, #6
 800147e:	d5fb      	bpl.n	8001478 <__early_init+0x68>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001480:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <__early_init+0xb0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001482:	4910      	ldr	r1, [pc, #64]	; (80014c4 <__early_init+0xb4>)
 8001484:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001486:	f240 7102 	movw	r1, #1794	; 0x702
 800148a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	f042 0202 	orr.w	r2, r2, #2
 8001492:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001494:	461a      	mov	r2, r3
 8001496:	6893      	ldr	r3, [r2, #8]
 8001498:	4906      	ldr	r1, [pc, #24]	; (80014b4 <__early_init+0xa4>)
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d1f9      	bne.n	8001496 <__early_init+0x86>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 80014a2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80014a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a8:	644b      	str	r3, [r1, #68]	; 0x44
 80014aa:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b0:	664b      	str	r3, [r1, #100]	; 0x64
 80014b2:	4770      	bx	lr
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40007000 	.word	0x40007000
 80014bc:	07015410 	.word	0x07015410
 80014c0:	40023c00 	.word	0x40023c00
 80014c4:	38881000 	.word	0x38881000
	...

080014d0 <pwm_lld_start>:
 */
void pwm_lld_start(PWMDriver *pwmp) {
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 80014d0:	7803      	ldrb	r3, [r0, #0]
 80014d2:	2b01      	cmp	r3, #1
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 80014d6:	d052      	beq.n	800157e <pwm_lld_start+0xae>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 80014d8:	6983      	ldr	r3, [r0, #24]
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80014de:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80014e0:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 80014e2:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80014e8:	6841      	ldr	r1, [r0, #4]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 80014ea:	6884      	ldr	r4, [r0, #8]
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80014ec:	68ca      	ldr	r2, [r1, #12]
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80014ee:	680e      	ldr	r6, [r1, #0]
 80014f0:	6940      	ldr	r0, [r0, #20]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;
 80014f2:	6acd      	ldr	r5, [r1, #44]	; 0x2c
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80014f4:	fbb0 f0f6 	udiv	r0, r0, r6
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80014f8:	f002 020f 	and.w	r2, r2, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 80014fc:	3c01      	subs	r4, #1
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80014fe:	3801      	subs	r0, #1
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001500:	2a01      	cmp	r2, #1
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8001502:	6298      	str	r0, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8001504:	62dc      	str	r4, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001506:	605d      	str	r5, [r3, #4]

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001508:	d037      	beq.n	800157a <pwm_lld_start+0xaa>
 800150a:	2a02      	cmp	r2, #2
 800150c:	d133      	bne.n	8001576 <pwm_lld_start+0xa6>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC1P;
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC1E;
 800150e:	f042 0201 	orr.w	r2, r2, #1
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8001512:	6948      	ldr	r0, [r1, #20]
 8001514:	f000 000f 	and.w	r0, r0, #15
 8001518:	2801      	cmp	r0, #1
 800151a:	d029      	beq.n	8001570 <pwm_lld_start+0xa0>
 800151c:	2802      	cmp	r0, #2
 800151e:	d025      	beq.n	800156c <pwm_lld_start+0x9c>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8001520:	69c8      	ldr	r0, [r1, #28]
 8001522:	f000 000f 	and.w	r0, r0, #15
 8001526:	2801      	cmp	r0, #1
 8001528:	d01d      	beq.n	8001566 <pwm_lld_start+0x96>
 800152a:	2802      	cmp	r0, #2
 800152c:	d019      	beq.n	8001562 <pwm_lld_start+0x92>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 800152e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001530:	f000 000f 	and.w	r0, r0, #15
 8001534:	2801      	cmp	r0, #1
 8001536:	d003      	beq.n	8001540 <pwm_lld_start+0x70>
 8001538:	2802      	cmp	r0, #2
 800153a:	d103      	bne.n	8001544 <pwm_lld_start+0x74>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC4P;
 800153c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC4E;
 8001540:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001544:	6b09      	ldr	r1, [r1, #48]	; 0x30
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 8001546:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8001548:	2501      	movs	r5, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 800154a:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 800154e:	2400      	movs	r4, #0
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8001550:	f44f 4000 	mov.w	r0, #32768	; 0x8000
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8001554:	2185      	movs	r1, #133	; 0x85
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8001556:	615d      	str	r5, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8001558:	611c      	str	r4, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 800155a:	60da      	str	r2, [r3, #12]
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 800155c:	6458      	str	r0, [r3, #68]	; 0x44
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 800155e:	6019      	str	r1, [r3, #0]
 8001560:	bdf0      	pop	{r4, r5, r6, r7, pc}
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC3P;
 8001562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
 8001566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800156a:	e7e0      	b.n	800152e <pwm_lld_start+0x5e>
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC2P;
 800156c:	f042 0220 	orr.w	r2, r2, #32
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
 8001570:	f042 0210 	orr.w	r2, r2, #16
 8001574:	e7d4      	b.n	8001520 <pwm_lld_start+0x50>
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
 8001576:	2200      	movs	r2, #0
 8001578:	e7cb      	b.n	8001512 <pwm_lld_start+0x42>
 800157a:	2200      	movs	r2, #0
 800157c:	e7c7      	b.n	800150e <pwm_lld_start+0x3e>
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <pwm_lld_start+0x134>)
 8001580:	4298      	cmp	r0, r3
 8001582:	d008      	beq.n	8001596 <pwm_lld_start+0xc6>
#endif
    }
#endif

#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <pwm_lld_start+0x138>)
 8001586:	4298      	cmp	r0, r3
 8001588:	d025      	beq.n	80015d6 <pwm_lld_start+0x106>
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 800158a:	6983      	ldr	r3, [r0, #24]
 800158c:	f646 0268 	movw	r2, #26728	; 0x6868
 8001590:	619a      	str	r2, [r3, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8001592:	61da      	str	r2, [r3, #28]
 8001594:	e7a8      	b.n	80014e8 <pwm_lld_start+0x18>

  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
      rccEnableTIM1(FALSE);
 8001596:	4a1d      	ldr	r2, [pc, #116]	; (800160c <pwm_lld_start+0x13c>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <pwm_lld_start+0x140>)
 800159a:	6c51      	ldr	r1, [r2, #68]	; 0x44
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      pwmp->clock = STM32_TIM1CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 800159c:	4f1d      	ldr	r7, [pc, #116]	; (8001614 <pwm_lld_start+0x144>)

  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
      rccEnableTIM1(FALSE);
 800159e:	f041 0101 	orr.w	r1, r1, #1
 80015a2:	6451      	str	r1, [r2, #68]	; 0x44
      rccResetTIM1();
 80015a4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80015a6:	2570      	movs	r5, #112	; 0x70
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80015a8:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80015ac:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
 80015b0:	f04f 0e00 	mov.w	lr, #0
 80015b4:	f041 0101 	orr.w	r1, r1, #1
 80015b8:	6251      	str	r1, [r2, #36]	; 0x24
 80015ba:	f8c2 e024 	str.w	lr, [r2, #36]	; 0x24

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80015be:	f883 5319 	strb.w	r5, [r3, #793]	; 0x319
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80015c2:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80015c6:	601e      	str	r6, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80015c8:	f883 531b 	strb.w	r5, [r3, #795]	; 0x31b
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80015cc:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80015d0:	601c      	str	r4, [r3, #0]
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      pwmp->clock = STM32_TIM1CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 80015d2:	6147      	str	r7, [r0, #20]
 80015d4:	e7d9      	b.n	800158a <pwm_lld_start+0xba>
    }
#endif

#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
      rccEnableTIM3(FALSE);
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <pwm_lld_start+0x13c>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <pwm_lld_start+0x140>)
 80015da:	6c19      	ldr	r1, [r3, #64]	; 0x40
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      pwmp->clock = STM32_TIM3CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 80015dc:	4d0d      	ldr	r5, [pc, #52]	; (8001614 <pwm_lld_start+0x144>)
    }
#endif

#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
      rccEnableTIM3(FALSE);
 80015de:	f041 0102 	orr.w	r1, r1, #2
 80015e2:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM3();
 80015e4:	6a19      	ldr	r1, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80015e6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 80015ea:	2700      	movs	r7, #0
 80015ec:	f041 0102 	orr.w	r1, r1, #2

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80015f0:	2670      	movs	r6, #112	; 0x70
 80015f2:	6219      	str	r1, [r3, #32]
 80015f4:	621f      	str	r7, [r3, #32]
 80015f6:	f882 631d 	strb.w	r6, [r2, #797]	; 0x31d
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80015fa:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80015fe:	6014      	str	r4, [r2, #0]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      pwmp->clock = STM32_TIM3CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 8001600:	6145      	str	r5, [r0, #20]
 8001602:	e7c2      	b.n	800158a <pwm_lld_start+0xba>
 8001604:	2000b28c 	.word	0x2000b28c
 8001608:	2000b2ac 	.word	0x2000b2ac
 800160c:	40023800 	.word	0x40023800
 8001610:	e000e100 	.word	0xe000e100
 8001614:	0501bd00 	.word	0x0501bd00
	...

08001620 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8001620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8001624:	f3c2 1c41 	ubfx	ip, r2, #5, #2
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001628:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800162c:	f3c2 0980 	ubfx	r9, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8001630:	f3c2 08c1 	ubfx	r8, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8001634:	2700      	movs	r7, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8001636:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800163a:	f04f 0b0f 	mov.w	fp, #15
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 800163e:	f04f 0a01 	mov.w	sl, #1
 8001642:	e00f      	b.n	8001664 <_pal_lld_setgroupmode+0x44>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001644:	6a04      	ldr	r4, [r0, #32]
 8001646:	ea24 0303 	bic.w	r3, r4, r3
 800164a:	431d      	orrs	r5, r3
 800164c:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800164e:	0849      	lsrs	r1, r1, #1
 8001650:	d039      	beq.n	80016c6 <_pal_lld_setgroupmode+0xa6>
      return;
    otyper <<= 1;
 8001652:	ea4f 0949 	mov.w	r9, r9, lsl #1
    ospeedr <<= 2;
 8001656:	ea4f 0888 	mov.w	r8, r8, lsl #2
    pupdr <<= 2;
 800165a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    moder <<= 2;
 800165e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8001662:	3701      	adds	r7, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 8001664:	07cb      	lsls	r3, r1, #31
 8001666:	d5f2      	bpl.n	800164e <_pal_lld_setgroupmode+0x2e>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001668:	6843      	ldr	r3, [r0, #4]
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 800166a:	fa0a f407 	lsl.w	r4, sl, r7
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800166e:	ea23 0304 	bic.w	r3, r3, r4
 8001672:	ea43 0309 	orr.w	r3, r3, r9
 8001676:	6043      	str	r3, [r0, #4]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 8001678:	2503      	movs	r5, #3
 800167a:	007c      	lsls	r4, r7, #1
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800167c:	6883      	ldr	r3, [r0, #8]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 800167e:	fa05 f404 	lsl.w	r4, r5, r4
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001682:	43e4      	mvns	r4, r4
 8001684:	4023      	ands	r3, r4
 8001686:	ea43 0308 	orr.w	r3, r3, r8
 800168a:	6083      	str	r3, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800168c:	68c5      	ldr	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800168e:	f007 0307 	and.w	r3, r7, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001692:	4025      	ands	r5, r4
 8001694:	ea45 050c 	orr.w	r5, r5, ip
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8001698:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 800169a:	f1be 0f02 	cmp.w	lr, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800169e:	60c5      	str	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80016a0:	fa02 f503 	lsl.w	r5, r2, r3
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 80016a4:	fa0b f303 	lsl.w	r3, fp, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 80016a8:	d00f      	beq.n	80016ca <_pal_lld_setgroupmode+0xaa>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80016aa:	6806      	ldr	r6, [r0, #0]
 80016ac:	4034      	ands	r4, r6
 80016ae:	ea44 040e 	orr.w	r4, r4, lr
        if (bit < 8)
 80016b2:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80016b4:	6004      	str	r4, [r0, #0]
        if (bit < 8)
 80016b6:	d9c5      	bls.n	8001644 <_pal_lld_setgroupmode+0x24>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80016b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80016ba:	ea24 0303 	bic.w	r3, r4, r3
 80016be:	431d      	orrs	r5, r3
      }
    }
    mask >>= 1;
    if (!mask)
 80016c0:	0849      	lsrs	r1, r1, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80016c2:	6245      	str	r5, [r0, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 80016c4:	d1c5      	bne.n	8001652 <_pal_lld_setgroupmode+0x32>
 80016c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 80016ca:	2f07      	cmp	r7, #7
 80016cc:	d80a      	bhi.n	80016e4 <_pal_lld_setgroupmode+0xc4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80016ce:	6a06      	ldr	r6, [r0, #32]
 80016d0:	ea26 0303 	bic.w	r3, r6, r3
 80016d4:	431d      	orrs	r5, r3
 80016d6:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 80016d8:	6803      	ldr	r3, [r0, #0]
 80016da:	401c      	ands	r4, r3
 80016dc:	f044 0402 	orr.w	r4, r4, #2
 80016e0:	6004      	str	r4, [r0, #0]
 80016e2:	e7b4      	b.n	800164e <_pal_lld_setgroupmode+0x2e>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80016e4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80016e6:	ea26 0303 	bic.w	r3, r6, r3
 80016ea:	431d      	orrs	r5, r3
 80016ec:	6245      	str	r5, [r0, #36]	; 0x24
 80016ee:	e7f3      	b.n	80016d8 <_pal_lld_setgroupmode+0xb8>

080016f0 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 80016f0:	b470      	push	{r4, r5, r6}
 80016f2:	2320      	movs	r3, #32
 80016f4:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 80016f8:	4c2b      	ldr	r4, [pc, #172]	; (80017a8 <sdStart+0xb8>)

  if (sdp->state == SD_STOP) {
 80016fa:	7a02      	ldrb	r2, [r0, #8]
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 80016fc:	2900      	cmp	r1, #0
 80016fe:	bf08      	it	eq
 8001700:	4621      	moveq	r1, r4

  if (sdp->state == SD_STOP) {
 8001702:	2a01      	cmp	r2, #1
 8001704:	d029      	beq.n	800175a <sdStart+0x6a>
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8001706:	f644 6374 	movw	r3, #20084	; 0x4e74

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800170a:	4a28      	ldr	r2, [pc, #160]	; (80017ac <sdStart+0xbc>)
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 800170c:	58c3      	ldr	r3, [r0, r3]

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800170e:	4293      	cmp	r3, r2
 8001710:	d037      	beq.n	8001782 <sdStart+0x92>
 8001712:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001716:	4293      	cmp	r3, r2
 8001718:	d033      	beq.n	8001782 <sdStart+0x92>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 800171a:	680c      	ldr	r4, [r1, #0]
 800171c:	4a24      	ldr	r2, [pc, #144]	; (80017b0 <sdStart+0xc0>)
 800171e:	fbb2 f2f4 	udiv	r2, r2, r4
 8001722:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001724:	888a      	ldrh	r2, [r1, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001726:	88cc      	ldrh	r4, [r1, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001728:	8909      	ldrh	r1, [r1, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800172a:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800172e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001732:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001736:	f041 0101 	orr.w	r1, r1, #1
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800173a:	b2a4      	uxth	r4, r4
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800173c:	b292      	uxth	r2, r2
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800173e:	b289      	uxth	r1, r1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8001740:	2500      	movs	r5, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001742:	611c      	str	r4, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001744:	6159      	str	r1, [r3, #20]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8001746:	2402      	movs	r4, #2
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001748:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800174a:	601d      	str	r5, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800174c:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	7204      	strb	r4, [r0, #8]
 8001752:	f385 8811 	msr	BASEPRI, r5
  osalSysUnlock();
}
 8001756:	bc70      	pop	{r4, r5, r6}
 8001758:	4770      	bx	lr
  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
 800175a:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <sdStart+0xc4>)
 800175c:	4290      	cmp	r0, r2
 800175e:	d016      	beq.n	800178e <sdStart+0x9e>
      rccEnableUSART1(FALSE);
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <sdStart+0xc8>)
 8001762:	4298      	cmp	r0, r3
 8001764:	d1cf      	bne.n	8001706 <sdStart+0x16>
      rccEnableUSART2(FALSE);
 8001766:	4d15      	ldr	r5, [pc, #84]	; (80017bc <sdStart+0xcc>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <sdStart+0xd0>)
 800176a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800176c:	2440      	movs	r4, #64	; 0x40

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800176e:	26c0      	movs	r6, #192	; 0xc0
 8001770:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001774:	642a      	str	r2, [r5, #64]	; 0x40
 8001776:	f883 6326 	strb.w	r6, [r3, #806]	; 0x326
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800177a:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800177e:	605c      	str	r4, [r3, #4]
 8001780:	e7c1      	b.n	8001706 <sdStart+0x16>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8001782:	680c      	ldr	r4, [r1, #0]
 8001784:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <sdStart+0xd4>)
 8001786:	fbb2 f2f4 	udiv	r2, r2, r4
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	e7ca      	b.n	8001724 <sdStart+0x34>
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 800178e:	4d0b      	ldr	r5, [pc, #44]	; (80017bc <sdStart+0xcc>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001790:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <sdStart+0xd0>)
 8001792:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001794:	26c0      	movs	r6, #192	; 0xc0
 8001796:	f044 0410 	orr.w	r4, r4, #16
 800179a:	646c      	str	r4, [r5, #68]	; 0x44
 800179c:	f882 6325 	strb.w	r6, [r2, #805]	; 0x325
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80017a0:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80017a4:	6053      	str	r3, [r2, #4]
 80017a6:	e7ae      	b.n	8001706 <sdStart+0x16>
 80017a8:	08002f10 	.word	0x08002f10
 80017ac:	40011000 	.word	0x40011000
 80017b0:	0280de80 	.word	0x0280de80
 80017b4:	20001590 	.word	0x20001590
 80017b8:	20006408 	.word	0x20006408
 80017bc:	40023800 	.word	0x40023800
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	0501bd00 	.word	0x0501bd00
	...

080017d0 <pwmEnablePeriodicNotification>:
 80017d0:	2320      	movs	r3, #32
 80017d2:	f383 8811 	msr	BASEPRI, r3
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_enable_periodic_notification(PWMDriver *pwmp) {
  uint32_t dier = pwmp->tim->DIER;
 80017d6:	6983      	ldr	r3, [r0, #24]
 80017d8:	68da      	ldr	r2, [r3, #12]

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & STM32_TIM_DIER_UIE) == 0) {
 80017da:	07d1      	lsls	r1, r2, #31
 80017dc:	d406      	bmi.n	80017ec <pwmEnablePeriodicNotification+0x1c>
    pwmp->tim->DIER = dier | STM32_TIM_DIER_UIE;
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	60da      	str	r2, [r3, #12]
    pwmp->tim->SR &= STM32_TIM_SR_UIF;
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	f002 0201 	and.w	r2, r2, #1
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	2300      	movs	r3, #0
 80017ee:	f383 8811 	msr	BASEPRI, r3
 80017f2:	4770      	bx	lr
	...

08001800 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001802:	490f      	ldr	r1, [pc, #60]	; (8001840 <chTMStopMeasurementX+0x40>)
 8001804:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001806:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001808:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800180a:	6f4f      	ldr	r7, [r1, #116]	; 0x74
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 800180c:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800180e:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001810:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8001818:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800181a:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800181c:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800181e:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8001822:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8001824:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8001828:	bf88      	it	hi
 800182a:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 800182c:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800182e:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001830:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8001834:	bf38      	it	cc
 8001836:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8001838:	bcf0      	pop	{r4, r5, r6, r7}
 800183a:	4770      	bx	lr
 800183c:	e0001000 	.word	0xe0001000
 8001840:	2000b2d0 	.word	0x2000b2d0
	...

08001850 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8001850:	b538      	push	{r3, r4, r5, lr}
 8001852:	2220      	movs	r2, #32
 8001854:	4603      	mov	r3, r0
 8001856:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <chThdExit+0x44>)
 800185c:	6994      	ldr	r4, [r2, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800185e:	6a60      	ldr	r0, [r4, #36]	; 0x24

  tp->p_u.exitcode = msg;
 8001860:	6223      	str	r3, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001862:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8001866:	42a8      	cmp	r0, r5
 8001868:	d006      	beq.n	8001878 <chThdExit+0x28>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 800186a:	6803      	ldr	r3, [r0, #0]
 800186c:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800186e:	f7ff fa77 	bl	8000d60 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001872:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001874:	42a8      	cmp	r0, r5
 8001876:	d1f8      	bne.n	800186a <chThdExit+0x1a>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001878:	7f63      	ldrb	r3, [r4, #29]
 800187a:	079b      	lsls	r3, r3, #30
 800187c:	d104      	bne.n	8001888 <chThdExit+0x38>
    REG_REMOVE(tp);
 800187e:	6963      	ldr	r3, [r4, #20]
 8001880:	6922      	ldr	r2, [r4, #16]
 8001882:	611a      	str	r2, [r3, #16]
 8001884:	6922      	ldr	r2, [r4, #16]
 8001886:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001888:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 800188a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800188e:	f7ff bbbf 	b.w	8001010 <chSchGoSleepS>
 8001892:	bf00      	nop
 8001894:	2000b2d0 	.word	0x2000b2d0
	...

080018a0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 80018a0:	b508      	push	{r3, lr}
 80018a2:	4601      	mov	r1, r0
 80018a4:	2320      	movs	r3, #32
 80018a6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80018aa:	2008      	movs	r0, #8
 80018ac:	f7ff fbc8 	bl	8001040 <chSchGoSleepTimeoutS>
 80018b0:	2300      	movs	r3, #0
 80018b2:	f383 8811 	msr	BASEPRI, r3
 80018b6:	bd08      	pop	{r3, pc}
	...

080018c0 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <chSchDoReschedule+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80018c2:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80018c4:	b470      	push	{r4, r5, r6}

  tqp->p_next = tp->p_next;
 80018c6:	6803      	ldr	r3, [r0, #0]
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80018c8:	6994      	ldr	r4, [r2, #24]
 80018ca:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80018cc:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 80018ce:	2500      	movs	r5, #0
 80018d0:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80018d2:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80018d4:	7706      	strb	r6, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80018d6:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 80018d8:	7725      	strb	r5, [r4, #28]
 80018da:	e000      	b.n	80018de <chSchDoReschedule+0x1e>
 80018dc:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	428a      	cmp	r2, r1
 80018e2:	d8fb      	bhi.n	80018dc <chSchDoReschedule+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80018e8:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80018ea:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 80018ec:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80018ee:	605c      	str	r4, [r3, #4]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 80018f0:	bc70      	pop	{r4, r5, r6}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80018f2:	f7fe bccd 	b.w	8000290 <_port_switch>
 80018f6:	bf00      	nop
 80018f8:	2000b2d0 	.word	0x2000b2d0
 80018fc:	00000000 	.word	0x00000000

08001900 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001900:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8001902:	4e11      	ldr	r6, [pc, #68]	; (8001948 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001904:	2500      	movs	r5, #0
 8001906:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 800190a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800190e:	42a3      	cmp	r3, r4
 8001910:	d20d      	bcs.n	800192e <__init_ram_areas+0x2e>
 8001912:	3904      	subs	r1, #4
 8001914:	461a      	mov	r2, r3
      *p = *tp;
 8001916:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800191a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800191e:	42a2      	cmp	r2, r4
 8001920:	d3f9      	bcc.n	8001916 <__init_ram_areas+0x16>
 8001922:	43da      	mvns	r2, r3
 8001924:	4414      	add	r4, r2
 8001926:	f024 0403 	bic.w	r4, r4, #3
 800192a:	3404      	adds	r4, #4
 800192c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800192e:	68f2      	ldr	r2, [r6, #12]
 8001930:	4293      	cmp	r3, r2
 8001932:	d203      	bcs.n	800193c <__init_ram_areas+0x3c>
      *p = 0;
 8001934:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001938:	4293      	cmp	r3, r2
 800193a:	d3fb      	bcc.n	8001934 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 800193c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800193e:	42be      	cmp	r6, r7
 8001940:	d3e3      	bcc.n	800190a <__init_ram_areas+0xa>
#endif
}
 8001942:	bcf0      	pop	{r4, r5, r6, r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	08002f30 	.word	0x08002f30
 800194c:	00000000 	.word	0x00000000

08001950 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001950:	e7fe      	b.n	8001950 <__default_exit>
 8001952:	bf00      	nop
	...

08001960 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
	...

08001970 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
	...

08001980 <printWebPage>:
  }
  buff[0] = '\0';
  chprintf((BaseChannel *)MONITOR_SERIAL, '\0', 1);
}

void printWebPage() {
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
  char cipSend[100] = {"AT+CIPSEND="};
 8001982:	4e51      	ldr	r6, [pc, #324]	; (8001ac8 <printWebPage+0x148>)
 8001984:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  }
  buff[0] = '\0';
  chprintf((BaseChannel *)MONITOR_SERIAL, '\0', 1);
}

void printWebPage() {
 8001988:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
  char cipSend[100] = {"AT+CIPSEND="};
 800198c:	ad06      	add	r5, sp, #24
 800198e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001992:	2100      	movs	r1, #0
 8001994:	2258      	movs	r2, #88	; 0x58
 8001996:	a809      	add	r0, sp, #36	; 0x24
 8001998:	f001 f85a 	bl	8002a50 <memset>
  char webPage[600] = {"<html>_"};
 800199c:	f106 0364 	add.w	r3, r6, #100	; 0x64
 80019a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019a4:	af38      	add	r7, sp, #224	; 0xe0
 80019a6:	e887 0003 	stmia.w	r7, {r0, r1}
 80019aa:	f44f 7214 	mov.w	r2, #592	; 0x250
 80019ae:	2100      	movs	r1, #0
  char webPage1[20] = {"_</html>"};
 80019b0:	f506 762f 	add.w	r6, r6, #700	; 0x2bc
  chprintf((BaseChannel *)MONITOR_SERIAL, '\0', 1);
}

void printWebPage() {
  char cipSend[100] = {"AT+CIPSEND="};
  char webPage[600] = {"<html>_"};
 80019b4:	a83a      	add	r0, sp, #232	; 0xe8
 80019b6:	f001 f84b 	bl	8002a50 <memset>
  char webPage1[20] = {"_</html>"};
 80019ba:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  if (request == 'c')
 80019be:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8001adc <printWebPage+0x15c>
}

void printWebPage() {
  char cipSend[100] = {"AT+CIPSEND="};
  char webPage[600] = {"<html>_"};
  char webPage1[20] = {"_</html>"};
 80019c2:	ae01      	add	r6, sp, #4
 80019c4:	c603      	stmia	r6!, {r0, r1}
  if (request == 'c')
 80019c6:	f89e 1000 	ldrb.w	r1, [lr]
}

void printWebPage() {
  char cipSend[100] = {"AT+CIPSEND="};
  char webPage[600] = {"<html>_"};
  char webPage1[20] = {"_</html>"};
 80019ca:	7032      	strb	r2, [r6, #0]
 80019cc:	2400      	movs	r4, #0
  if (request == 'c')
 80019ce:	2963      	cmp	r1, #99	; 0x63
}

void printWebPage() {
  char cipSend[100] = {"AT+CIPSEND="};
  char webPage[600] = {"<html>_"};
  char webPage1[20] = {"_</html>"};
 80019d0:	f88d 400d 	strb.w	r4, [sp, #13]
 80019d4:	f88d 400e 	strb.w	r4, [sp, #14]
 80019d8:	f88d 400f 	strb.w	r4, [sp, #15]
 80019dc:	f88d 4010 	strb.w	r4, [sp, #16]
 80019e0:	f88d 4011 	strb.w	r4, [sp, #17]
 80019e4:	f88d 4012 	strb.w	r4, [sp, #18]
 80019e8:	f88d 4013 	strb.w	r4, [sp, #19]
 80019ec:	f88d 4014 	strb.w	r4, [sp, #20]
 80019f0:	f88d 4015 	strb.w	r4, [sp, #21]
 80019f4:	f88d 4016 	strb.w	r4, [sp, #22]
 80019f8:	f88d 4017 	strb.w	r4, [sp, #23]
  if (request == 'c')
 80019fc:	d05e      	beq.n	8001abc <printWebPage+0x13c>
    strcat(webPage,command);
  strcat(webPage,webPage1);
 80019fe:	a901      	add	r1, sp, #4
 8001a00:	4638      	mov	r0, r7
 8001a02:	f001 f805 	bl	8002a10 <strcat>
  strcat(cipSend,clientID);
 8001a06:	4931      	ldr	r1, [pc, #196]	; (8001acc <printWebPage+0x14c>)
 8001a08:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 8001a0c:	f7ff fcd8 	bl	80013c0 <strcpy>
  strcat(cipSend,",");
 8001a10:	4628      	mov	r0, r5
 8001a12:	f7ff fced 	bl	80013f0 <strlen>
/**
 * Return length of str as char (es. '47')
 */
int strlen(const char * str){
    int len;
    for (len = 0; str[len]; len++);
 8001a16:	4a2e      	ldr	r2, [pc, #184]	; (8001ad0 <printWebPage+0x150>)
  char webPage1[20] = {"_</html>"};
  if (request == 'c')
    strcat(webPage,command);
  strcat(webPage,webPage1);
  strcat(cipSend,clientID);
  strcat(cipSend,",");
 8001a18:	492e      	ldr	r1, [pc, #184]	; (8001ad4 <printWebPage+0x154>)
/**
 * Return length of str as char (es. '47')
 */
int strlen(const char * str){
    int len;
    for (len = 0; str[len]; len++);
 8001a1a:	7813      	ldrb	r3, [r2, #0]
  char webPage1[20] = {"_</html>"};
  if (request == 'c')
    strcat(webPage,command);
  strcat(webPage,webPage1);
  strcat(cipSend,clientID);
  strcat(cipSend,",");
 8001a1c:	8809      	ldrh	r1, [r1, #0]
 8001a1e:	5229      	strh	r1, [r5, r0]
/**
 * Return length of str as char (es. '47')
 */
int strlen(const char * str){
    int len;
    for (len = 0; str[len]; len++);
 8001a20:	b12b      	cbz	r3, 8001a2e <printWebPage+0xae>
 8001a22:	2300      	movs	r3, #0
 8001a24:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001a28:	3301      	adds	r3, #1
 8001a2a:	2900      	cmp	r1, #0
 8001a2c:	d1fa      	bne.n	8001a24 <printWebPage+0xa4>
 8001a2e:	a91f      	add	r1, sp, #124	; 0x7c
     int i, sign;
     if ((sign = n) < 0)  /* record sign */
         n = -n;          /* make n positive */
     i = 0;
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
 8001a30:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8001ae0 <printWebPage+0x160>
 8001a34:	460e      	mov	r6, r1
/**
 * Return length of str as char (es. '47')
 */
int strlen(const char * str){
    int len;
    for (len = 0; str[len]; len++);
 8001a36:	468e      	mov	lr, r1
 8001a38:	2700      	movs	r7, #0
     int i, sign;
     if ((sign = n) < 0)  /* record sign */
         n = -n;          /* make n positive */
     i = 0;
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
 8001a3a:	fb8c 2403 	smull	r2, r4, ip, r3
 8001a3e:	17da      	asrs	r2, r3, #31
 8001a40:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8001a44:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8001a48:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8001a4c:	3330      	adds	r3, #48	; 0x30
 8001a4e:	f80e 3b01 	strb.w	r3, [lr], #1
 8001a52:	3701      	adds	r7, #1
     } while ((n /= 10) > 0);     /* delete it */
 8001a54:	4613      	mov	r3, r2
 8001a56:	2a00      	cmp	r2, #0
 8001a58:	d1ef      	bne.n	8001a3a <printWebPage+0xba>
     if (sign < 0)
         s[i++] = '-';
     s[i] = '\0';
 8001a5a:	55ca      	strb	r2, [r1, r7]
/**
 * Return length of str as char (es. '47')
 */
int strlen(const char * str){
    int len;
    for (len = 0; str[len]; len++);
 8001a5c:	780f      	ldrb	r7, [r1, #0]
 8001a5e:	460c      	mov	r4, r1
 8001a60:	b90f      	cbnz	r7, 8001a66 <printWebPage+0xe6>
 8001a62:	e015      	b.n	8001a90 <printWebPage+0x110>
 8001a64:	4673      	mov	r3, lr
 8001a66:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8001a6a:	f103 0e01 	add.w	lr, r3, #1
 8001a6e:	2a00      	cmp	r2, #0
 8001a70:	d1f8      	bne.n	8001a64 <printWebPage+0xe4>
 /* reverse:  reverse string s in place */
void reverse(char s[]){
    int i, j;
    char c;

    for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 8001a72:	b16b      	cbz	r3, 8001a90 <printWebPage+0x110>
 8001a74:	18cc      	adds	r4, r1, r3
 8001a76:	e000      	b.n	8001a7a <printWebPage+0xfa>
 8001a78:	7837      	ldrb	r7, [r6, #0]
        c = s[i];
        s[i] = s[j];
 8001a7a:	f894 e000 	ldrb.w	lr, [r4]
 8001a7e:	f806 eb01 	strb.w	lr, [r6], #1
 /* reverse:  reverse string s in place */
void reverse(char s[]){
    int i, j;
    char c;

    for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 8001a82:	3201      	adds	r2, #1
 8001a84:	ebc2 0e03 	rsb	lr, r2, r3
 8001a88:	4596      	cmp	lr, r2
        c = s[i];
        s[i] = s[j];
        s[j] = c;
 8001a8a:	f804 7901 	strb.w	r7, [r4], #-1
 /* reverse:  reverse string s in place */
void reverse(char s[]){
    int i, j;
    char c;

    for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 8001a8e:	dcf3      	bgt.n	8001a78 <printWebPage+0xf8>
  char webPage1[20] = {"_</html>"};
  if (request == 'c')
    strcat(webPage,command);
  strcat(webPage,webPage1);
  strcat(cipSend,clientID);
  strcat(cipSend,",");
 8001a90:	3001      	adds	r0, #1
  int pageLength = strlen(command);
  char pageLengthAsString[100];
  itoa(pageLength,pageLengthAsString);
  strcat(cipSend,pageLengthAsString);
 8001a92:	4428      	add	r0, r5
 8001a94:	f7ff fc94 	bl	80013c0 <strcpy>
  strcat(cipSend,"\r\n");
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f7ff fca9 	bl	80013f0 <strlen>
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <printWebPage+0x158>)
 8001aa0:	182a      	adds	r2, r5, r0
 8001aa2:	8819      	ldrh	r1, [r3, #0]
 8001aa4:	789b      	ldrb	r3, [r3, #2]
 8001aa6:	5229      	strh	r1, [r5, r0]
  sendToESP8266(cipSend, COMMAND_SLEEP);
 8001aa8:	4628      	mov	r0, r5
  strcat(cipSend,",");
  int pageLength = strlen(command);
  char pageLengthAsString[100];
  itoa(pageLength,pageLengthAsString);
  strcat(cipSend,pageLengthAsString);
  strcat(cipSend,"\r\n");
 8001aaa:	7093      	strb	r3, [r2, #2]
  sendToESP8266(cipSend, COMMAND_SLEEP);
 8001aac:	f000 fca8 	bl	8002400 <sendToESP8266.constprop.2>
  sendToESP8266(command, COMMAND_SLEEP);
 8001ab0:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <printWebPage+0x150>)
 8001ab2:	f000 fca5 	bl	8002400 <sendToESP8266.constprop.2>
}
 8001ab6:	f50d 7d4f 	add.w	sp, sp, #828	; 0x33c
 8001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
void printWebPage() {
  char cipSend[100] = {"AT+CIPSEND="};
  char webPage[600] = {"<html>_"};
  char webPage1[20] = {"_</html>"};
  if (request == 'c')
    strcat(webPage,command);
 8001abc:	f10d 00e7 	add.w	r0, sp, #231	; 0xe7
 8001ac0:	4903      	ldr	r1, [pc, #12]	; (8001ad0 <printWebPage+0x150>)
 8001ac2:	f7ff fc7d 	bl	80013c0 <strcpy>
 8001ac6:	e79a      	b.n	80019fe <printWebPage+0x7e>
 8001ac8:	08002c40 	.word	0x08002c40
 8001acc:	20000cb8 	.word	0x20000cb8
 8001ad0:	20000cbc 	.word	0x20000cbc
 8001ad4:	08002f20 	.word	0x08002f20
 8001ad8:	08003024 	.word	0x08003024
 8001adc:	20000cc5 	.word	0x20000cc5
 8001ae0:	66666667 	.word	0x66666667
	...

08001af0 <Uart1EVT_Thread.lto_priv.24>:
char request;
static THD_WORKING_AREA(waThread1, 2048);
/**
 * Asynchronous serial SD1
 */
static msg_t Uart1EVT_Thread(void *p) {
 8001af0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001af4:	b08b      	sub	sp, #44	; 0x2c
 8001af6:	af00      	add	r7, sp, #0
  int letterAfterPlus = 0;
  int spaceAfterD = 0;
  int x_charRead = 0, y_charRead = 0;
  int BUFF_SIZE = 1024;
  char received[BUFF_SIZE];
 8001af8:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8001afc:	466d      	mov	r5, sp
 8001afe:	2320      	movs	r3, #32
 8001b00:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8001b04:	4e86      	ldr	r6, [pc, #536]	; (8001d20 <Uart1EVT_Thread.lto_priv.24+0x230>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8001b06:	4c87      	ldr	r4, [pc, #540]	; (8001d24 <Uart1EVT_Thread.lto_priv.24+0x234>)
  esp->es_next     = elp;
  elp->el_listener = currp;
 8001b08:	69b3      	ldr	r3, [r6, #24]
 8001b0a:	61bb      	str	r3, [r7, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8001b0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b10:	6862      	ldr	r2, [r4, #4]
 8001b12:	f843 2d14 	str.w	r2, [r3, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8001b16:	2001      	movs	r0, #1
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8001b1c:	2200      	movs	r2, #0

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8001b1e:	61f8      	str	r0, [r7, #28]
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8001b20:	6279      	str	r1, [r7, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8001b22:	6063      	str	r3, [r4, #4]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8001b24:	623a      	str	r2, [r7, #32]
 8001b26:	f382 8811 	msr	BASEPRI, r2
 8001b2a:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8001d74 <Uart1EVT_Thread.lto_priv.24+0x284>
 8001b2e:	eb0d 0300 	add.w	r3, sp, r0
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	f04f 0920 	mov.w	r9, #32
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
    ctp->p_u.ewmask = events;
 8001b38:	f04f 0a01 	mov.w	sl, #1
 8001b3c:	46ab      	mov	fp, r5
 8001b3e:	e00e      	b.n	8001b5e <Uart1EVT_Thread.lto_priv.24+0x6e>
  thread_t *ctp = currp;
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
 8001b40:	f06f 0101 	mvn.w	r1, #1
    ctp->p_u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->p_epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
  ctp->p_epending &= ~m;
 8001b44:	400a      	ands	r2, r1
 8001b46:	2300      	movs	r3, #0
 8001b48:	636a      	str	r2, [r5, #52]	; 0x34
 8001b4a:	f383 8811 	msr	BASEPRI, r3
 8001b4e:	f389 8811 	msr	BASEPRI, r9
 * @iclass
 */
eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp) {
  eventflags_t flags;

  flags = elp->el_flags;
 8001b52:	6a3a      	ldr	r2, [r7, #32]
  elp->el_flags = (eventflags_t)0;
 8001b54:	623b      	str	r3, [r7, #32]
 8001b56:	f383 8811 	msr	BASEPRI, r3

    chSysLock();
    flags = chEvtGetAndClearFlagsI(&el1);
    chSysUnlock();  //wait for events;

    if (flags & CHN_INPUT_AVAILABLE) {  //events received
 8001b5a:	0752      	lsls	r2, r2, #29
 8001b5c:	d40f      	bmi.n	8001b7e <Uart1EVT_Thread.lto_priv.24+0x8e>
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8001b5e:	69b5      	ldr	r5, [r6, #24]
 8001b60:	f389 8811 	msr	BASEPRI, r9
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8001b64:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8001b66:	07d1      	lsls	r1, r2, #31
 8001b68:	d4ea      	bmi.n	8001b40 <Uart1EVT_Thread.lto_priv.24+0x50>
    ctp->p_u.ewmask = events;
 8001b6a:	f8c5 a020 	str.w	sl, [r5, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8001b6e:	200a      	movs	r0, #10
 8001b70:	f7ff fa4e 	bl	8001010 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8001b74:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001b76:	f002 0101 	and.w	r1, r2, #1
 8001b7a:	43c9      	mvns	r1, r1
 8001b7c:	e7e2      	b.n	8001b44 <Uart1EVT_Thread.lto_priv.24+0x54>
 8001b7e:	465d      	mov	r5, fp
 8001b80:	469a      	mov	sl, r3
      msg_t charbuf;
      do {
        charbuf = chnGetTimeout(WIFI_SERIAL, TIME_IMMEDIATE);
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	4867      	ldr	r0, [pc, #412]	; (8001d24 <Uart1EVT_Thread.lto_priv.24+0x234>)
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4798      	blx	r3
 8001b8c:	4681      	mov	r9, r0
        chThdSleepMicroseconds(100);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f7ff fe86 	bl	80018a0 <chThdSleep>
        if (charbuf != Q_TIMEOUT) {
 8001b94:	f1b9 3fff 	cmp.w	r9, #4294967295
 8001b98:	d007      	beq.n	8001baa <Uart1EVT_Thread.lto_priv.24+0xba>
          if (DEBUG)
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%c", (char)charbuf);
          if (pos < BUFF_SIZE) {
 8001b9a:	f5ba 6f80 	cmp.w	sl, #1024	; 0x400
 8001b9e:	daf0      	bge.n	8001b82 <Uart1EVT_Thread.lto_priv.24+0x92>
            received[pos] = (char)charbuf;
 8001ba0:	f805 900a 	strb.w	r9, [r5, sl]
            pos++;
 8001ba4:	f10a 0a01 	add.w	sl, sl, #1
 8001ba8:	e7eb      	b.n	8001b82 <Uart1EVT_Thread.lto_priv.24+0x92>
          }
        }
      } while (charbuf != Q_TIMEOUT );
      received[pos] = '\0';
 8001baa:	2300      	movs	r3, #0
 8001bac:	f805 300a 	strb.w	r3, [r5, sl]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <Uart1EVT_Thread.lto_priv.24+0x238>)
}
char* StrStr(const char *str, const char *target) {
  if (!*target) return str;
  char *p1 = (char*)str, *p2 = (char*)target;
  char *p1Adv = (char*)str;
  while (*++p2)
 8001bb4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    p1Adv++;
 8001bb8:	4694      	mov	ip, r2
 8001bba:	3201      	adds	r2, #1
}
char* StrStr(const char *str, const char *target) {
  if (!*target) return str;
  char *p1 = (char*)str, *p2 = (char*)target;
  char *p1Adv = (char*)str;
  while (*++p2)
 8001bbc:	2900      	cmp	r1, #0
 8001bbe:	d1f9      	bne.n	8001bb4 <Uart1EVT_Thread.lto_priv.24+0xc4>
    p1Adv++;
  while (*p1Adv) {
 8001bc0:	f89c 3000 	ldrb.w	r3, [ip]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0b5      	beq.n	8001b34 <Uart1EVT_Thread.lto_priv.24+0x44>
 8001bc8:	462b      	mov	r3, r5
    char *p1Begin = p1;
    p2 = (char*)target;
    while (*p1 && *p2 && *p1 == *p2) {
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	2a2b      	cmp	r2, #43	; 0x2b
 8001bce:	d116      	bne.n	8001bfe <Uart1EVT_Thread.lto_priv.24+0x10e>
 8001bd0:	4a55      	ldr	r2, [pc, #340]	; (8001d28 <Uart1EVT_Thread.lto_priv.24+0x238>)
 8001bd2:	469e      	mov	lr, r3
 8001bd4:	e004      	b.n	8001be0 <Uart1EVT_Thread.lto_priv.24+0xf0>
 8001bd6:	f812 0b01 	ldrb.w	r0, [r2], #1
 8001bda:	b1a0      	cbz	r0, 8001c06 <Uart1EVT_Thread.lto_priv.24+0x116>
 8001bdc:	4281      	cmp	r1, r0
 8001bde:	d106      	bne.n	8001bee <Uart1EVT_Thread.lto_priv.24+0xfe>
 8001be0:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
      p1++;
      p2++;
 8001be4:	4610      	mov	r0, r2
  while (*++p2)
    p1Adv++;
  while (*p1Adv) {
    char *p1Begin = p1;
    p2 = (char*)target;
    while (*p1 && *p2 && *p1 == *p2) {
 8001be6:	2900      	cmp	r1, #0
 8001be8:	d1f5      	bne.n	8001bd6 <Uart1EVT_Thread.lto_priv.24+0xe6>
      p1++;
      p2++;
    }
    if (!*p2)
 8001bea:	7802      	ldrb	r2, [r0, #0]
 8001bec:	b15a      	cbz	r2, 8001c06 <Uart1EVT_Thread.lto_priv.24+0x116>
  if (!*target) return str;
  char *p1 = (char*)str, *p2 = (char*)target;
  char *p1Adv = (char*)str;
  while (*++p2)
    p1Adv++;
  while (*p1Adv) {
 8001bee:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	2a00      	cmp	r2, #0
 8001bf6:	d09d      	beq.n	8001b34 <Uart1EVT_Thread.lto_priv.24+0x44>
    char *p1Begin = p1;
    p2 = (char*)target;
    while (*p1 && *p2 && *p1 == *p2) {
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	2a2b      	cmp	r2, #43	; 0x2b
 8001bfc:	d0e8      	beq.n	8001bd0 <Uart1EVT_Thread.lto_priv.24+0xe0>
 8001bfe:	484b      	ldr	r0, [pc, #300]	; (8001d2c <Uart1EVT_Thread.lto_priv.24+0x23c>)
      p1++;
      p2++;
    }
    if (!*p2)
 8001c00:	7802      	ldrb	r2, [r0, #0]
 8001c02:	2a00      	cmp	r2, #0
 8001c04:	d1f3      	bne.n	8001bee <Uart1EVT_Thread.lto_priv.24+0xfe>
      if (StrStr(received, "+IPD") != NULL){
        if (DEBUG)
          chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Received http request");
        clientID[0] = clearRequest[5];
        clientID[1] = '\0';
        request = clearRequest[16]; //it is c for command (c=M0...)
 8001c06:	4a4a      	ldr	r2, [pc, #296]	; (8001d30 <Uart1EVT_Thread.lto_priv.24+0x240>)
 8001c08:	7c18      	ldrb	r0, [r3, #16]
 8001c0a:	7010      	strb	r0, [r2, #0]
      /***********DO SOMETHING WITH RECEIVED MESSAGE************/
      char* clearRequest = StrStr(received, "+IPD"); //HTTP REQUEST
      if (StrStr(received, "+IPD") != NULL){
        if (DEBUG)
          chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Received http request");
        clientID[0] = clearRequest[5];
 8001c0c:	4a49      	ldr	r2, [pc, #292]	; (8001d34 <Uart1EVT_Thread.lto_priv.24+0x244>)
 8001c0e:	7959      	ldrb	r1, [r3, #5]
 8001c10:	7011      	strb	r1, [r2, #0]
        clientID[1] = '\0';
 8001c12:	2100      	movs	r1, #0
        request = clearRequest[16]; //it is c for command (c=M0...)
        command[0] = clearRequest[18];
 8001c14:	f893 9012 	ldrb.w	r9, [r3, #18]
        command[1] = clearRequest[19];
 8001c18:	f893 b013 	ldrb.w	fp, [r3, #19]
        command[2] = clearRequest[20];
 8001c1c:	f893 a014 	ldrb.w	sl, [r3, #20]
        command[3] = clearRequest[21];
 8001c20:	f893 c015 	ldrb.w	ip, [r3, #21]
        command[4] = clearRequest[22];
 8001c24:	f893 e016 	ldrb.w	lr, [r3, #22]
      char* clearRequest = StrStr(received, "+IPD"); //HTTP REQUEST
      if (StrStr(received, "+IPD") != NULL){
        if (DEBUG)
          chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Received http request");
        clientID[0] = clearRequest[5];
        clientID[1] = '\0';
 8001c28:	7051      	strb	r1, [r2, #1]
        command[3] = clearRequest[21];
        command[4] = clearRequest[22];
        command[5] = clearRequest[23];
        command[6] = clearRequest[24];
        command[7] = clearRequest[25];
        command[8] = '\0';
 8001c2a:	f888 1008 	strb.w	r1, [r8, #8]
        command[1] = clearRequest[19];
        command[2] = clearRequest[20];
        command[3] = clearRequest[21];
        command[4] = clearRequest[22];
        command[5] = clearRequest[23];
        command[6] = clearRequest[24];
 8001c2e:	7e1a      	ldrb	r2, [r3, #24]
        command[0] = clearRequest[18];
        command[1] = clearRequest[19];
        command[2] = clearRequest[20];
        command[3] = clearRequest[21];
        command[4] = clearRequest[22];
        command[5] = clearRequest[23];
 8001c30:	7dd9      	ldrb	r1, [r3, #23]
        command[6] = clearRequest[24];
        command[7] = clearRequest[25];
 8001c32:	7e5b      	ldrb	r3, [r3, #25]
        if (DEBUG)
          chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Received http request");
        clientID[0] = clearRequest[5];
        clientID[1] = '\0';
        request = clearRequest[16]; //it is c for command (c=M0...)
        command[0] = clearRequest[18];
 8001c34:	f888 9000 	strb.w	r9, [r8]
          chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Client id=");
          chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s\n", clientID);
          chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Command=");
          chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s\n", command);
        }
        if (request == 'c')
 8001c38:	2863      	cmp	r0, #99	; 0x63
          chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Received http request");
        clientID[0] = clearRequest[5];
        clientID[1] = '\0';
        request = clearRequest[16]; //it is c for command (c=M0...)
        command[0] = clearRequest[18];
        command[1] = clearRequest[19];
 8001c3a:	f888 b001 	strb.w	fp, [r8, #1]
        command[2] = clearRequest[20];
 8001c3e:	f888 a002 	strb.w	sl, [r8, #2]
        command[3] = clearRequest[21];
 8001c42:	f888 c003 	strb.w	ip, [r8, #3]
        command[4] = clearRequest[22];
 8001c46:	f888 e004 	strb.w	lr, [r8, #4]
        command[5] = clearRequest[23];
 8001c4a:	f888 1005 	strb.w	r1, [r8, #5]
        command[6] = clearRequest[24];
 8001c4e:	f888 2006 	strb.w	r2, [r8, #6]
        command[7] = clearRequest[25];
 8001c52:	f888 3007 	strb.w	r3, [r8, #7]
          chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Client id=");
          chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s\n", clientID);
          chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Command=");
          chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s\n", command);
        }
        if (request == 'c')
 8001c56:	d002      	beq.n	8001c5e <Uart1EVT_Thread.lto_priv.24+0x16e>
          control_motor(command);
        printWebPage();
 8001c58:	f7ff fe92 	bl	8001980 <printWebPage>
 8001c5c:	e76a      	b.n	8001b34 <Uart1EVT_Thread.lto_priv.24+0x44>
  right[1] = command[6];
  right[2] = command[7];

  int le, ri;

  le = atoi(left);
 8001c5e:	f107 000c 	add.w	r0, r7, #12
  char left[3];
  char right[3];
  int toret[2];
  char type = command[0];

  left[0] = command[2];
 8001c62:	f887 a00c 	strb.w	sl, [r7, #12]
  left[1] = command[3];
 8001c66:	f887 c00d 	strb.w	ip, [r7, #13]
  left[2] = command[4];
 8001c6a:	f887 e00e 	strb.w	lr, [r7, #14]

  right[0] = command[5];
 8001c6e:	7439      	strb	r1, [r7, #16]
  right[1] = command[6];
 8001c70:	747a      	strb	r2, [r7, #17]
  right[2] = command[7];
 8001c72:	74bb      	strb	r3, [r7, #18]

  int le, ri;

  le = atoi(left);
 8001c74:	f000 ff3c 	bl	8002af0 <atoi>
 8001c78:	4683      	mov	fp, r0
  ri = atoi(right);
 8001c7a:	f107 0010 	add.w	r0, r7, #16
 8001c7e:	f000 ff37 	bl	8002af0 <atoi>
    vel--;
    chThdSleepMilliseconds(10);
  }
  /*******************END DEMO************************/

  if (velocity[0] >= 128) {
 8001c82:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
  right[2] = command[7];

  int le, ri;

  le = atoi(left);
  ri = atoi(right);
 8001c86:	4682      	mov	sl, r0
    vel--;
    chThdSleepMilliseconds(10);
  }
  /*******************END DEMO************************/

  if (velocity[0] >= 128) {
 8001c88:	dd34      	ble.n	8001cf4 <Uart1EVT_Thread.lto_priv.24+0x204>
    velocity[0] = velocity[0] - 128;    //[0-127]
    functioPtrLeftUP = &Sinistra_Avanti_up;
 8001c8a:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <Uart1EVT_Thread.lto_priv.24+0x248>)
 8001c8c:	4a2b      	ldr	r2, [pc, #172]	; (8001d3c <Uart1EVT_Thread.lto_priv.24+0x24c>)
 8001c8e:	601a      	str	r2, [r3, #0]
    functioPtrLeftDOWN = &Sinistra_Avanti_Down;
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <Uart1EVT_Thread.lto_priv.24+0x250>)
 8001c92:	4a2c      	ldr	r2, [pc, #176]	; (8001d44 <Uart1EVT_Thread.lto_priv.24+0x254>)

    pwm1 =  77.95 * velocity[0] + 100;
 8001c94:	f1ab 0080 	sub.w	r0, fp, #128	; 0x80

    pwmEnableChannel(&PWMD1, 0, (pwmcnt_t)pwm1);
  }
  else {    //<128
    functioPtrLeftUP = &Sinistra_Dietro_up;
    functioPtrLeftDOWN = &Sinistra_Dietro_Down;
 8001c98:	601a      	str	r2, [r3, #0]

    pwm1 = 77.95 * velocity[0] + 100;
 8001c9a:	f7fe fc63 	bl	8000564 <__aeabi_i2d>
 8001c9e:	a31e      	add	r3, pc, #120	; (adr r3, 8001d18 <Uart1EVT_Thread.lto_priv.24+0x228>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fcc4 	bl	8000630 <__aeabi_dmul>
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <Uart1EVT_Thread.lto_priv.24+0x258>)
 8001cac:	f7fe fb0e 	bl	80002cc <__adddf3>
 8001cb0:	f7fe fed6 	bl	8000a60 <__aeabi_d2iz>
 8001cb4:	4601      	mov	r1, r0

    pwmEnableChannel(&PWMD1, 0, (pwmcnt_t)pwm1);
 8001cb6:	4825      	ldr	r0, [pc, #148]	; (8001d4c <Uart1EVT_Thread.lto_priv.24+0x25c>)
 8001cb8:	f000 fb92 	bl	80023e0 <pwmEnableChannel.constprop.9>
  }

  if (velocity[1] >= 128) {
 8001cbc:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
 8001cc0:	dc1f      	bgt.n	8001d02 <Uart1EVT_Thread.lto_priv.24+0x212>
    pwm2 =  77.95 * velocity[1] + 100;

    pwmEnableChannel(&PWMD3, 0, (pwmcnt_t)pwm2);
  }
  else {
    functioPtrRightUP = &Destra_Dietro_up;
 8001cc2:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <Uart1EVT_Thread.lto_priv.24+0x260>)
 8001cc4:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <Uart1EVT_Thread.lto_priv.24+0x264>)
 8001cc6:	601a      	str	r2, [r3, #0]
    functioPtrRightDOWN = &Destra_Dietro_Down;
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <Uart1EVT_Thread.lto_priv.24+0x268>)
 8001cca:	4a24      	ldr	r2, [pc, #144]	; (8001d5c <Uart1EVT_Thread.lto_priv.24+0x26c>)

    pwm2 = 77.95 * velocity[1] + 100;
 8001ccc:	4650      	mov	r0, sl

    pwmEnableChannel(&PWMD3, 0, (pwmcnt_t)pwm2);
  }
  else {
    functioPtrRightUP = &Destra_Dietro_up;
    functioPtrRightDOWN = &Destra_Dietro_Down;
 8001cce:	601a      	str	r2, [r3, #0]

    pwm2 = 77.95 * velocity[1] + 100;
 8001cd0:	f7fe fc48 	bl	8000564 <__aeabi_i2d>
 8001cd4:	a310      	add	r3, pc, #64	; (adr r3, 8001d18 <Uart1EVT_Thread.lto_priv.24+0x228>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe fca9 	bl	8000630 <__aeabi_dmul>
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <Uart1EVT_Thread.lto_priv.24+0x258>)
 8001ce2:	f7fe faf3 	bl	80002cc <__adddf3>
 8001ce6:	f7fe febb 	bl	8000a60 <__aeabi_d2iz>
 8001cea:	4601      	mov	r1, r0

    pwmEnableChannel(&PWMD3, 0, (pwmcnt_t)pwm2);
 8001cec:	481c      	ldr	r0, [pc, #112]	; (8001d60 <Uart1EVT_Thread.lto_priv.24+0x270>)
 8001cee:	f000 fb77 	bl	80023e0 <pwmEnableChannel.constprop.9>
 8001cf2:	e7b1      	b.n	8001c58 <Uart1EVT_Thread.lto_priv.24+0x168>
    pwm1 =  77.95 * velocity[0] + 100;

    pwmEnableChannel(&PWMD1, 0, (pwmcnt_t)pwm1);
  }
  else {    //<128
    functioPtrLeftUP = &Sinistra_Dietro_up;
 8001cf4:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <Uart1EVT_Thread.lto_priv.24+0x248>)
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <Uart1EVT_Thread.lto_priv.24+0x274>)
 8001cf8:	601a      	str	r2, [r3, #0]
    functioPtrLeftDOWN = &Sinistra_Dietro_Down;

    pwm1 = 77.95 * velocity[0] + 100;
 8001cfa:	4658      	mov	r0, fp

    pwmEnableChannel(&PWMD1, 0, (pwmcnt_t)pwm1);
  }
  else {    //<128
    functioPtrLeftUP = &Sinistra_Dietro_up;
    functioPtrLeftDOWN = &Sinistra_Dietro_Down;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <Uart1EVT_Thread.lto_priv.24+0x250>)
 8001cfe:	4a1a      	ldr	r2, [pc, #104]	; (8001d68 <Uart1EVT_Thread.lto_priv.24+0x278>)
 8001d00:	e7ca      	b.n	8001c98 <Uart1EVT_Thread.lto_priv.24+0x1a8>
    pwmEnableChannel(&PWMD1, 0, (pwmcnt_t)pwm1);
  }

  if (velocity[1] >= 128) {
    velocity[1] = velocity[1] - 128;    //[0-127]
    functioPtrRightUP = &Destra_Avanti_up;
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <Uart1EVT_Thread.lto_priv.24+0x260>)
 8001d04:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <Uart1EVT_Thread.lto_priv.24+0x27c>)
 8001d06:	601a      	str	r2, [r3, #0]
    functioPtrRightDOWN = &Destra_Avanti_Down;

    pwm2 =  77.95 * velocity[1] + 100;
 8001d08:	f1aa 0080 	sub.w	r0, sl, #128	; 0x80
  }

  if (velocity[1] >= 128) {
    velocity[1] = velocity[1] - 128;    //[0-127]
    functioPtrRightUP = &Destra_Avanti_up;
    functioPtrRightDOWN = &Destra_Avanti_Down;
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <Uart1EVT_Thread.lto_priv.24+0x268>)
 8001d0e:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <Uart1EVT_Thread.lto_priv.24+0x280>)
 8001d10:	e7dd      	b.n	8001cce <Uart1EVT_Thread.lto_priv.24+0x1de>
 8001d12:	bf00      	nop
 8001d14:	f3af 8000 	nop.w
 8001d18:	cccccccd 	.word	0xcccccccd
 8001d1c:	40537ccc 	.word	0x40537ccc
 8001d20:	2000b2d0 	.word	0x2000b2d0
 8001d24:	20001590 	.word	0x20001590
 8001d28:	08002f25 	.word	0x08002f25
 8001d2c:	08002f24 	.word	0x08002f24
 8001d30:	20000cc5 	.word	0x20000cc5
 8001d34:	20000cb8 	.word	0x20000cb8
 8001d38:	2000b440 	.word	0x2000b440
 8001d3c:	08001e81 	.word	0x08001e81
 8001d40:	2000b280 	.word	0x2000b280
 8001d44:	08001eb1 	.word	0x08001eb1
 8001d48:	40590000 	.word	0x40590000
 8001d4c:	2000b28c 	.word	0x2000b28c
 8001d50:	2000b284 	.word	0x2000b284
 8001d54:	08001fb1 	.word	0x08001fb1
 8001d58:	2000b288 	.word	0x2000b288
 8001d5c:	08001f81 	.word	0x08001f81
 8001d60:	2000b2ac 	.word	0x2000b2ac
 8001d64:	08002011 	.word	0x08002011
 8001d68:	08001fe1 	.word	0x08001fe1
 8001d6c:	08001ee1 	.word	0x08001ee1
 8001d70:	08001f11 	.word	0x08001f11
 8001d74:	20000cbc 	.word	0x20000cbc
	...

08001d80 <chTMStartMeasurementX.constprop.19>:
 8001d80:	4b01      	ldr	r3, [pc, #4]	; (8001d88 <chTMStartMeasurementX.constprop.19+0x8>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8001d84:	6083      	str	r3, [r0, #8]
 8001d86:	4770      	bx	lr
 8001d88:	e0001000 	.word	0xe0001000
 8001d8c:	00000000 	.word	0x00000000

08001d90 <sdObjectInit.constprop.12>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8001d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  sdp->vmt = &vmt;
 8001d94:	4605      	mov	r5, r0
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <sdObjectInit.constprop.12+0x64>)
 8001d98:	f845 3b04 	str.w	r3, [r5], #4
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001d9c:	f500 449c 	add.w	r4, r0, #19968	; 0x4e00
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8001da0:	f500 531d 	add.w	r3, r0, #10048	; 0x2740
 8001da4:	3324      	adds	r3, #36	; 0x24
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8001da6:	f100 0254 	add.w	r2, r0, #84	; 0x54
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001daa:	f04f 0e00 	mov.w	lr, #0
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
 8001dae:	f100 070c 	add.w	r7, r0, #12
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
 8001db2:	f100 0630 	add.w	r6, r0, #48	; 0x30
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8001db6:	f04f 0801 	mov.w	r8, #1
  oqp->q_counter = size;
 8001dba:	f242 7c10 	movw	ip, #10000	; 0x2710
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001dbe:	3474      	adds	r4, #116	; 0x74
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001dc0:	f8c0 e014 	str.w	lr, [r0, #20]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8001dc4:	6045      	str	r5, [r0, #4]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8001dc6:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8001dc8:	64c1      	str	r1, [r0, #76]	; 0x4c
  oqp->q_link    = link;
 8001dca:	6500      	str	r0, [r0, #80]	; 0x50
 8001dcc:	f880 8008 	strb.w	r8, [r0, #8]
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8001dd0:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001dd4:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001dd8:	6404      	str	r4, [r0, #64]	; 0x40
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8001dda:	61c3      	str	r3, [r0, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8001ddc:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8001dde:	6483      	str	r3, [r0, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8001de0:	6443      	str	r3, [r0, #68]	; 0x44
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001de2:	6182      	str	r2, [r0, #24]
  iqp->q_rdptr   = bp;
 8001de4:	6242      	str	r2, [r0, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8001de6:	6202      	str	r2, [r0, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001de8:	60c7      	str	r7, [r0, #12]
  tqp->p_prev = (thread_t *)tqp;
 8001dea:	6107      	str	r7, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001dec:	6306      	str	r6, [r0, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8001dee:	6346      	str	r6, [r0, #52]	; 0x34
 8001df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001df4:	08002fd0 	.word	0x08002fd0
	...

08001e00 <pwmEnableChannelNotification.constprop.7>:
 8001e00:	2320      	movs	r3, #32
 8001e02:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void pwm_lld_enable_channel_notification(PWMDriver *pwmp,
                                         pwmchannel_t channel) {
  uint32_t dier = pwmp->tim->DIER;
 8001e06:	6982      	ldr	r2, [r0, #24]
 8001e08:	68d3      	ldr	r3, [r2, #12]
  osalDbgAssert(channel < 4, "callback not supported");
#endif

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & (2 << channel)) == 0) {
 8001e0a:	0799      	lsls	r1, r3, #30
 8001e0c:	d405      	bmi.n	8001e1a <pwmEnableChannelNotification.constprop.7+0x1a>
    pwmp->tim->DIER = dier | (2 << channel);
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
    pwmp->tim->SR   = ~(2 << channel);
 8001e12:	f06f 0102 	mvn.w	r1, #2
#endif

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & (2 << channel)) == 0) {
    pwmp->tim->DIER = dier | (2 << channel);
 8001e16:	60d3      	str	r3, [r2, #12]
    pwmp->tim->SR   = ~(2 << channel);
 8001e18:	6111      	str	r1, [r2, #16]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f383 8811 	msr	BASEPRI, r3
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
	...

08001e30 <long_to_string_with_divisor.constprop.6>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8001e30:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8001e32:	f100 070b 	add.w	r7, r0, #11
 8001e36:	463c      	mov	r4, r7
 8001e38:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8001e3a:	fbb1 f6f2 	udiv	r6, r1, r2
 8001e3e:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8001e42:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8001e46:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8001e48:	bfc8      	it	gt
 8001e4a:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 8001e54:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 8001e58:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8001e5a:	2d00      	cmp	r5, #0
 8001e5c:	d1ed      	bne.n	8001e3a <long_to_string_with_divisor.constprop.6+0xa>

  i = (int)(p + MAX_FILLER - q);
 8001e5e:	1b3a      	subs	r2, r7, r4
 8001e60:	4402      	add	r2, r0
 8001e62:	e001      	b.n	8001e68 <long_to_string_with_divisor.constprop.6+0x38>
 8001e64:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8001e68:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8001e6c:	4290      	cmp	r0, r2
 8001e6e:	d1f9      	bne.n	8001e64 <long_to_string_with_divisor.constprop.6+0x34>

  return p;
}
 8001e70:	bcf0      	pop	{r4, r5, r6, r7}
 8001e72:	4770      	bx	lr
	...

08001e80 <Sinistra_Avanti_up.lto_priv.36>:
  stm32_gpio_t * type4;
  unsigned int port4;
} mapping;

static void Sinistra_Avanti_up() {
  palClearPad(mapping.type2, mapping.port2);
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <Sinistra_Avanti_up.lto_priv.36+0x24>)

  stm32_gpio_t * type4;
  unsigned int port4;
} mapping;

static void Sinistra_Avanti_up() {
 8001e82:	b410      	push	{r4}
  palClearPad(mapping.type2, mapping.port2);
 8001e84:	68da      	ldr	r2, [r3, #12]
  palSetPad(mapping.type1, mapping.port1);
 8001e86:	685c      	ldr	r4, [r3, #4]
  stm32_gpio_t * type4;
  unsigned int port4;
} mapping;

static void Sinistra_Avanti_up() {
  palClearPad(mapping.type2, mapping.port2);
 8001e88:	6898      	ldr	r0, [r3, #8]
  palSetPad(mapping.type1, mapping.port1);
 8001e8a:	6819      	ldr	r1, [r3, #0]
  stm32_gpio_t * type4;
  unsigned int port4;
} mapping;

static void Sinistra_Avanti_up() {
  palClearPad(mapping.type2, mapping.port2);
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	fa03 f202 	lsl.w	r2, r3, r2
  palSetPad(mapping.type1, mapping.port1);
 8001e92:	40a3      	lsls	r3, r4
  stm32_gpio_t * type4;
  unsigned int port4;
} mapping;

static void Sinistra_Avanti_up() {
  palClearPad(mapping.type2, mapping.port2);
 8001e94:	b292      	uxth	r2, r2
  palSetPad(mapping.type1, mapping.port1);
 8001e96:	b29b      	uxth	r3, r3
  stm32_gpio_t * type4;
  unsigned int port4;
} mapping;

static void Sinistra_Avanti_up() {
  palClearPad(mapping.type2, mapping.port2);
 8001e98:	8342      	strh	r2, [r0, #26]
  palSetPad(mapping.type1, mapping.port1);
 8001e9a:	830b      	strh	r3, [r1, #24]
}
 8001e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	2000b444 	.word	0x2000b444
	...

08001eb0 <Sinistra_Avanti_Down.lto_priv.37>:

static void Sinistra_Avanti_Down() {
  palClearPad(mapping.type2, mapping.port2);
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <Sinistra_Avanti_Down.lto_priv.37+0x24>)
static void Sinistra_Avanti_up() {
  palClearPad(mapping.type2, mapping.port2);
  palSetPad(mapping.type1, mapping.port1);
}

static void Sinistra_Avanti_Down() {
 8001eb2:	b410      	push	{r4}
  palClearPad(mapping.type2, mapping.port2);
 8001eb4:	68da      	ldr	r2, [r3, #12]
  palClearPad(mapping.type1, mapping.port1);
 8001eb6:	685c      	ldr	r4, [r3, #4]
  palClearPad(mapping.type2, mapping.port2);
  palSetPad(mapping.type1, mapping.port1);
}

static void Sinistra_Avanti_Down() {
  palClearPad(mapping.type2, mapping.port2);
 8001eb8:	6898      	ldr	r0, [r3, #8]
  palClearPad(mapping.type1, mapping.port1);
 8001eba:	6819      	ldr	r1, [r3, #0]
  palClearPad(mapping.type2, mapping.port2);
  palSetPad(mapping.type1, mapping.port1);
}

static void Sinistra_Avanti_Down() {
  palClearPad(mapping.type2, mapping.port2);
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	fa03 f202 	lsl.w	r2, r3, r2
  palClearPad(mapping.type1, mapping.port1);
 8001ec2:	40a3      	lsls	r3, r4
  palClearPad(mapping.type2, mapping.port2);
  palSetPad(mapping.type1, mapping.port1);
}

static void Sinistra_Avanti_Down() {
  palClearPad(mapping.type2, mapping.port2);
 8001ec4:	b292      	uxth	r2, r2
  palClearPad(mapping.type1, mapping.port1);
 8001ec6:	b29b      	uxth	r3, r3
  palClearPad(mapping.type2, mapping.port2);
  palSetPad(mapping.type1, mapping.port1);
}

static void Sinistra_Avanti_Down() {
  palClearPad(mapping.type2, mapping.port2);
 8001ec8:	8342      	strh	r2, [r0, #26]
  palClearPad(mapping.type1, mapping.port1);
 8001eca:	834b      	strh	r3, [r1, #26]
}
 8001ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	2000b444 	.word	0x2000b444
	...

08001ee0 <Destra_Avanti_up.lto_priv.40>:
  palClearPad(mapping.type1, mapping.port1);
  palClearPad(mapping.type2, mapping.port2);
}

static void Destra_Avanti_up() {
  palSetPad(mapping.type3, mapping.port3);
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <Destra_Avanti_up.lto_priv.40+0x24>)
static void Sinistra_Dietro_Down() {
  palClearPad(mapping.type1, mapping.port1);
  palClearPad(mapping.type2, mapping.port2);
}

static void Destra_Avanti_up() {
 8001ee2:	b410      	push	{r4}
  palSetPad(mapping.type3, mapping.port3);
 8001ee4:	695a      	ldr	r2, [r3, #20]
  palClearPad(mapping.type4, mapping.port4);
 8001ee6:	69dc      	ldr	r4, [r3, #28]
  palClearPad(mapping.type1, mapping.port1);
  palClearPad(mapping.type2, mapping.port2);
}

static void Destra_Avanti_up() {
  palSetPad(mapping.type3, mapping.port3);
 8001ee8:	6918      	ldr	r0, [r3, #16]
  palClearPad(mapping.type4, mapping.port4);
 8001eea:	6999      	ldr	r1, [r3, #24]
  palClearPad(mapping.type1, mapping.port1);
  palClearPad(mapping.type2, mapping.port2);
}

static void Destra_Avanti_up() {
  palSetPad(mapping.type3, mapping.port3);
 8001eec:	2301      	movs	r3, #1
 8001eee:	fa03 f202 	lsl.w	r2, r3, r2
  palClearPad(mapping.type4, mapping.port4);
 8001ef2:	40a3      	lsls	r3, r4
  palClearPad(mapping.type1, mapping.port1);
  palClearPad(mapping.type2, mapping.port2);
}

static void Destra_Avanti_up() {
  palSetPad(mapping.type3, mapping.port3);
 8001ef4:	b292      	uxth	r2, r2
  palClearPad(mapping.type4, mapping.port4);
 8001ef6:	b29b      	uxth	r3, r3
  palClearPad(mapping.type1, mapping.port1);
  palClearPad(mapping.type2, mapping.port2);
}

static void Destra_Avanti_up() {
  palSetPad(mapping.type3, mapping.port3);
 8001ef8:	8302      	strh	r2, [r0, #24]
  palClearPad(mapping.type4, mapping.port4);
 8001efa:	834b      	strh	r3, [r1, #26]
}
 8001efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	2000b444 	.word	0x2000b444
	...

08001f10 <Destra_Avanti_Down.lto_priv.41>:

static void Destra_Avanti_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <Destra_Avanti_Down.lto_priv.41+0x24>)
static void Destra_Avanti_up() {
  palSetPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Avanti_Down() {
 8001f12:	b410      	push	{r4}
  palClearPad(mapping.type3, mapping.port3);
 8001f14:	695a      	ldr	r2, [r3, #20]
  palClearPad(mapping.type4, mapping.port4);
 8001f16:	69dc      	ldr	r4, [r3, #28]
  palSetPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Avanti_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001f18:	6918      	ldr	r0, [r3, #16]
  palClearPad(mapping.type4, mapping.port4);
 8001f1a:	6999      	ldr	r1, [r3, #24]
  palSetPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Avanti_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	fa03 f202 	lsl.w	r2, r3, r2
  palClearPad(mapping.type4, mapping.port4);
 8001f22:	40a3      	lsls	r3, r4
  palSetPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Avanti_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001f24:	b292      	uxth	r2, r2
  palClearPad(mapping.type4, mapping.port4);
 8001f26:	b29b      	uxth	r3, r3
  palSetPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Avanti_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001f28:	8342      	strh	r2, [r0, #26]
  palClearPad(mapping.type4, mapping.port4);
 8001f2a:	834b      	strh	r3, [r1, #26]
}
 8001f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	2000b444 	.word	0x2000b444
	...

08001f40 <pwm2c1cb>:
}

static void pwm2c1cb(PWMDriver *pwmp) {

  (void)pwmp;
  (*functioPtrRightUP)();
 8001f40:	4b01      	ldr	r3, [pc, #4]	; (8001f48 <pwm2c1cb+0x8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4718      	bx	r3
 8001f46:	bf00      	nop
 8001f48:	2000b284 	.word	0x2000b284
 8001f4c:	00000000 	.word	0x00000000

08001f50 <pwm2pcb>:

//pwm callbacks for right engine
static void pwm2pcb(PWMDriver *pwmp) {

  (void)pwmp;
  (*functioPtrRightDOWN)();
 8001f50:	4b01      	ldr	r3, [pc, #4]	; (8001f58 <pwm2pcb+0x8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4718      	bx	r3
 8001f56:	bf00      	nop
 8001f58:	2000b288 	.word	0x2000b288
 8001f5c:	00000000 	.word	0x00000000

08001f60 <pwmc1cb>:
}

static void pwmc1cb(PWMDriver *pwmp) {

  (void)pwmp;
  (*functioPtrLeftUP)();
 8001f60:	4b01      	ldr	r3, [pc, #4]	; (8001f68 <pwmc1cb+0x8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4718      	bx	r3
 8001f66:	bf00      	nop
 8001f68:	2000b440 	.word	0x2000b440
 8001f6c:	00000000 	.word	0x00000000

08001f70 <pwmpcb>:

//pwm callbacks for left engine
static void pwmpcb(PWMDriver *pwmp) {

  (void)pwmp;
  (*functioPtrLeftDOWN)();
 8001f70:	4b01      	ldr	r3, [pc, #4]	; (8001f78 <pwmpcb+0x8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4718      	bx	r3
 8001f76:	bf00      	nop
 8001f78:	2000b280 	.word	0x2000b280
 8001f7c:	00000000 	.word	0x00000000

08001f80 <Destra_Dietro_Down.lto_priv.43>:
  palClearPad(mapping.type3, mapping.port3);
  palSetPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <Destra_Dietro_Down.lto_priv.43+0x24>)
static void Destra_Dietro_up() {
  palClearPad(mapping.type3, mapping.port3);
  palSetPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_Down() {
 8001f82:	b410      	push	{r4}
  palClearPad(mapping.type3, mapping.port3);
 8001f84:	695a      	ldr	r2, [r3, #20]
  palClearPad(mapping.type4, mapping.port4);
 8001f86:	69dc      	ldr	r4, [r3, #28]
  palClearPad(mapping.type3, mapping.port3);
  palSetPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001f88:	6918      	ldr	r0, [r3, #16]
  palClearPad(mapping.type4, mapping.port4);
 8001f8a:	6999      	ldr	r1, [r3, #24]
  palClearPad(mapping.type3, mapping.port3);
  palSetPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	fa03 f202 	lsl.w	r2, r3, r2
  palClearPad(mapping.type4, mapping.port4);
 8001f92:	40a3      	lsls	r3, r4
  palClearPad(mapping.type3, mapping.port3);
  palSetPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001f94:	b292      	uxth	r2, r2
  palClearPad(mapping.type4, mapping.port4);
 8001f96:	b29b      	uxth	r3, r3
  palClearPad(mapping.type3, mapping.port3);
  palSetPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001f98:	8342      	strh	r2, [r0, #26]
  palClearPad(mapping.type4, mapping.port4);
 8001f9a:	834b      	strh	r3, [r1, #26]
}
 8001f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	2000b444 	.word	0x2000b444
	...

08001fb0 <Destra_Dietro_up.lto_priv.42>:
  palClearPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_up() {
  palClearPad(mapping.type3, mapping.port3);
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <Destra_Dietro_up.lto_priv.42+0x24>)
static void Destra_Avanti_Down() {
  palClearPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_up() {
 8001fb2:	b410      	push	{r4}
  palClearPad(mapping.type3, mapping.port3);
 8001fb4:	695a      	ldr	r2, [r3, #20]
  palSetPad(mapping.type4, mapping.port4);
 8001fb6:	69dc      	ldr	r4, [r3, #28]
  palClearPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_up() {
  palClearPad(mapping.type3, mapping.port3);
 8001fb8:	6918      	ldr	r0, [r3, #16]
  palSetPad(mapping.type4, mapping.port4);
 8001fba:	6999      	ldr	r1, [r3, #24]
  palClearPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_up() {
  palClearPad(mapping.type3, mapping.port3);
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	fa03 f202 	lsl.w	r2, r3, r2
  palSetPad(mapping.type4, mapping.port4);
 8001fc2:	40a3      	lsls	r3, r4
  palClearPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_up() {
  palClearPad(mapping.type3, mapping.port3);
 8001fc4:	b292      	uxth	r2, r2
  palSetPad(mapping.type4, mapping.port4);
 8001fc6:	b29b      	uxth	r3, r3
  palClearPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_up() {
  palClearPad(mapping.type3, mapping.port3);
 8001fc8:	8342      	strh	r2, [r0, #26]
  palSetPad(mapping.type4, mapping.port4);
 8001fca:	830b      	strh	r3, [r1, #24]
}
 8001fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	2000b444 	.word	0x2000b444
	...

08001fe0 <Sinistra_Dietro_Down.lto_priv.39>:
  palClearPad(mapping.type1, mapping.port1);
  palSetPad(mapping.type2, mapping.port2);
}

static void Sinistra_Dietro_Down() {
  palClearPad(mapping.type1, mapping.port1);
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <Sinistra_Dietro_Down.lto_priv.39+0x24>)
static void Sinistra_Dietro_up() {
  palClearPad(mapping.type1, mapping.port1);
  palSetPad(mapping.type2, mapping.port2);
}

static void Sinistra_Dietro_Down() {
 8001fe2:	b410      	push	{r4}
  palClearPad(mapping.type1, mapping.port1);
 8001fe4:	685a      	ldr	r2, [r3, #4]
  palClearPad(mapping.type2, mapping.port2);
 8001fe6:	68dc      	ldr	r4, [r3, #12]
  palClearPad(mapping.type1, mapping.port1);
  palSetPad(mapping.type2, mapping.port2);
}

static void Sinistra_Dietro_Down() {
  palClearPad(mapping.type1, mapping.port1);
 8001fe8:	6818      	ldr	r0, [r3, #0]
  palClearPad(mapping.type2, mapping.port2);
 8001fea:	6899      	ldr	r1, [r3, #8]
  palClearPad(mapping.type1, mapping.port1);
  palSetPad(mapping.type2, mapping.port2);
}

static void Sinistra_Dietro_Down() {
  palClearPad(mapping.type1, mapping.port1);
 8001fec:	2301      	movs	r3, #1
 8001fee:	fa03 f202 	lsl.w	r2, r3, r2
  palClearPad(mapping.type2, mapping.port2);
 8001ff2:	40a3      	lsls	r3, r4
  palClearPad(mapping.type1, mapping.port1);
  palSetPad(mapping.type2, mapping.port2);
}

static void Sinistra_Dietro_Down() {
  palClearPad(mapping.type1, mapping.port1);
 8001ff4:	b292      	uxth	r2, r2
  palClearPad(mapping.type2, mapping.port2);
 8001ff6:	b29b      	uxth	r3, r3
  palClearPad(mapping.type1, mapping.port1);
  palSetPad(mapping.type2, mapping.port2);
}

static void Sinistra_Dietro_Down() {
  palClearPad(mapping.type1, mapping.port1);
 8001ff8:	8342      	strh	r2, [r0, #26]
  palClearPad(mapping.type2, mapping.port2);
 8001ffa:	834b      	strh	r3, [r1, #26]
}
 8001ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	2000b444 	.word	0x2000b444
	...

08002010 <Sinistra_Dietro_up.lto_priv.38>:
  palClearPad(mapping.type2, mapping.port2);
  palClearPad(mapping.type1, mapping.port1);
}

static void Sinistra_Dietro_up() {
  palClearPad(mapping.type1, mapping.port1);
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <Sinistra_Dietro_up.lto_priv.38+0x24>)
static void Sinistra_Avanti_Down() {
  palClearPad(mapping.type2, mapping.port2);
  palClearPad(mapping.type1, mapping.port1);
}

static void Sinistra_Dietro_up() {
 8002012:	b410      	push	{r4}
  palClearPad(mapping.type1, mapping.port1);
 8002014:	685a      	ldr	r2, [r3, #4]
  palSetPad(mapping.type2, mapping.port2);
 8002016:	68dc      	ldr	r4, [r3, #12]
  palClearPad(mapping.type2, mapping.port2);
  palClearPad(mapping.type1, mapping.port1);
}

static void Sinistra_Dietro_up() {
  palClearPad(mapping.type1, mapping.port1);
 8002018:	6818      	ldr	r0, [r3, #0]
  palSetPad(mapping.type2, mapping.port2);
 800201a:	6899      	ldr	r1, [r3, #8]
  palClearPad(mapping.type2, mapping.port2);
  palClearPad(mapping.type1, mapping.port1);
}

static void Sinistra_Dietro_up() {
  palClearPad(mapping.type1, mapping.port1);
 800201c:	2301      	movs	r3, #1
 800201e:	fa03 f202 	lsl.w	r2, r3, r2
  palSetPad(mapping.type2, mapping.port2);
 8002022:	40a3      	lsls	r3, r4
  palClearPad(mapping.type2, mapping.port2);
  palClearPad(mapping.type1, mapping.port1);
}

static void Sinistra_Dietro_up() {
  palClearPad(mapping.type1, mapping.port1);
 8002024:	b292      	uxth	r2, r2
  palSetPad(mapping.type2, mapping.port2);
 8002026:	b29b      	uxth	r3, r3
  palClearPad(mapping.type2, mapping.port2);
  palClearPad(mapping.type1, mapping.port1);
}

static void Sinistra_Dietro_up() {
  palClearPad(mapping.type1, mapping.port1);
 8002028:	8342      	strh	r2, [r0, #26]
  palSetPad(mapping.type2, mapping.port2);
 800202a:	830b      	strh	r3, [r1, #24]
}
 800202c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	2000b444 	.word	0x2000b444
	...

08002040 <chSchWakeupS.constprop.23>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <chSchWakeupS.constprop.23+0x54>)
 8002042:	6881      	ldr	r1, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002044:	b470      	push	{r4, r5, r6}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002046:	699d      	ldr	r5, [r3, #24]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002048:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800204a:	68a8      	ldr	r0, [r5, #8]
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800204c:	2200      	movs	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800204e:	4281      	cmp	r1, r0
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8002050:	6222      	str	r2, [r4, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002052:	d80b      	bhi.n	800206c <chSchWakeupS.constprop.23+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8002054:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8002056:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	4291      	cmp	r1, r2
 800205c:	d9fb      	bls.n	8002056 <chSchWakeupS.constprop.23+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8002062:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8002064:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8002066:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8002068:	bc70      	pop	{r4, r5, r6}
 800206a:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800206c:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800206e:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 8002070:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002072:	6891      	ldr	r1, [r2, #8]
 8002074:	4288      	cmp	r0, r1
 8002076:	d9fb      	bls.n	8002070 <chSchWakeupS.constprop.23+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002078:	6850      	ldr	r0, [r2, #4]
 800207a:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800207c:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800207e:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8002080:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8002082:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8002084:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8002086:	4629      	mov	r1, r5
 8002088:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800208a:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800208c:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 800208e:	f7fe b8ff 	b.w	8000290 <_port_switch>
 8002092:	bf00      	nop
 8002094:	2000b2d0 	.word	0x2000b2d0
	...

080020a0 <chprintf.constprop.4>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80020a0:	b40e      	push	{r1, r2, r3}
 80020a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	ad0f      	add	r5, sp, #60	; 0x3c
 80020aa:	f10d 030d 	add.w	r3, sp, #13
 80020ae:	aa03      	add	r2, sp, #12
 80020b0:	f855 ab04 	ldr.w	sl, [r5], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80020b4:	9502      	str	r5, [sp, #8]
 80020b6:	1a9b      	subs	r3, r3, r2
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 80020b8:	f04f 0800 	mov.w	r8, #0
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	f8cd 8000 	str.w	r8, [sp]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80020c2:	f89a 1000 	ldrb.w	r1, [sl]
 80020c6:	f10a 0301 	add.w	r3, sl, #1
    if (c == 0)
 80020ca:	b191      	cbz	r1, 80020f2 <chprintf.constprop.4+0x52>
      return n;
    if (c != '%') {
 80020cc:	2925      	cmp	r1, #37	; 0x25
 80020ce:	d018      	beq.n	8002102 <chprintf.constprop.4+0x62>
      streamPut(chp, (uint8_t)c);
 80020d0:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 80023d0 <chprintf.constprop.4+0x330>
      n++;
 80020d4:	9a00      	ldr	r2, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 80020d6:	f8d8 0000 	ldr.w	r0, [r8]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80020da:	469a      	mov	sl, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 80020dc:	6884      	ldr	r4, [r0, #8]
      n++;
 80020de:	3201      	adds	r2, #1
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 80020e0:	4640      	mov	r0, r8
      n++;
 80020e2:	9200      	str	r2, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 80020e4:	47a0      	blx	r4
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80020e6:	f89a 1000 	ldrb.w	r1, [sl]
 80020ea:	f10a 0301 	add.w	r3, sl, #1
    if (c == 0)
 80020ee:	2900      	cmp	r1, #0
 80020f0:	d1ec      	bne.n	80020cc <chprintf.constprop.4+0x2c>
 80020f2:	f8dd 8000 	ldr.w	r8, [sp]
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80020f6:	4640      	mov	r0, r8
 80020f8:	b006      	add	sp, #24
 80020fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020fe:	b003      	add	sp, #12
 8002100:	4770      	bx	lr
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8002102:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8002106:	2a2d      	cmp	r2, #45	; 0x2d
 8002108:	bf03      	ittte	eq
 800210a:	f89a 2002 	ldrbeq.w	r2, [sl, #2]
      fmt++;
 800210e:	f10a 0302 	addeq.w	r3, sl, #2
      left_align = TRUE;
 8002112:	2701      	moveq	r7, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8002114:	2700      	movne	r7, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8002116:	2a30      	cmp	r2, #48	; 0x30
 8002118:	bf03      	ittte	eq
 800211a:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 800211c:	3301      	addeq	r3, #1
      filler = '0';
 800211e:	2430      	moveq	r4, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8002120:	2420      	movne	r4, #32
 8002122:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8002124:	2600      	movs	r6, #0
 8002126:	e006      	b.n	8002136 <chprintf.constprop.4+0x96>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8002128:	782b      	ldrb	r3, [r5, #0]
 800212a:	3504      	adds	r5, #4
 800212c:	f89a 2000 	ldrb.w	r2, [sl]
      else
        break;
      width = width * 10 + c;
 8002130:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8002134:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8002136:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 800213e:	468a      	mov	sl, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8002140:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8002144:	d9f2      	bls.n	800212c <chprintf.constprop.4+0x8c>
        c -= '0';
      else if (c == '*')
 8002146:	2a2a      	cmp	r2, #42	; 0x2a
 8002148:	d0ee      	beq.n	8002128 <chprintf.constprop.4+0x88>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 800214a:	2a2e      	cmp	r2, #46	; 0x2e
 800214c:	f04f 0100 	mov.w	r1, #0
 8002150:	d043      	beq.n	80021da <chprintf.constprop.4+0x13a>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8002152:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8002156:	2b4c      	cmp	r3, #76	; 0x4c
 8002158:	d04e      	beq.n	80021f8 <chprintf.constprop.4+0x158>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800215a:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 800215e:	2834      	cmp	r0, #52	; 0x34
 8002160:	f200 8104 	bhi.w	800236c <chprintf.constprop.4+0x2cc>
 8002164:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002168:	010200f7 	.word	0x010200f7
 800216c:	01020102 	.word	0x01020102
 8002170:	00f70102 	.word	0x00f70102
 8002174:	01020102 	.word	0x01020102
 8002178:	01020102 	.word	0x01020102
 800217c:	00f50102 	.word	0x00f50102
 8002180:	01020102 	.word	0x01020102
 8002184:	01020102 	.word	0x01020102
 8002188:	00e90102 	.word	0x00e90102
 800218c:	01020102 	.word	0x01020102
 8002190:	010200ff 	.word	0x010200ff
 8002194:	01020102 	.word	0x01020102
 8002198:	01020102 	.word	0x01020102
 800219c:	01020102 	.word	0x01020102
 80021a0:	01020102 	.word	0x01020102
 80021a4:	00be0102 	.word	0x00be0102
 80021a8:	010200f7 	.word	0x010200f7
 80021ac:	01020102 	.word	0x01020102
 80021b0:	00f70102 	.word	0x00f70102
 80021b4:	01020102 	.word	0x01020102
 80021b8:	01020102 	.word	0x01020102
 80021bc:	00f50102 	.word	0x00f50102
 80021c0:	01020102 	.word	0x01020102
 80021c4:	00710102 	.word	0x00710102
 80021c8:	00e90102 	.word	0x00e90102
 80021cc:	01020102 	.word	0x01020102
 80021d0:	00ff      	.short	0x00ff
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 80021d2:	782b      	ldrb	r3, [r5, #0]
 80021d4:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 80021d6:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 80021da:	f81a 2b01 	ldrb.w	r2, [sl], #1
        if (c >= '0' && c <= '9')
 80021de:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 80021e6:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 80021ea:	d9f4      	bls.n	80021d6 <chprintf.constprop.4+0x136>
          c -= '0';
        else if (c == '*')
 80021ec:	2a2a      	cmp	r2, #42	; 0x2a
 80021ee:	d0f0      	beq.n	80021d2 <chprintf.constprop.4+0x132>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80021f0:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80021f4:	2b4c      	cmp	r3, #76	; 0x4c
 80021f6:	d1b0      	bne.n	800215a <chprintf.constprop.4+0xba>
      is_long = TRUE;
      if (*fmt)
 80021f8:	f89a 3000 	ldrb.w	r3, [sl]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80b5 	beq.w	800236c <chprintf.constprop.4+0x2cc>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002202:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8002206:	f10a 0a01 	add.w	sl, sl, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800220a:	2a34      	cmp	r2, #52	; 0x34
 800220c:	f200 80ad 	bhi.w	800236a <chprintf.constprop.4+0x2ca>
 8002210:	e8df f002 	tbb	[pc, r2]
 8002214:	abababa1 	.word	0xabababa1
 8002218:	ababa1ab 	.word	0xababa1ab
 800221c:	9fababab 	.word	0x9fababab
 8002220:	abababab 	.word	0xabababab
 8002224:	abab93ab 	.word	0xabab93ab
 8002228:	abababa9 	.word	0xabababa9
 800222c:	abababab 	.word	0xabababab
 8002230:	68ababab 	.word	0x68ababab
 8002234:	abababa1 	.word	0xabababa1
 8002238:	ababa1ab 	.word	0xababa1ab
 800223c:	9fababab 	.word	0x9fababab
 8002240:	1bababab 	.word	0x1bababab
 8002244:	abab93ab 	.word	0xabab93ab
 8002248:	a9          	.byte	0xa9
 8002249:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800224a:	f8d5 9000 	ldr.w	r9, [r5]
        s = "(null)";
 800224e:	4b5f      	ldr	r3, [pc, #380]	; (80023cc <chprintf.constprop.4+0x32c>)
 8002250:	f1b9 0f00 	cmp.w	r9, #0
 8002254:	bf08      	it	eq
 8002256:	4699      	moveq	r9, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8002258:	3504      	adds	r5, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800225a:	f899 3000 	ldrb.w	r3, [r9]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 800225e:	2900      	cmp	r1, #0
 8002260:	f000 809e 	beq.w	80023a0 <chprintf.constprop.4+0x300>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80a0 	beq.w	80023aa <chprintf.constprop.4+0x30a>
 800226a:	3901      	subs	r1, #1
 800226c:	4648      	mov	r0, r9
 800226e:	e001      	b.n	8002274 <chprintf.constprop.4+0x1d4>
 8002270:	3901      	subs	r1, #1
 8002272:	d403      	bmi.n	800227c <chprintf.constprop.4+0x1dc>
 8002274:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f9      	bne.n	8002270 <chprintf.constprop.4+0x1d0>
 800227c:	ebc9 0000 	rsb	r0, r9, r0
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8002280:	1a36      	subs	r6, r6, r0
 8002282:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8002284:	2420      	movs	r4, #32
 8002286:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800228a:	2f00      	cmp	r7, #0
 800228c:	d039      	beq.n	8002302 <chprintf.constprop.4+0x262>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800228e:	1e1f      	subs	r7, r3, #0
 8002290:	db16      	blt.n	80022c0 <chprintf.constprop.4+0x220>
 8002292:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80023d0 <chprintf.constprop.4+0x330>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002296:	46bb      	mov	fp, r7
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 8002298:	f8d8 3000 	ldr.w	r3, [r8]
 800229c:	484c      	ldr	r0, [pc, #304]	; (80023d0 <chprintf.constprop.4+0x330>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f819 1b01 	ldrb.w	r1, [r9], #1
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80022a4:	f10b 3bff 	add.w	fp, fp, #4294967295
      streamPut(chp, (uint8_t)*s++);
 80022a8:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80022aa:	f1bb 3fff 	cmp.w	fp, #4294967295
 80022ae:	d1f3      	bne.n	8002298 <chprintf.constprop.4+0x1f8>
 80022b0:	9b00      	ldr	r3, [sp, #0]
 80022b2:	f103 0801 	add.w	r8, r3, #1
 80022b6:	4643      	mov	r3, r8
 80022b8:	2f00      	cmp	r7, #0
 80022ba:	bfa8      	it	ge
 80022bc:	19db      	addge	r3, r3, r7
 80022be:	9300      	str	r3, [sp, #0]
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80022c0:	2e00      	cmp	r6, #0
 80022c2:	f43f aefe 	beq.w	80020c2 <chprintf.constprop.4+0x22>
 80022c6:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80023d0 <chprintf.constprop.4+0x330>
 80022ca:	4637      	mov	r7, r6
      streamPut(chp, (uint8_t)filler);
 80022cc:	f8d8 3000 	ldr.w	r3, [r8]
 80022d0:	483f      	ldr	r0, [pc, #252]	; (80023d0 <chprintf.constprop.4+0x330>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4621      	mov	r1, r4
 80022d6:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80022d8:	3f01      	subs	r7, #1
 80022da:	d1f7      	bne.n	80022cc <chprintf.constprop.4+0x22c>
 80022dc:	9b00      	ldr	r3, [sp, #0]
 80022de:	4433      	add	r3, r6
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	e6ee      	b.n	80020c2 <chprintf.constprop.4+0x22>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	f88d 300c 	strb.w	r3, [sp, #12]
 80022ea:	9b01      	ldr	r3, [sp, #4]
 80022ec:	3504      	adds	r5, #4
 80022ee:	4618      	mov	r0, r3
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80022f0:	2420      	movs	r4, #32
 80022f2:	3b01      	subs	r3, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80022f4:	f10d 090c 	add.w	r9, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80022f8:	1a36      	subs	r6, r6, r0
 80022fa:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 80022fe:	2f00      	cmp	r7, #0
 8002300:	d1c5      	bne.n	800228e <chprintf.constprop.4+0x1ee>
 8002302:	461f      	mov	r7, r3
      width = -width;
 8002304:	f1c6 0b00 	rsb	fp, r6, #0
    if (width < 0) {
 8002308:	f1bb 0f00 	cmp.w	fp, #0
 800230c:	d036      	beq.n	800237c <chprintf.constprop.4+0x2dc>
      if (*s == '-' && filler == '0') {
 800230e:	f899 1000 	ldrb.w	r1, [r9]
        streamPut(chp, (uint8_t)*s++);
 8002312:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80023d0 <chprintf.constprop.4+0x330>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8002316:	292d      	cmp	r1, #45	; 0x2d
 8002318:	d034      	beq.n	8002384 <chprintf.constprop.4+0x2e4>
        streamPut(chp, (uint8_t)*s++);
        n++;
 800231a:	465e      	mov	r6, fp
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 800231c:	f8d8 3000 	ldr.w	r3, [r8]
 8002320:	482b      	ldr	r0, [pc, #172]	; (80023d0 <chprintf.constprop.4+0x330>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4621      	mov	r1, r4
 8002326:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8002328:	3601      	adds	r6, #1
 800232a:	d1f7      	bne.n	800231c <chprintf.constprop.4+0x27c>
 800232c:	9b00      	ldr	r3, [sp, #0]
    }
    while (--i >= 0) {
 800232e:	2f00      	cmp	r7, #0
 8002330:	ebcb 0303 	rsb	r3, fp, r3
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	daae      	bge.n	8002296 <chprintf.constprop.4+0x1f6>
 8002338:	e6c3      	b.n	80020c2 <chprintf.constprop.4+0x22>
 800233a:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 800233c:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800233e:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002340:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002342:	f7ff fd75 	bl	8001e30 <long_to_string_with_divisor.constprop.6>
 8002346:	ab03      	add	r3, sp, #12
 8002348:	1ac0      	subs	r0, r0, r3
 800234a:	1e43      	subs	r3, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800234c:	f10d 090c 	add.w	r9, sp, #12
 8002350:	e7d2      	b.n	80022f8 <chprintf.constprop.4+0x258>
 8002352:	2208      	movs	r2, #8
 8002354:	e7f2      	b.n	800233c <chprintf.constprop.4+0x29c>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8002356:	6829      	ldr	r1, [r5, #0]
      if (l < 0) {
 8002358:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800235a:	f105 0504 	add.w	r5, r5, #4
      if (l < 0) {
 800235e:	db2b      	blt.n	80023b8 <chprintf.constprop.4+0x318>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8002360:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002362:	220a      	movs	r2, #10
 8002364:	e7ed      	b.n	8002342 <chprintf.constprop.4+0x2a2>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002366:	2210      	movs	r2, #16
 8002368:	e7e8      	b.n	800233c <chprintf.constprop.4+0x29c>
 800236a:	461a      	mov	r2, r3
 800236c:	9b01      	ldr	r3, [sp, #4]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 800236e:	f88d 200c 	strb.w	r2, [sp, #12]
 8002372:	4618      	mov	r0, r3
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002374:	f10d 090c 	add.w	r9, sp, #12
 8002378:	3b01      	subs	r3, #1
 800237a:	e7bd      	b.n	80022f8 <chprintf.constprop.4+0x258>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800237c:	2f00      	cmp	r7, #0
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 800237e:	465e      	mov	r6, fp
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002380:	da87      	bge.n	8002292 <chprintf.constprop.4+0x1f2>
 8002382:	e69e      	b.n	80020c2 <chprintf.constprop.4+0x22>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8002384:	2c30      	cmp	r4, #48	; 0x30
 8002386:	d1c8      	bne.n	800231a <chprintf.constprop.4+0x27a>
        streamPut(chp, (uint8_t)*s++);
 8002388:	f8d8 3000 	ldr.w	r3, [r8]
 800238c:	4640      	mov	r0, r8
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4798      	blx	r3
        n++;
 8002392:	9b00      	ldr	r3, [sp, #0]
 8002394:	3301      	adds	r3, #1
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        streamPut(chp, (uint8_t)*s++);
 8002396:	f109 0901 	add.w	r9, r9, #1
        n++;
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	3f01      	subs	r7, #1
 800239e:	e7bc      	b.n	800231a <chprintf.constprop.4+0x27a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80023a0:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f47f af61 	bne.w	800226c <chprintf.constprop.4+0x1cc>
 80023aa:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80023ae:	b957      	cbnz	r7, 80023c6 <chprintf.constprop.4+0x326>
 80023b0:	f04f 37ff 	mov.w	r7, #4294967295
 80023b4:	2420      	movs	r4, #32
 80023b6:	e7a5      	b.n	8002304 <chprintf.constprop.4+0x264>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80023b8:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80023ba:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80023bc:	f88d 300c 	strb.w	r3, [sp, #12]
 80023c0:	f10d 000d 	add.w	r0, sp, #13
 80023c4:	e7cd      	b.n	8002362 <chprintf.constprop.4+0x2c2>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80023c6:	2420      	movs	r4, #32
 80023c8:	e77a      	b.n	80022c0 <chprintf.constprop.4+0x220>
 80023ca:	bf00      	nop
 80023cc:	08002ff0 	.word	0x08002ff0
 80023d0:	20001590 	.word	0x20001590
	...

080023e0 <pwmEnableChannel.constprop.9>:
 80023e0:	2320      	movs	r3, #32
 80023e2:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 80023e6:	68c3      	ldr	r3, [r0, #12]
                            pwmchannel_t channel,
                            pwmcnt_t width) {

  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
 80023e8:	6982      	ldr	r2, [r0, #24]
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	60c3      	str	r3, [r0, #12]
 80023f0:	2300      	movs	r3, #0
 80023f2:	6351      	str	r1, [r2, #52]	; 0x34
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	0000      	movs	r0, r0
	...

08002400 <sendToESP8266.constprop.2>:
/**
 * This function send a command on serial port SD1 to
 * ESP8266. You can listen for the response by calling
 * readAndPrintResponse() function.
 */
void sendToESP8266(char* command, int delay) {
 8002400:	b508      	push	{r3, lr}
 8002402:	4601      	mov	r1, r0
  chprintf((BaseChannel *)WIFI_SERIAL, command);
 8002404:	4804      	ldr	r0, [pc, #16]	; (8002418 <sendToESP8266.constprop.2+0x18>)
 8002406:	f7ff fe4b 	bl	80020a0 <chprintf.constprop.4>
  chThdSleepMilliseconds(delay);
 800240a:	f241 3088 	movw	r0, #5000	; 0x1388
}
 800240e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * ESP8266. You can listen for the response by calling
 * readAndPrintResponse() function.
 */
void sendToESP8266(char* command, int delay) {
  chprintf((BaseChannel *)WIFI_SERIAL, command);
  chThdSleepMilliseconds(delay);
 8002412:	f7ff ba45 	b.w	80018a0 <chThdSleep>
 8002416:	bf00      	nop
 8002418:	20001590 	.word	0x20001590
 800241c:	00000000 	.word	0x00000000

08002420 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8002420:	4bb9      	ldr	r3, [pc, #740]	; (8002708 <main+0x2e8>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002422:	4cba      	ldr	r4, [pc, #744]	; (800270c <main+0x2ec>)
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	f04f 31ff 	mov.w	r1, #4294967295
 800242a:	2200      	movs	r2, #0
static SerialConfig uartCfgMonitor = {9600, };

/*
 * Application entry point.
 */
int main(void) {
 800242c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002430:	6119      	str	r1, [r3, #16]
 8002432:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8002434:	6958      	ldr	r0, [r3, #20]
 8002436:	6159      	str	r1, [r3, #20]
 8002438:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800243a:	6a18      	ldr	r0, [r3, #32]
 800243c:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8002440:	6218      	str	r0, [r3, #32]
 8002442:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8002444:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002446:	6259      	str	r1, [r3, #36]	; 0x24
 8002448:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800244a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800244c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002450:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002452:	6821      	ldr	r1, [r4, #0]
 8002454:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002458:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800245a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800245c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002460:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002464:	b08b      	sub	sp, #44	; 0x2c
 8002466:	d003      	beq.n	8002470 <main+0x50>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8002468:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800246c:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800246e:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8002470:	f8df e298 	ldr.w	lr, [pc, #664]	; 800270c <main+0x2ec>
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8002474:	4ca4      	ldr	r4, [pc, #656]	; (8002708 <main+0x2e8>)
 8002476:	f8de 5004 	ldr.w	r5, [lr, #4]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800247a:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 8002774 <main+0x354>
 800247e:	4ea4      	ldr	r6, [pc, #656]	; (8002710 <main+0x2f0>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8002480:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 8002778 <main+0x358>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002484:	48a3      	ldr	r0, [pc, #652]	; (8002714 <main+0x2f4>)
 8002486:	4ba4      	ldr	r3, [pc, #656]	; (8002718 <main+0x2f8>)
 8002488:	49a4      	ldr	r1, [pc, #656]	; (800271c <main+0x2fc>)
 800248a:	4aa5      	ldr	r2, [pc, #660]	; (8002720 <main+0x300>)
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 800248c:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 800277c <main+0x35c>
 8002490:	4fa4      	ldr	r7, [pc, #656]	; (8002724 <main+0x304>)
 8002492:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8002496:	f8ce 5004 	str.w	r5, [lr, #4]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800249a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800249c:	f045 051f 	orr.w	r5, r5, #31
 80024a0:	6325      	str	r5, [r4, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80024a2:	f8d4 c050 	ldr.w	ip, [r4, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80024a6:	2500      	movs	r5, #0
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80024a8:	f04c 0c1f 	orr.w	ip, ip, #31
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80024ac:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80024b0:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80024b4:	f64f 7adf 	movw	sl, #65503	; 0xffdf
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80024b8:	f8c9 5004 	str.w	r5, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80024bc:	f44f 4cee 	mov.w	ip, #30464	; 0x7700
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80024c0:	f8c9 e008 	str.w	lr, [r9, #8]
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80024c4:	4c98      	ldr	r4, [pc, #608]	; (8002728 <main+0x308>)

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80024c6:	f8c9 b00c 	str.w	fp, [r9, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 80024ca:	f44f 2e2a 	mov.w	lr, #696320	; 0xaa000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80024ce:	f8c9 a014 	str.w	sl, [r9, #20]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80024d2:	f04f 3bff 	mov.w	fp, #4294967295
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80024d6:	f8c9 c020 	str.w	ip, [r9, #32]
  gpiop->AFRH    = config->afrh;
 80024da:	f8c9 e024 	str.w	lr, [r9, #36]	; 0x24

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80024de:	f04f 3c55 	mov.w	ip, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80024e2:	f8c9 4000 	str.w	r4, [r9]
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80024e6:	f64f 7eff 	movw	lr, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80024ea:	2480      	movs	r4, #128	; 0x80
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80024ec:	6075      	str	r5, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80024ee:	f8c6 b008 	str.w	fp, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 80024f2:	f8c6 c00c 	str.w	ip, [r6, #12]
  gpiop->ODR     = config->odr;
 80024f6:	f8c6 e014 	str.w	lr, [r6, #20]
  gpiop->AFRL    = config->afrl;
 80024fa:	6235      	str	r5, [r6, #32]
  gpiop->AFRH    = config->afrh;
 80024fc:	6275      	str	r5, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80024fe:	6034      	str	r4, [r6, #0]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8002500:	4c8a      	ldr	r4, [pc, #552]	; (800272c <main+0x30c>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002502:	6045      	str	r5, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002504:	f8c0 b008 	str.w	fp, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8002508:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 800250a:	f8c0 e014 	str.w	lr, [r0, #20]
  gpiop->AFRL    = config->afrl;
 800250e:	6205      	str	r5, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8002510:	6245      	str	r5, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002512:	6005      	str	r5, [r0, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002514:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002516:	f8c3 b008 	str.w	fp, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800251a:	f8c3 c00c 	str.w	ip, [r3, #12]
  gpiop->ODR     = config->odr;
 800251e:	f8c3 e014 	str.w	lr, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8002522:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8002524:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002526:	601d      	str	r5, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002528:	604d      	str	r5, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800252a:	f8c1 b008 	str.w	fp, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800252e:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8002532:	f8c1 e014 	str.w	lr, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8002536:	620d      	str	r5, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8002538:	624d      	str	r5, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800253a:	600d      	str	r5, [r1, #0]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800253c:	497c      	ldr	r1, [pc, #496]	; (8002730 <main+0x310>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800253e:	6055      	str	r5, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002540:	f8c2 b008 	str.w	fp, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8002544:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 8002546:	f8c2 e014 	str.w	lr, [r2, #20]
  gpiop->AFRL    = config->afrl;
 800254a:	6215      	str	r5, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800254c:	6255      	str	r5, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800254e:	6015      	str	r5, [r2, #0]

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
  PWMD1.tim = STM32_TIM1;
 8002550:	f5a2 328e 	sub.w	r2, r2, #72704	; 0x11c00
 8002554:	2301      	movs	r3, #1

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
  PWMD3.channels = STM32_TIM3_CHANNELS;
  PWMD3.tim = STM32_TIM3;
 8002556:	f8df c228 	ldr.w	ip, [pc, #552]	; 8002780 <main+0x360>

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
  PWMD1.tim = STM32_TIM1;
 800255a:	f8c8 2018 	str.w	r2, [r8, #24]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 800255e:	4875      	ldr	r0, [pc, #468]	; (8002734 <main+0x314>)
 8002560:	4975      	ldr	r1, [pc, #468]	; (8002738 <main+0x318>)

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
  PWMD3.channels = STM32_TIM3_CHANNELS;
  PWMD3.tim = STM32_TIM3;
 8002562:	f8c7 c018 	str.w	ip, [r7, #24]
void pwm_lld_init(void) {

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8002566:	f04f 0204 	mov.w	r2, #4
  SD1.usart = USART1;
 800256a:	f644 6a74 	movw	sl, #20084	; 0x4e74
 800256e:	f888 3000 	strb.w	r3, [r8]
 8002572:	f888 2010 	strb.w	r2, [r8, #16]
 8002576:	703b      	strb	r3, [r7, #0]
 8002578:	9301      	str	r3, [sp, #4]
#endif

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
  PWMD3.channels = STM32_TIM3_CHANNELS;
 800257a:	743a      	strb	r2, [r7, #16]
  pwmp->config   = NULL;
 800257c:	f8c8 5004 	str.w	r5, [r8, #4]
  pwmp->enabled  = 0;
 8002580:	f8c8 500c 	str.w	r5, [r8, #12]
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  pwmp->config   = NULL;
 8002584:	607d      	str	r5, [r7, #4]
  pwmp->enabled  = 0;
 8002586:	60fd      	str	r5, [r7, #12]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8002588:	f7ff fc02 	bl	8001d90 <sdObjectInit.constprop.12>
  SD1.usart = USART1;
 800258c:	4b69      	ldr	r3, [pc, #420]	; (8002734 <main+0x314>)
 800258e:	4a6b      	ldr	r2, [pc, #428]	; (800273c <main+0x31c>)
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8002590:	496b      	ldr	r1, [pc, #428]	; (8002740 <main+0x320>)
 8002592:	486c      	ldr	r0, [pc, #432]	; (8002744 <main+0x324>)
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 8002594:	f843 200a 	str.w	r2, [r3, sl]
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8002598:	f7ff fbfa 	bl	8001d90 <sdObjectInit.constprop.12>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800259c:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <main+0x2e8>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800259e:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 8002784 <main+0x364>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80025a2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 80025a4:	4a68      	ldr	r2, [pc, #416]	; (8002748 <main+0x328>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80025a6:	4969      	ldr	r1, [pc, #420]	; (800274c <main+0x32c>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80025a8:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8002788 <main+0x368>
 80025ac:	f040 0001 	orr.w	r0, r0, #1
 80025b0:	6418      	str	r0, [r3, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80025b2:	f8de 0008 	ldr.w	r0, [lr, #8]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80025b6:	9b01      	ldr	r3, [sp, #4]

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80025b8:	f040 0001 	orr.w	r0, r0, #1
 80025bc:	f8ce 0008 	str.w	r0, [lr, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80025c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80025c4:	f242 04cf 	movw	r4, #8399	; 0x20cf
 80025c8:	6284      	str	r4, [r0, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80025ca:	f8c0 b02c 	str.w	fp, [r0, #44]	; 0x2c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025ce:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  STM32_ST_TIM->CCMR1  = 0;
 80025d2:	6185      	str	r5, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80025d4:	6345      	str	r5, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80025d6:	60c5      	str	r5, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 80025d8:	6045      	str	r5, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80025da:	6143      	str	r3, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80025dc:	6003      	str	r3, [r0, #0]
 80025de:	9303      	str	r3, [sp, #12]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80025e0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80025e4:	f881 331c 	strb.w	r3, [r1, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025e8:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
  SD2.usart = USART2;
 80025ec:	4b55      	ldr	r3, [pc, #340]	; (8002744 <main+0x324>)
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80025ee:	600c      	str	r4, [r1, #0]
 80025f0:	6095      	str	r5, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80025f6:	4956      	ldr	r1, [pc, #344]	; (8002750 <main+0x330>)
 80025f8:	f843 100a 	str.w	r1, [r3, sl]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 80025fc:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8002600:	ea0e 0101 	and.w	r1, lr, r1
  reg_value  =  (reg_value                                   |
 8002604:	ea41 0c0c 	orr.w	ip, r1, ip

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002608:	4b52      	ldr	r3, [pc, #328]	; (8002754 <main+0x334>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800260a:	f8c2 c00c 	str.w	ip, [r2, #12]
 800260e:	68d9      	ldr	r1, [r3, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002610:	4c51      	ldr	r4, [pc, #324]	; (8002758 <main+0x338>)
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002612:	4852      	ldr	r0, [pc, #328]	; (800275c <main+0x33c>)
  tqp->p_prev = (thread_t *)tqp;
 8002614:	6064      	str	r4, [r4, #4]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002616:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800261a:	60d9      	str	r1, [r3, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800261c:	6801      	ldr	r1, [r0, #0]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800261e:	60a5      	str	r5, [r4, #8]
 8002620:	f041 0101 	orr.w	r1, r1, #1
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002624:	f04f 0a20 	mov.w	sl, #32
 8002628:	f04f 0310 	mov.w	r3, #16
 800262c:	6001      	str	r1, [r0, #0]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800262e:	f104 0e1c 	add.w	lr, r4, #28
 8002632:	77d3      	strb	r3, [r2, #31]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8002634:	a804      	add	r0, sp, #16

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8002636:	2300      	movs	r3, #0
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8002638:	6124      	str	r4, [r4, #16]
 800263a:	f882 a022 	strb.w	sl, [r2, #34]	; 0x22
 800263e:	2200      	movs	r2, #0
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8002640:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002644:	6024      	str	r4, [r4, #0]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8002646:	6164      	str	r4, [r4, #20]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8002648:	f8c4 e01c 	str.w	lr, [r4, #28]
 800264c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002650:	f8c4 e020 	str.w	lr, [r4, #32]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8002654:	f8cd b010 	str.w	fp, [sp, #16]
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8002658:	62a5      	str	r5, [r4, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800265a:	6765      	str	r5, [r4, #116]	; 0x74
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 800265c:	9505      	str	r5, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 800265e:	9506      	str	r5, [sp, #24]
  tmp->n          = (ucnt_t)0;
 8002660:	9507      	str	r5, [sp, #28]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8002662:	f7ff fb8d 	bl	8001d80 <chTMStartMeasurementX.constprop.19>
  chTMStopMeasurementX(&tm);
 8002666:	a804      	add	r0, sp, #16
 8002668:	f7ff f8ca 	bl	8001800 <chTMStopMeasurementX>
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800266c:	483c      	ldr	r0, [pc, #240]	; (8002760 <main+0x340>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800266e:	493d      	ldr	r1, [pc, #244]	; (8002764 <main+0x344>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002670:	f8df b118 	ldr.w	fp, [pc, #280]	; 800278c <main+0x36c>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8002674:	4a3c      	ldr	r2, [pc, #240]	; (8002768 <main+0x348>)
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002676:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
 800267a:	f020 0007 	bic.w	r0, r0, #7
 800267e:	9001      	str	r0, [sp, #4]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002680:	6960      	ldr	r0, [r4, #20]
 8002682:	6460      	str	r0, [r4, #68]	; 0x44
 8002684:	9801      	ldr	r0, [sp, #4]
 8002686:	f8cb 0000 	str.w	r0, [fp]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800268a:	f021 0307 	bic.w	r3, r1, #7
 800268e:	6960      	ldr	r0, [r4, #20]
  ch.tm.offset = tm.last;
 8002690:	9906      	ldr	r1, [sp, #24]
 8002692:	9302      	str	r3, [sp, #8]
 8002694:	f102 0e10 	add.w	lr, r2, #16
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002698:	9b03      	ldr	r3, [sp, #12]
 800269a:	6761      	str	r1, [r4, #116]	; 0x74
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800269c:	f04f 0c40 	mov.w	ip, #64	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80026a0:	f104 0130 	add.w	r1, r4, #48	; 0x30
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80026a4:	6195      	str	r5, [r2, #24]
 80026a6:	f8c2 e010 	str.w	lr, [r2, #16]
  tqp->p_prev = (thread_t *)tqp;
 80026aa:	f8c2 e014 	str.w	lr, [r2, #20]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80026ae:	66a5      	str	r5, [r4, #104]	; 0x68
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80026b0:	6665      	str	r5, [r4, #100]	; 0x64
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80026b2:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80026b6:	64a5      	str	r5, [r4, #72]	; 0x48
  REG_INSERT(tp);
 80026b8:	6424      	str	r4, [r4, #64]	; 0x40
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80026ba:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80026be:	f8c4 c06c 	str.w	ip, [r4, #108]	; 0x6c
 80026c2:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8002790 <main+0x370>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80026c6:	6101      	str	r1, [r0, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80026c8:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80026cc:	6161      	str	r1, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 80026ce:	61a1      	str	r1, [r4, #24]
 80026d0:	4926      	ldr	r1, [pc, #152]	; (800276c <main+0x34c>)
  default_heap.h_free.h.u.next = NULL;
 80026d2:	6095      	str	r5, [r2, #8]
  default_heap.h_free.h.size = 0;
 80026d4:	60d5      	str	r5, [r2, #12]
 80026d6:	6560      	str	r0, [r4, #84]	; 0x54
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80026d8:	6011      	str	r1, [r2, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80026da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026de:	9a02      	ldr	r2, [sp, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80026e0:	f8cd c00c 	str.w	ip, [sp, #12]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 80026e4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80026e8:	65a0      	str	r0, [r4, #88]	; 0x58
  tqp->p_prev = (thread_t *)tqp;
 80026ea:	65e0      	str	r0, [r4, #92]	; 0x5c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80026ec:	f04f 0b02 	mov.w	fp, #2
 80026f0:	f8ce 2000 	str.w	r2, [lr]
 80026f4:	f385 8811 	msr	BASEPRI, r5
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80026f8:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80026fa:	69a2      	ldr	r2, [r4, #24]
 80026fc:	491c      	ldr	r1, [pc, #112]	; (8002770 <main+0x350>)
 80026fe:	6191      	str	r1, [r2, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002700:	f38a 8811 	msr	BASEPRI, sl
 8002704:	e046      	b.n	8002794 <main+0x374>
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	40007000 	.word	0x40007000
 8002710:	40020400 	.word	0x40020400
 8002714:	40020800 	.word	0x40020800
 8002718:	40020c00 	.word	0x40020c00
 800271c:	40021000 	.word	0x40021000
 8002720:	40021c00 	.word	0x40021c00
 8002724:	2000b2ac 	.word	0x2000b2ac
 8002728:	2a8004a0 	.word	0x2a8004a0
 800272c:	51555555 	.word	0x51555555
 8002730:	55555550 	.word	0x55555550
 8002734:	20001590 	.word	0x20001590
 8002738:	08000ac1 	.word	0x08000ac1
 800273c:	40011000 	.word	0x40011000
 8002740:	08000ab1 	.word	0x08000ab1
 8002744:	20006408 	.word	0x20006408
 8002748:	e000ed00 	.word	0xe000ed00
 800274c:	e000e100 	.word	0xe000e100
 8002750:	40004400 	.word	0x40004400
 8002754:	e000edf0 	.word	0xe000edf0
 8002758:	2000b2d0 	.word	0x2000b2d0
 800275c:	e0001000 	.word	0xe0001000
 8002760:	2000b46f 	.word	0x2000b46f
 8002764:	20018000 	.word	0x20018000
 8002768:	2000b420 	.word	0x2000b420
 800276c:	08000cb1 	.word	0x08000cb1
 8002770:	08002fb0 	.word	0x08002fb0
 8002774:	40020000 	.word	0x40020000
 8002778:	64155105 	.word	0x64155105
 800277c:	2000b28c 	.word	0x2000b28c
 8002780:	40000400 	.word	0x40000400
 8002784:	e0042000 	.word	0xe0042000
 8002788:	05fa0300 	.word	0x05fa0300
 800278c:	2000b2c8 	.word	0x2000b2c8
 8002790:	2000b2a8 	.word	0x2000b2a8
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002794:	6961      	ldr	r1, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002796:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800279a:	f504 7296 	add.w	r2, r4, #300	; 0x12c
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800279e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80027a2:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80027a6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80027aa:	9301      	str	r3, [sp, #4]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80027ac:	f104 0278 	add.w	r2, r4, #120	; 0x78

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80027b0:	4b7c      	ldr	r3, [pc, #496]	; (80029a4 <main+0x584>)
 80027b2:	487d      	ldr	r0, [pc, #500]	; (80029a8 <main+0x588>)
 80027b4:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80027b8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80027bc:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80027c0:	f884 b094 	strb.w	fp, [r4, #148]	; 0x94
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80027c4:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80027c8:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80027cc:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80027d0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  REG_INSERT(tp);
 80027d4:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80027d8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80027dc:	4610      	mov	r0, r2
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80027de:	610a      	str	r2, [r1, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80027e0:	f104 019c 	add.w	r1, r4, #156	; 0x9c
 80027e4:	6162      	str	r2, [r4, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80027e6:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80027ea:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80027ee:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
  tqp->p_prev = (thread_t *)tqp;
 80027f2:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80027f6:	f7ff fc23 	bl	8002040 <chSchWakeupS.constprop.23>
 80027fa:	f385 8811 	msr	BASEPRI, r5
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80027fe:	4a6b      	ldr	r2, [pc, #428]	; (80029ac <main+0x58c>)
 8002800:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90

  /*
   * Activates the serial driver 2 using the driver default configuration.
   */
  /****************WIFI_SETUP*********************/
  sdStart(MONITOR_SERIAL, &uartCfgMonitor);
 8002804:	496a      	ldr	r1, [pc, #424]	; (80029b0 <main+0x590>)
 8002806:	486b      	ldr	r0, [pc, #428]	; (80029b4 <main+0x594>)
 8002808:	f7fe ff72 	bl	80016f0 <sdStart>
  palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(7)); // USART1 TX.
 800280c:	4648      	mov	r0, r9
 800280e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002812:	f240 3282 	movw	r2, #898	; 0x382
 8002816:	f7fe ff03 	bl	8001620 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(7)); // USART1 RX.
 800281a:	4648      	mov	r0, r9
 800281c:	f240 3282 	movw	r2, #898	; 0x382
 8002820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002824:	f7fe fefc 	bl	8001620 <_pal_lld_setgroupmode>
  sdStart(WIFI_SERIAL, &uartCfgWiFi);
 8002828:	4863      	ldr	r0, [pc, #396]	; (80029b8 <main+0x598>)
 800282a:	4964      	ldr	r1, [pc, #400]	; (80029bc <main+0x59c>)
 800282c:	f7fe ff60 	bl	80016f0 <sdStart>
 8002830:	f38a 8811 	msr	BASEPRI, sl

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002834:	4a62      	ldr	r2, [pc, #392]	; (80029c0 <main+0x5a0>)
 8002836:	4b5b      	ldr	r3, [pc, #364]	; (80029a4 <main+0x584>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002838:	6960      	ldr	r0, [r4, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800283a:	f8c2 38c4 	str.w	r3, [r2, #2244]	; 0x8c4
 800283e:	4961      	ldr	r1, [pc, #388]	; (80029c4 <main+0x5a4>)
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002840:	9b01      	ldr	r3, [sp, #4]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002842:	f8dd c00c 	ldr.w	ip, [sp, #12]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002846:	7793      	strb	r3, [r2, #30]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002848:	f8c2 18a4 	str.w	r1, [r2, #2212]	; 0x8a4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800284c:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8002850:	f602 0ea4 	addw	lr, r2, #2212	; 0x8a4
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002854:	f102 0124 	add.w	r1, r2, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002858:	6150      	str	r0, [r2, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800285a:	f8c2 58a8 	str.w	r5, [r2, #2216]	; 0x8a8
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800285e:	f882 b01c 	strb.w	fp, [r2, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002862:	7755      	strb	r5, [r2, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002864:	f8c2 c03c 	str.w	ip, [r2, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 8002868:	6395      	str	r5, [r2, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800286a:	6355      	str	r5, [r2, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800286c:	6195      	str	r5, [r2, #24]
  REG_INSERT(tp);
 800286e:	6114      	str	r4, [r2, #16]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002870:	f8c2 c008 	str.w	ip, [r2, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002874:	6102      	str	r2, [r0, #16]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002876:	f8c2 e00c 	str.w	lr, [r2, #12]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800287a:	4610      	mov	r0, r2
 800287c:	6251      	str	r1, [r2, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800287e:	6293      	str	r3, [r2, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8002880:	62d3      	str	r3, [r2, #44]	; 0x2c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002882:	6162      	str	r2, [r4, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002884:	f7ff fbdc 	bl	8002040 <chSchWakeupS.constprop.23>
 8002888:	f385 8811 	msr	BASEPRI, r5
 * ESP8266_setAsAP();
 */
void ESP8266_setAsAP(void) {
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Uart1EVT_Thread,
                    NULL);
  sendToESP8266(ESP8266_RESET, COMMAND_SLEEP);
 800288c:	484e      	ldr	r0, [pc, #312]	; (80029c8 <main+0x5a8>)
 800288e:	f7ff fdb7 	bl	8002400 <sendToESP8266.constprop.2>
  sendToESP8266(ESP8266_SET_AS_ACCESS_POINT, COMMAND_SLEEP);
 8002892:	484e      	ldr	r0, [pc, #312]	; (80029cc <main+0x5ac>)
 8002894:	f7ff fdb4 	bl	8002400 <sendToESP8266.constprop.2>
  sendToESP8266(ESP8266_GET_IP_ADD, COMMAND_SLEEP);
 8002898:	484d      	ldr	r0, [pc, #308]	; (80029d0 <main+0x5b0>)
 800289a:	f7ff fdb1 	bl	8002400 <sendToESP8266.constprop.2>
  sendToESP8266(ESP8266_MULTIPLE_CONNECTION, COMMAND_SLEEP);
 800289e:	484d      	ldr	r0, [pc, #308]	; (80029d4 <main+0x5b4>)
 80028a0:	f7ff fdae 	bl	8002400 <sendToESP8266.constprop.2>
  sendToESP8266(ESP8266_START_SERVER, COMMAND_SLEEP);
 80028a4:	484c      	ldr	r0, [pc, #304]	; (80029d8 <main+0x5b8>)
 80028a6:	f7ff fdab 	bl	8002400 <sendToESP8266.constprop.2>
  velocity[1] = ri;

}

void init_motor() {
  mapping.type1 = GPIOA;
 80028aa:	4b4c      	ldr	r3, [pc, #304]	; (80029dc <main+0x5bc>)

  mapping.type2 = GPIOB;
  mapping.port2 = GPIOB_PIN10;

  mapping.type3 = GPIOB;
  mapping.port3 = GPIOB_PIN4;
 80028ac:	2404      	movs	r4, #4

}

void init_motor() {
  mapping.type1 = GPIOA;
  mapping.port1 = GPIOA_PIN8;
 80028ae:	f04f 0c08 	mov.w	ip, #8

  mapping.type2 = GPIOB;
  mapping.port2 = GPIOB_PIN10;
 80028b2:	f04f 0e0a 	mov.w	lr, #10
  mapping.port3 = GPIOB_PIN4;

  mapping.type4 = GPIOB;
  mapping.port4 = GPIOB_PIN5;

  palSetPadMode(mapping.type1, mapping.port1,
 80028b6:	4648      	mov	r0, r9

  mapping.type2 = GPIOB;
  mapping.port2 = GPIOB_PIN10;

  mapping.type3 = GPIOB;
  mapping.port3 = GPIOB_PIN4;
 80028b8:	615c      	str	r4, [r3, #20]

  mapping.type4 = GPIOB;
  mapping.port4 = GPIOB_PIN5;

  palSetPadMode(mapping.type1, mapping.port1,
 80028ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028be:	2219      	movs	r2, #25

  mapping.type3 = GPIOB;
  mapping.port3 = GPIOB_PIN4;

  mapping.type4 = GPIOB;
  mapping.port4 = GPIOB_PIN5;
 80028c0:	2405      	movs	r4, #5

}

void init_motor() {
  mapping.type1 = GPIOA;
  mapping.port1 = GPIOA_PIN8;
 80028c2:	f8c3 c004 	str.w	ip, [r3, #4]

  mapping.type2 = GPIOB;
  mapping.port2 = GPIOB_PIN10;
 80028c6:	f8c3 e00c 	str.w	lr, [r3, #12]
  velocity[1] = ri;

}

void init_motor() {
  mapping.type1 = GPIOA;
 80028ca:	f8c3 9000 	str.w	r9, [r3]
  mapping.port1 = GPIOA_PIN8;

  mapping.type2 = GPIOB;
 80028ce:	609e      	str	r6, [r3, #8]
  mapping.port2 = GPIOB_PIN10;

  mapping.type3 = GPIOB;
 80028d0:	611e      	str	r6, [r3, #16]
  mapping.port3 = GPIOB_PIN4;

  mapping.type4 = GPIOB;
 80028d2:	619e      	str	r6, [r3, #24]
  mapping.port4 = GPIOB_PIN5;
 80028d4:	61dc      	str	r4, [r3, #28]

  palSetPadMode(mapping.type1, mapping.port1,
 80028d6:	f7fe fea3 	bl	8001620 <_pal_lld_setgroupmode>
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type1, mapping.port1);
 80028da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028de:	f8a9 301a 	strh.w	r3, [r9, #26]
  palSetPadMode(mapping.type2, mapping.port2,
 80028e2:	4630      	mov	r0, r6
 80028e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028e8:	2219      	movs	r2, #25
 80028ea:	f7fe fe99 	bl	8001620 <_pal_lld_setgroupmode>
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type2, mapping.port2);
 80028ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f2:	8373      	strh	r3, [r6, #26]
  palSetPadMode(mapping.type3, mapping.port3,
 80028f4:	4630      	mov	r0, r6
 80028f6:	2110      	movs	r1, #16
 80028f8:	2219      	movs	r2, #25
 80028fa:	f7fe fe91 	bl	8001620 <_pal_lld_setgroupmode>
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type3, mapping.port3);
 80028fe:	f04f 0310 	mov.w	r3, #16
 8002902:	8373      	strh	r3, [r6, #26]
  palSetPadMode(mapping.type4, mapping.port4,
 8002904:	4630      	mov	r0, r6
 8002906:	4651      	mov	r1, sl
 8002908:	2219      	movs	r2, #25
 800290a:	f7fe fe89 	bl	8001620 <_pal_lld_setgroupmode>
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type4, mapping.port4);
  functioPtrLeftUP = &Sinistra_Avanti_up;
  functioPtrLeftDOWN = &Sinistra_Avanti_Down;
 800290e:	4c34      	ldr	r4, [pc, #208]	; (80029e0 <main+0x5c0>)
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type3, mapping.port3);
  palSetPadMode(mapping.type4, mapping.port4,
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type4, mapping.port4);
  functioPtrLeftUP = &Sinistra_Avanti_up;
 8002910:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 80029fc <main+0x5dc>
  functioPtrLeftDOWN = &Sinistra_Avanti_Down;

  functioPtrRightUP = &Destra_Avanti_up;
 8002914:	4933      	ldr	r1, [pc, #204]	; (80029e4 <main+0x5c4>)
  functioPtrRightDOWN = &Destra_Avanti_Down;
 8002916:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <main+0x5c8>)
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type3, mapping.port3);
  palSetPadMode(mapping.type4, mapping.port4,
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type4, mapping.port4);
  functioPtrLeftUP = &Sinistra_Avanti_up;
 8002918:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8002a00 <main+0x5e0>
  functioPtrLeftDOWN = &Sinistra_Avanti_Down;
 800291c:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 8002a04 <main+0x5e4>

  functioPtrRightUP = &Destra_Avanti_up;
 8002920:	4832      	ldr	r0, [pc, #200]	; (80029ec <main+0x5cc>)
  functioPtrRightDOWN = &Destra_Avanti_Down;
 8002922:	4a33      	ldr	r2, [pc, #204]	; (80029f0 <main+0x5d0>)
  palSetPadMode(mapping.type3, mapping.port3,
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type3, mapping.port3);
  palSetPadMode(mapping.type4, mapping.port4,
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type4, mapping.port4);
 8002924:	f8a6 a01a 	strh.w	sl, [r6, #26]
  functioPtrLeftUP = &Sinistra_Avanti_up;
 8002928:	f8cc 9000 	str.w	r9, [ip]
  functioPtrLeftDOWN = &Sinistra_Avanti_Down;
 800292c:	f8c4 e000 	str.w	lr, [r4]

  functioPtrRightUP = &Destra_Avanti_up;
 8002930:	6008      	str	r0, [r1, #0]
  functioPtrRightDOWN = &Destra_Avanti_Down;
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f38a 8811 	msr	BASEPRI, sl
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 8002938:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <main+0x5d4>)
 800293a:	f8c8 3004 	str.w	r3, [r8, #4]
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
 800293e:	4640      	mov	r0, r8

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f8c8 3008 	str.w	r3, [r8, #8]
  pwm_lld_start(pwmp);
 8002946:	f7fe fdc3 	bl	80014d0 <pwm_lld_start>
  pwmp->enabled = 0;
 800294a:	f8c8 500c 	str.w	r5, [r8, #12]
  pwmp->state = PWM_READY;
 800294e:	f888 b000 	strb.w	fp, [r8]
 8002952:	f385 8811 	msr	BASEPRI, r5

  //start pwm1 (left engine)
  pwmStart(&PWMD1, &pwm1cfg);
  pwmEnablePeriodicNotification(&PWMD1);
 8002956:	4640      	mov	r0, r8
 8002958:	f7fe ff3a 	bl	80017d0 <pwmEnablePeriodicNotification>
  pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0));
 800295c:	4640      	mov	r0, r8
 800295e:	4629      	mov	r1, r5
 8002960:	f7ff fd3e 	bl	80023e0 <pwmEnableChannel.constprop.9>
  pwmEnableChannelNotification(&PWMD1, 0);
 8002964:	4640      	mov	r0, r8
 8002966:	f7ff fa4b 	bl	8001e00 <pwmEnableChannelNotification.constprop.7>
 800296a:	f38a 8811 	msr	BASEPRI, sl
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 800296e:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <main+0x5d8>)
 8002970:	607b      	str	r3, [r7, #4]
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
 8002972:	4638      	mov	r0, r7

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	60bb      	str	r3, [r7, #8]
  pwm_lld_start(pwmp);
 8002978:	f7fe fdaa 	bl	80014d0 <pwm_lld_start>
  pwmp->enabled = 0;
 800297c:	60fd      	str	r5, [r7, #12]
  pwmp->state = PWM_READY;
 800297e:	f887 b000 	strb.w	fp, [r7]
 8002982:	f385 8811 	msr	BASEPRI, r5

  //start pwm2 (right engine)
  pwmStart(&PWMD3, &pwm2cfg);
  pwmEnablePeriodicNotification(&PWMD3);
 8002986:	4638      	mov	r0, r7
 8002988:	f7fe ff22 	bl	80017d0 <pwmEnablePeriodicNotification>
  pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 800298c:	4638      	mov	r0, r7
 800298e:	4629      	mov	r1, r5
 8002990:	f7ff fd26 	bl	80023e0 <pwmEnableChannel.constprop.9>
  pwmEnableChannelNotification(&PWMD3, 0);
 8002994:	4638      	mov	r0, r7
 8002996:	f7ff fa33 	bl	8001e00 <pwmEnableChannelNotification.constprop.7>
  ESP8266_setAsAP();
  /****************MOTOR_SETUP*********************/
  init_motor();

  while (true) {
    chThdSleepMilliseconds(100); //without this, serial events will not be received (priority issue, maybe)
 800299a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800299e:	f7fe ff7f 	bl	80018a0 <chThdSleep>
 80029a2:	e7fa      	b.n	800299a <main+0x57a>
 80029a4:	080002a1 	.word	0x080002a1
 80029a8:	08000ff1 	.word	0x08000ff1
 80029ac:	08002ff8 	.word	0x08002ff8
 80029b0:	20000868 	.word	0x20000868
 80029b4:	20006408 	.word	0x20006408
 80029b8:	20001590 	.word	0x20001590
 80029bc:	20000874 	.word	0x20000874
 80029c0:	20000cc8 	.word	0x20000cc8
 80029c4:	08001af1 	.word	0x08001af1
 80029c8:	08003000 	.word	0x08003000
 80029cc:	0800300c 	.word	0x0800300c
 80029d0:	0800301c 	.word	0x0800301c
 80029d4:	08003028 	.word	0x08003028
 80029d8:	08003038 	.word	0x08003038
 80029dc:	2000b444 	.word	0x2000b444
 80029e0:	2000b280 	.word	0x2000b280
 80029e4:	2000b284 	.word	0x2000b284
 80029e8:	2000b288 	.word	0x2000b288
 80029ec:	08001ee1 	.word	0x08001ee1
 80029f0:	08001f11 	.word	0x08001f11
 80029f4:	20000834 	.word	0x20000834
 80029f8:	20000800 	.word	0x20000800
 80029fc:	2000b440 	.word	0x2000b440
 8002a00:	08001e81 	.word	0x08001e81
 8002a04:	08001eb1 	.word	0x08001eb1
	...

08002a10 <strcat>:
  }
  return NULL;
}
char *strcat(char *dest, const char *src){
    size_t i,j;
    for (i = 0; dest[i] != '\0'; i++)
 8002a10:	7802      	ldrb	r2, [r0, #0]
    p1 = p1Begin + 1;
    p1Adv++;
  }
  return NULL;
}
char *strcat(char *dest, const char *src){
 8002a12:	b430      	push	{r4, r5}
    size_t i,j;
    for (i = 0; dest[i] != '\0'; i++)
 8002a14:	b132      	cbz	r2, 8002a24 <strcat+0x14>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8002a1e:	3201      	adds	r2, #1
 8002a20:	2c00      	cmp	r4, #0
 8002a22:	d1fa      	bne.n	8002a1a <strcat+0xa>
        ;
    for (j = 0; src[j] != '\0'; j++)
 8002a24:	780b      	ldrb	r3, [r1, #0]
 8002a26:	b14b      	cbz	r3, 8002a3c <strcat+0x2c>
 8002a28:	1885      	adds	r5, r0, r2
 8002a2a:	2400      	movs	r4, #0
        dest[i+j] = src[j];
 8002a2c:	f805 3b01 	strb.w	r3, [r5], #1
}
char *strcat(char *dest, const char *src){
    size_t i,j;
    for (i = 0; dest[i] != '\0'; i++)
        ;
    for (j = 0; src[j] != '\0'; j++)
 8002a30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8002a34:	3401      	adds	r4, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f8      	bne.n	8002a2c <strcat+0x1c>
 8002a3a:	4422      	add	r2, r4
        dest[i+j] = src[j];
    dest[i+j] = '\0';
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	5483      	strb	r3, [r0, r2]
    return dest;
}
 8002a40:	bc30      	pop	{r4, r5}
 8002a42:	4770      	bx	lr
	...

08002a50 <memset>:
 8002a50:	b470      	push	{r4, r5, r6}
 8002a52:	0784      	lsls	r4, r0, #30
 8002a54:	d046      	beq.n	8002ae4 <memset+0x94>
 8002a56:	1e54      	subs	r4, r2, #1
 8002a58:	2a00      	cmp	r2, #0
 8002a5a:	d041      	beq.n	8002ae0 <memset+0x90>
 8002a5c:	b2cd      	uxtb	r5, r1
 8002a5e:	4603      	mov	r3, r0
 8002a60:	e002      	b.n	8002a68 <memset+0x18>
 8002a62:	1e62      	subs	r2, r4, #1
 8002a64:	b3e4      	cbz	r4, 8002ae0 <memset+0x90>
 8002a66:	4614      	mov	r4, r2
 8002a68:	f803 5b01 	strb.w	r5, [r3], #1
 8002a6c:	079a      	lsls	r2, r3, #30
 8002a6e:	d1f8      	bne.n	8002a62 <memset+0x12>
 8002a70:	2c03      	cmp	r4, #3
 8002a72:	d92e      	bls.n	8002ad2 <memset+0x82>
 8002a74:	b2cd      	uxtb	r5, r1
 8002a76:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8002a7a:	2c0f      	cmp	r4, #15
 8002a7c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8002a80:	d919      	bls.n	8002ab6 <memset+0x66>
 8002a82:	f103 0210 	add.w	r2, r3, #16
 8002a86:	4626      	mov	r6, r4
 8002a88:	3e10      	subs	r6, #16
 8002a8a:	2e0f      	cmp	r6, #15
 8002a8c:	f842 5c10 	str.w	r5, [r2, #-16]
 8002a90:	f842 5c0c 	str.w	r5, [r2, #-12]
 8002a94:	f842 5c08 	str.w	r5, [r2, #-8]
 8002a98:	f842 5c04 	str.w	r5, [r2, #-4]
 8002a9c:	f102 0210 	add.w	r2, r2, #16
 8002aa0:	d8f2      	bhi.n	8002a88 <memset+0x38>
 8002aa2:	f1a4 0210 	sub.w	r2, r4, #16
 8002aa6:	f022 020f 	bic.w	r2, r2, #15
 8002aaa:	f004 040f 	and.w	r4, r4, #15
 8002aae:	3210      	adds	r2, #16
 8002ab0:	2c03      	cmp	r4, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	d90d      	bls.n	8002ad2 <memset+0x82>
 8002ab6:	461e      	mov	r6, r3
 8002ab8:	4622      	mov	r2, r4
 8002aba:	3a04      	subs	r2, #4
 8002abc:	2a03      	cmp	r2, #3
 8002abe:	f846 5b04 	str.w	r5, [r6], #4
 8002ac2:	d8fa      	bhi.n	8002aba <memset+0x6a>
 8002ac4:	1f22      	subs	r2, r4, #4
 8002ac6:	f022 0203 	bic.w	r2, r2, #3
 8002aca:	3204      	adds	r2, #4
 8002acc:	4413      	add	r3, r2
 8002ace:	f004 0403 	and.w	r4, r4, #3
 8002ad2:	b12c      	cbz	r4, 8002ae0 <memset+0x90>
 8002ad4:	b2c9      	uxtb	r1, r1
 8002ad6:	441c      	add	r4, r3
 8002ad8:	f803 1b01 	strb.w	r1, [r3], #1
 8002adc:	42a3      	cmp	r3, r4
 8002ade:	d1fb      	bne.n	8002ad8 <memset+0x88>
 8002ae0:	bc70      	pop	{r4, r5, r6}
 8002ae2:	4770      	bx	lr
 8002ae4:	4614      	mov	r4, r2
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	e7c2      	b.n	8002a70 <memset+0x20>
 8002aea:	bf00      	nop
 8002aec:	0000      	movs	r0, r0
	...

08002af0 <atoi>:
 8002af0:	2100      	movs	r1, #0
 8002af2:	220a      	movs	r2, #10
 8002af4:	f000 b894 	b.w	8002c20 <strtol>
	...

08002b00 <_strtol_r>:
 8002b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b04:	4c44      	ldr	r4, [pc, #272]	; (8002c18 <_strtol_r+0x118>)
 8002b06:	4683      	mov	fp, r0
 8002b08:	460e      	mov	r6, r1
 8002b0a:	f8d4 e000 	ldr.w	lr, [r4]
 8002b0e:	e000      	b.n	8002b12 <_strtol_r+0x12>
 8002b10:	4626      	mov	r6, r4
 8002b12:	4634      	mov	r4, r6
 8002b14:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002b18:	eb0e 0005 	add.w	r0, lr, r5
 8002b1c:	7840      	ldrb	r0, [r0, #1]
 8002b1e:	f000 0008 	and.w	r0, r0, #8
 8002b22:	f000 08ff 	and.w	r8, r0, #255	; 0xff
 8002b26:	2800      	cmp	r0, #0
 8002b28:	d1f2      	bne.n	8002b10 <_strtol_r+0x10>
 8002b2a:	2d2d      	cmp	r5, #45	; 0x2d
 8002b2c:	d04b      	beq.n	8002bc6 <_strtol_r+0xc6>
 8002b2e:	2d2b      	cmp	r5, #43	; 0x2b
 8002b30:	bf04      	itt	eq
 8002b32:	7875      	ldrbeq	r5, [r6, #1]
 8002b34:	1cb4      	addeq	r4, r6, #2
 8002b36:	b11b      	cbz	r3, 8002b40 <_strtol_r+0x40>
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d060      	beq.n	8002bfe <_strtol_r+0xfe>
 8002b3c:	469a      	mov	sl, r3
 8002b3e:	e003      	b.n	8002b48 <_strtol_r+0x48>
 8002b40:	2d30      	cmp	r5, #48	; 0x30
 8002b42:	d054      	beq.n	8002bee <_strtol_r+0xee>
 8002b44:	230a      	movs	r3, #10
 8002b46:	469a      	mov	sl, r3
 8002b48:	f1b8 0f00 	cmp.w	r8, #0
 8002b4c:	bf14      	ite	ne
 8002b4e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8002b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8002b56:	2700      	movs	r7, #0
 8002b58:	fbb0 f9fa 	udiv	r9, r0, sl
 8002b5c:	46bc      	mov	ip, r7
 8002b5e:	fb0a 0019 	mls	r0, sl, r9, r0
 8002b62:	e00c      	b.n	8002b7e <_strtol_r+0x7e>
 8002b64:	3d30      	subs	r5, #48	; 0x30
 8002b66:	42ab      	cmp	r3, r5
 8002b68:	dd19      	ble.n	8002b9e <_strtol_r+0x9e>
 8002b6a:	1c7e      	adds	r6, r7, #1
 8002b6c:	d005      	beq.n	8002b7a <_strtol_r+0x7a>
 8002b6e:	45cc      	cmp	ip, r9
 8002b70:	d824      	bhi.n	8002bbc <_strtol_r+0xbc>
 8002b72:	d021      	beq.n	8002bb8 <_strtol_r+0xb8>
 8002b74:	fb0a 5c0c 	mla	ip, sl, ip, r5
 8002b78:	2701      	movs	r7, #1
 8002b7a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002b7e:	eb0e 0605 	add.w	r6, lr, r5
 8002b82:	7876      	ldrb	r6, [r6, #1]
 8002b84:	f016 0f04 	tst.w	r6, #4
 8002b88:	d1ec      	bne.n	8002b64 <_strtol_r+0x64>
 8002b8a:	f016 0603 	ands.w	r6, r6, #3
 8002b8e:	d006      	beq.n	8002b9e <_strtol_r+0x9e>
 8002b90:	2e01      	cmp	r6, #1
 8002b92:	bf0c      	ite	eq
 8002b94:	2637      	moveq	r6, #55	; 0x37
 8002b96:	2657      	movne	r6, #87	; 0x57
 8002b98:	1bad      	subs	r5, r5, r6
 8002b9a:	42ab      	cmp	r3, r5
 8002b9c:	dce5      	bgt.n	8002b6a <_strtol_r+0x6a>
 8002b9e:	1c7b      	adds	r3, r7, #1
 8002ba0:	d016      	beq.n	8002bd0 <_strtol_r+0xd0>
 8002ba2:	f1c8 0000 	rsb	r0, r8, #0
 8002ba6:	ea8c 0000 	eor.w	r0, ip, r0
 8002baa:	4440      	add	r0, r8
 8002bac:	b14a      	cbz	r2, 8002bc2 <_strtol_r+0xc2>
 8002bae:	b107      	cbz	r7, 8002bb2 <_strtol_r+0xb2>
 8002bb0:	1e61      	subs	r1, r4, #1
 8002bb2:	6011      	str	r1, [r2, #0]
 8002bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb8:	4285      	cmp	r5, r0
 8002bba:	dddb      	ble.n	8002b74 <_strtol_r+0x74>
 8002bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8002bc0:	e7db      	b.n	8002b7a <_strtol_r+0x7a>
 8002bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bc6:	1cb4      	adds	r4, r6, #2
 8002bc8:	7875      	ldrb	r5, [r6, #1]
 8002bca:	f04f 0801 	mov.w	r8, #1
 8002bce:	e7b2      	b.n	8002b36 <_strtol_r+0x36>
 8002bd0:	f1b8 0f00 	cmp.w	r8, #0
 8002bd4:	f04f 0322 	mov.w	r3, #34	; 0x22
 8002bd8:	bf14      	ite	ne
 8002bda:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8002bde:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8002be2:	f8cb 3000 	str.w	r3, [fp]
 8002be6:	2a00      	cmp	r2, #0
 8002be8:	d1e2      	bne.n	8002bb0 <_strtol_r+0xb0>
 8002bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bee:	7823      	ldrb	r3, [r4, #0]
 8002bf0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002bf4:	2b58      	cmp	r3, #88	; 0x58
 8002bf6:	d009      	beq.n	8002c0c <_strtol_r+0x10c>
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	469a      	mov	sl, r3
 8002bfc:	e7a4      	b.n	8002b48 <_strtol_r+0x48>
 8002bfe:	2d30      	cmp	r5, #48	; 0x30
 8002c00:	d19c      	bne.n	8002b3c <_strtol_r+0x3c>
 8002c02:	7820      	ldrb	r0, [r4, #0]
 8002c04:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002c08:	2858      	cmp	r0, #88	; 0x58
 8002c0a:	d197      	bne.n	8002b3c <_strtol_r+0x3c>
 8002c0c:	f04f 0a10 	mov.w	sl, #16
 8002c10:	7865      	ldrb	r5, [r4, #1]
 8002c12:	4653      	mov	r3, sl
 8002c14:	3402      	adds	r4, #2
 8002c16:	e797      	b.n	8002b48 <_strtol_r+0x48>
 8002c18:	20000880 	.word	0x20000880
 8002c1c:	00000000 	.word	0x00000000

08002c20 <strtol>:
 8002c20:	b430      	push	{r4, r5}
 8002c22:	4c04      	ldr	r4, [pc, #16]	; (8002c34 <strtol+0x14>)
 8002c24:	460d      	mov	r5, r1
 8002c26:	4613      	mov	r3, r2
 8002c28:	4601      	mov	r1, r0
 8002c2a:	462a      	mov	r2, r5
 8002c2c:	6820      	ldr	r0, [r4, #0]
 8002c2e:	bc30      	pop	{r4, r5}
 8002c30:	f7ff bf66 	b.w	8002b00 <_strtol_r>
 8002c34:	20000cb0 	.word	0x20000cb0
	...
 8002c40:	432b5441 	.word	0x432b5441
 8002c44:	45535049 	.word	0x45535049
 8002c48:	003d444e 	.word	0x003d444e
	...
 8002ca4:	6d74683c 	.word	0x6d74683c
 8002ca8:	005f3e6c 	.word	0x005f3e6c
	...
 8002efc:	682f3c5f 	.word	0x682f3c5f
 8002f00:	3e6c6d74 	.word	0x3e6c6d74
	...

08002f10 <default_config>:
 8002f10:	0001c200 40000000 00000000 00000000     .......@........
 8002f20:	0000002c 4450492b 00000000 00000000     ,...+IPD........

08002f30 <ram_areas>:
 8002f30:	0800361c 2000b464 2000b464 2000b464     .6..d.. d.. d.. 
 8002f40:	0800361c 00000000 00000000 00000000     .6..............
 8002f50:	0800361c 00000000 00000000 00000000     .6..............
 8002f60:	0800361c 00000000 00000000 00000000     .6..............
 8002f70:	0800361c 00000000 00000000 00000000     .6..............
 8002f80:	0800361c 00000000 00000000 00000000     .6..............
 8002f90:	0800361c 00000000 00000000 00000000     .6..............
 8002fa0:	0800361c 00000000 00000000 00000000     .6..............

08002fb0 <ch_debug>:
 8002fb0:	6e69616d 18431600 08440404 1814100c     main..C...D.....
 8002fc0:	1e1d1c00 00000000 00000000 00000000     ................

08002fd0 <vmt>:
 8002fd0:	08001221 08001341 080012a1 080013b1     !...A...........
 8002fe0:	08001291 080013a1 08001211 08001331     ............1...
 8002ff0:	6c756e28 0000296c 656c6469 00000000     (null)..idle....
 8003000:	522b5441 0a0d5453 00000000 432b5441     AT+RST......AT+C
 8003010:	444f4d57 0d323d45 0000000a 432b5441     WMODE=2.....AT+C
 8003020:	52534649 00000a0d 432b5441 554d5049     IFSR....AT+CIPMU
 8003030:	0d313d58 0000000a 432b5441 45535049     X=1.....AT+CIPSE
 8003040:	52455652 382c313d 000a0d30 00000000     RVER=1,80.......

08003050 <_ctype_>:
 8003050:	20202000 20202020 28282020 20282828     .         ((((( 
 8003060:	20202020 20202020 20202020 20202020                     
 8003070:	10108820 10101010 10101010 10101010      ...............
 8003080:	04040410 04040404 10040404 10101010     ................
 8003090:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80030a0:	01010101 01010101 01010101 10101010     ................
 80030b0:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80030c0:	02020202 02020202 02020202 10101010     ................
 80030d0:	00000020 00000000 00000000 00000000      ...............
	...
 8003160:	00000043                                         C.
