
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4822      	ldr	r0, [pc, #136]	; (800024c <endfiniloop+0x4>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f001 f965 	bl	80014a0 <__core_init>
 80001d6:	f000 feb3 	bl	8000f40 <__early_init>
 80001da:	481d      	ldr	r0, [pc, #116]	; (8000250 <endfiniloop+0x8>)
 80001dc:	491d      	ldr	r1, [pc, #116]	; (8000254 <endfiniloop+0xc>)
 80001de:	4a1e      	ldr	r2, [pc, #120]	; (8000258 <endfiniloop+0x10>)

080001e0 <msloop>:
 80001e0:	4291      	cmp	r1, r2
 80001e2:	bf3c      	itt	cc
 80001e4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e8:	e7fa      	bcc.n	80001e0 <msloop>
 80001ea:	491c      	ldr	r1, [pc, #112]	; (800025c <endfiniloop+0x14>)
 80001ec:	4a17      	ldr	r2, [pc, #92]	; (800024c <endfiniloop+0x4>)

080001ee <psloop>:
 80001ee:	4291      	cmp	r1, r2
 80001f0:	bf3c      	itt	cc
 80001f2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f6:	e7fa      	bcc.n	80001ee <psloop>
 80001f8:	4919      	ldr	r1, [pc, #100]	; (8000260 <endfiniloop+0x18>)
 80001fa:	4a1a      	ldr	r2, [pc, #104]	; (8000264 <endfiniloop+0x1c>)
 80001fc:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <endfiniloop+0x20>)

080001fe <dloop>:
 80001fe:	429a      	cmp	r2, r3
 8000200:	bf3e      	ittt	cc
 8000202:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000206:	f842 0b04 	strcc.w	r0, [r2], #4
 800020a:	e7f8      	bcc.n	80001fe <dloop>
 800020c:	2000      	movs	r0, #0
 800020e:	4917      	ldr	r1, [pc, #92]	; (800026c <endfiniloop+0x24>)
 8000210:	4a17      	ldr	r2, [pc, #92]	; (8000270 <endfiniloop+0x28>)

08000212 <bloop>:
 8000212:	4291      	cmp	r1, r2
 8000214:	bf3c      	itt	cc
 8000216:	f841 0b04 	strcc.w	r0, [r1], #4
 800021a:	e7fa      	bcc.n	8000212 <bloop>
 800021c:	f001 f908 	bl	8001430 <__init_ram_areas>
 8000220:	f001 f936 	bl	8001490 <__late_init>
 8000224:	4c13      	ldr	r4, [pc, #76]	; (8000274 <endfiniloop+0x2c>)
 8000226:	4d14      	ldr	r5, [pc, #80]	; (8000278 <endfiniloop+0x30>)

08000228 <initloop>:
 8000228:	42ac      	cmp	r4, r5
 800022a:	da03      	bge.n	8000234 <endinitloop>
 800022c:	f854 1b04 	ldr.w	r1, [r4], #4
 8000230:	4788      	blx	r1
 8000232:	e7f9      	b.n	8000228 <initloop>

08000234 <endinitloop>:
 8000234:	f001 fd14 	bl	8001c60 <main>
 8000238:	4c10      	ldr	r4, [pc, #64]	; (800027c <endfiniloop+0x34>)
 800023a:	4d11      	ldr	r5, [pc, #68]	; (8000280 <endfiniloop+0x38>)

0800023c <finiloop>:
 800023c:	42ac      	cmp	r4, r5
 800023e:	da03      	bge.n	8000248 <endfiniloop>
 8000240:	f854 1b04 	ldr.w	r1, [r4], #4
 8000244:	4788      	blx	r1
 8000246:	e7f9      	b.n	800023c <finiloop>

08000248 <endfiniloop>:
 8000248:	f001 b91a 	b.w	8001480 <__default_exit>
 800024c:	20000800 	.word	0x20000800
 8000250:	55555555 	.word	0x55555555
 8000254:	20000000 	.word	0x20000000
 8000258:	20000400 	.word	0x20000400
 800025c:	20000400 	.word	0x20000400
 8000260:	080029f8 	.word	0x080029f8
 8000264:	20000800 	.word	0x20000800
 8000268:	20000cb4 	.word	0x20000cb4
 800026c:	20000cb8 	.word	0x20000cb8
 8000270:	2000b468 	.word	0x2000b468
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	080001c0 	.word	0x080001c0
 8000280:	080001c0 	.word	0x080001c0
	...

08000290 <_port_switch>:
 8000290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000294:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000298:	68c3      	ldr	r3, [r0, #12]
 800029a:	469d      	mov	sp, r3
 800029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a0 <_port_thread_start>:
 80002a0:	2300      	movs	r3, #0
 80002a2:	f383 8811 	msr	BASEPRI, r3
 80002a6:	4628      	mov	r0, r5
 80002a8:	47a0      	blx	r4
 80002aa:	2000      	movs	r0, #0
 80002ac:	f001 f868 	bl	8001380 <chThdExit>

080002b0 <_port_switch_from_isr>:
 80002b0:	f001 f89e 	bl	80013f0 <chSchDoReschedule>

080002b4 <_port_exit_from_isr>:
 80002b4:	df00      	svc	0
 80002b6:	e7fe      	b.n	80002b6 <_port_exit_from_isr+0x2>
	...

080002c0 <notify2.lto_priv.24>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 80002c0:	4a02      	ldr	r2, [pc, #8]	; (80002cc <notify2.lto_priv.24+0xc>)
 80002c2:	68d3      	ldr	r3, [r2, #12]
 80002c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c8:	60d3      	str	r3, [r2, #12]
 80002ca:	4770      	bx	lr
 80002cc:	40004400 	.word	0x40004400

080002d0 <notify1.lto_priv.23>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 80002d0:	4a02      	ldr	r2, [pc, #8]	; (80002dc <notify1.lto_priv.23+0xc>)
 80002d2:	68d3      	ldr	r3, [r2, #12]
 80002d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d8:	60d3      	str	r3, [r2, #12]
 80002da:	4770      	bx	lr
 80002dc:	40011000 	.word	0x40011000

080002e0 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80002e0:	6983      	ldr	r3, [r0, #24]
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80002e2:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80002e4:	691a      	ldr	r2, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80002e6:	68dc      	ldr	r4, [r3, #12]
 80002e8:	4014      	ands	r4, r2
 80002ea:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 80002ec:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80002ee:	07a6      	lsls	r6, r4, #30
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80002f0:	4605      	mov	r5, r0
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
 80002f2:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80002f4:	d503      	bpl.n	80002fe <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 80002f6:	6843      	ldr	r3, [r0, #4]
 80002f8:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80002fa:	b103      	cbz	r3, 80002fe <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 80002fc:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80002fe:	0760      	lsls	r0, r4, #29
 8000300:	d504      	bpl.n	800030c <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 8000302:	686b      	ldr	r3, [r5, #4]
 8000304:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000306:	b10b      	cbz	r3, 800030c <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 8000308:	4628      	mov	r0, r5
 800030a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800030c:	0721      	lsls	r1, r4, #28
 800030e:	d504      	bpl.n	800031a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 8000310:	686b      	ldr	r3, [r5, #4]
 8000312:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8000314:	b10b      	cbz	r3, 800031a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 8000316:	4628      	mov	r0, r5
 8000318:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800031a:	06e2      	lsls	r2, r4, #27
 800031c:	d504      	bpl.n	8000328 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 800031e:	686b      	ldr	r3, [r5, #4]
 8000320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8000322:	b10b      	cbz	r3, 8000328 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 8000324:	4628      	mov	r0, r5
 8000326:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8000328:	07e3      	lsls	r3, r4, #31
 800032a:	d506      	bpl.n	800033a <pwm_lld_serve_interrupt+0x5a>
 800032c:	686b      	ldr	r3, [r5, #4]
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	b11b      	cbz	r3, 800033a <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 8000332:	4628      	mov	r0, r5
}
 8000334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
    pwmp->config->callback(pwmp);
 8000338:	4718      	bx	r3
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	0000      	movs	r0, r0
	...

08000340 <_port_irq_epilogue>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000340:	2320      	movs	r3, #32
 8000342:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <_port_irq_epilogue+0x44>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800034e:	d102      	bne.n	8000356 <_port_irq_epilogue+0x16>
 8000350:	f383 8811 	msr	BASEPRI, r3
 8000354:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000356:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800035a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800035e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000362:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000366:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800036a:	4a07      	ldr	r2, [pc, #28]	; (8000388 <_port_irq_epilogue+0x48>)
 800036c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 800036e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000370:	6889      	ldr	r1, [r1, #8]
 8000372:	6892      	ldr	r2, [r2, #8]
 8000374:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000376:	bf8c      	ite	hi
 8000378:	4a04      	ldrhi	r2, [pc, #16]	; (800038c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800037a:	4a05      	ldrls	r2, [pc, #20]	; (8000390 <_port_irq_epilogue+0x50>)
 800037c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	e000ed00 	.word	0xe000ed00
 8000388:	2000b2d0 	.word	0x2000b2d0
 800038c:	080002b1 	.word	0x080002b1
 8000390:	080002b4 	.word	0x080002b4
	...

080003a0 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 80003a0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD3);
 80003a2:	4803      	ldr	r0, [pc, #12]	; (80003b0 <VectorB4+0x10>)
 80003a4:	f7ff ff9c 	bl	80002e0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 80003a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD3);

  OSAL_IRQ_EPILOGUE();
 80003ac:	f7ff bfc8 	b.w	8000340 <_port_irq_epilogue>
 80003b0:	2000b2b0 	.word	0x2000b2b0
	...

080003c0 <VectorAC>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_CC_HANDLER) {
 80003c0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);
 80003c2:	4803      	ldr	r0, [pc, #12]	; (80003d0 <VectorAC+0x10>)
 80003c4:	f7ff ff8c 	bl	80002e0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 80003c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);

  OSAL_IRQ_EPILOGUE();
 80003cc:	f7ff bfb8 	b.w	8000340 <_port_irq_epilogue>
 80003d0:	2000b294 	.word	0x2000b294
	...

080003e0 <VectorA4>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 80003e0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);
 80003e2:	4803      	ldr	r0, [pc, #12]	; (80003f0 <VectorA4+0x10>)
 80003e4:	f7ff ff7c 	bl	80002e0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 80003e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);

  OSAL_IRQ_EPILOGUE();
 80003ec:	f7ff bfa8 	b.w	8000340 <_port_irq_epilogue>
 80003f0:	2000b294 	.word	0x2000b294
	...

08000400 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000404:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000408:	692b      	ldr	r3, [r5, #16]
 800040a:	079b      	lsls	r3, r3, #30
 800040c:	d403      	bmi.n	8000416 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800040e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000412:	f7ff bf95 	b.w	8000340 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8000416:	2700      	movs	r7, #0
 8000418:	612f      	str	r7, [r5, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800041a:	2620      	movs	r6, #32
 800041c:	f386 8811 	msr	BASEPRI, r6
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8000420:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800049c <VectorB0+0x9c>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000424:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000426:	f8d9 301c 	ldr.w	r3, [r9, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800042a:	f8d9 e028 	ldr.w	lr, [r9, #40]	; 0x28
 800042e:	689a      	ldr	r2, [r3, #8]
 8000430:	ebce 0001 	rsb	r0, lr, r1
 8000434:	4290      	cmp	r0, r2
 8000436:	f109 081c 	add.w	r8, r9, #28
 800043a:	d31c      	bcc.n	8000476 <VectorB0+0x76>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800043c:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 800043e:	68dc      	ldr	r4, [r3, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000440:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000442:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000444:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000448:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 800044c:	f8c9 101c 	str.w	r1, [r9, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8000450:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000452:	bf08      	it	eq
 8000454:	60ef      	streq	r7, [r5, #12]
 8000456:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 800045a:	6918      	ldr	r0, [r3, #16]
 800045c:	47a0      	blx	r4
 800045e:	f386 8811 	msr	BASEPRI, r6
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000462:	f8d9 301c 	ldr.w	r3, [r9, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000466:	6a69      	ldr	r1, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000468:	f8d9 e028 	ldr.w	lr, [r9, #40]	; 0x28
 800046c:	689a      	ldr	r2, [r3, #8]
 800046e:	ebce 0001 	rsb	r0, lr, r1
 8000472:	4282      	cmp	r2, r0
 8000474:	d9e2      	bls.n	800043c <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000476:	4543      	cmp	r3, r8
 8000478:	d008      	beq.n	800048c <VectorB0+0x8c>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 800047a:	4472      	add	r2, lr
 800047c:	1a52      	subs	r2, r2, r1
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800047e:	2a01      	cmp	r2, #1
 8000480:	bf98      	it	ls
 8000482:	2202      	movls	r2, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  }
  port_timer_set_alarm(now + delta);
 8000488:	440a      	add	r2, r1
 800048a:	635a      	str	r2, [r3, #52]	; 0x34
 800048c:	2300      	movs	r3, #0
 800048e:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8000492:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000496:	f7ff bf53 	b.w	8000340 <_port_irq_epilogue>
 800049a:	bf00      	nop
 800049c:	2000b2d0 	.word	0x2000b2d0

080004a0 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80004a0:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80004a4:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80004a6:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004aa:	2300      	movs	r3, #0
 80004ac:	f383 8811 	msr	BASEPRI, r3
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
	...

080004c0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 80004c0:	b410      	push	{r4}
 80004c2:	2320      	movs	r3, #32
 80004c4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80004c8:	4c09      	ldr	r4, [pc, #36]	; (80004f0 <chCoreAlloc+0x30>)
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <chCoreAlloc+0x34>)
 80004cc:	6822      	ldr	r2, [r4, #0]
 80004ce:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 80004d0:	1dc3      	adds	r3, r0, #7
 80004d2:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80004d6:	1a89      	subs	r1, r1, r2
 80004d8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 80004da:	bf9d      	ittte	ls
 80004dc:	189b      	addls	r3, r3, r2
 80004de:	6023      	strls	r3, [r4, #0]

  return p;
 80004e0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 80004e2:	2000      	movhi	r0, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 80004ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	20000cc8 	.word	0x20000cc8
 80004f4:	2000b464 	.word	0x2000b464
	...

08000500 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000500:	b410      	push	{r4}
 8000502:	2320      	movs	r3, #32
 8000504:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000508:	7f03      	ldrb	r3, [r0, #28]
 800050a:	2b07      	cmp	r3, #7
 800050c:	d80e      	bhi.n	800052c <wakeup+0x2c>
 800050e:	e8df f003 	tbb	[pc, r3]
 8000512:	0d27      	.short	0x0d27
 8000514:	0408230d 	.word	0x0408230d
 8000518:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800051a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800051c:	6893      	ldr	r3, [r2, #8]
 800051e:	3301      	adds	r3, #1
 8000520:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000522:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000526:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000528:	6802      	ldr	r2, [r0, #0]
 800052a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800052c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000530:	2200      	movs	r2, #0
 8000532:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000536:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000538:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800053a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800053c:	689a      	ldr	r2, [r3, #8]
 800053e:	428a      	cmp	r2, r1
 8000540:	d2fb      	bcs.n	800053a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000546:	6003      	str	r3, [r0, #0]
 8000548:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800054a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800054c:	6058      	str	r0, [r3, #4]
 800054e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000556:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8000558:	6a03      	ldr	r3, [r0, #32]
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	e7e5      	b.n	800052c <wakeup+0x2c>
 8000560:	2300      	movs	r3, #0
 8000562:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	2000b2d0 	.word	0x2000b2d0

08000570 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000570:	2200      	movs	r2, #0
 8000572:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000576:	b410      	push	{r4}
 8000578:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800057a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800057c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800057e:	689a      	ldr	r2, [r3, #8]
 8000580:	428a      	cmp	r2, r1
 8000582:	d2fb      	bcs.n	800057c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000588:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800058a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800058c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800058e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8000590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000b2d0 	.word	0x2000b2d0
 800059c:	00000000 	.word	0x00000000

080005a0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 80005a2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80005a4:	42a0      	cmp	r0, r4
 80005a6:	d021      	beq.n	80005ec <chEvtBroadcastFlagsI+0x4c>
 80005a8:	460e      	mov	r6, r1
 80005aa:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80005ac:	2500      	movs	r5, #0
 80005ae:	e002      	b.n	80005b6 <chEvtBroadcastFlagsI+0x16>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 80005b0:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80005b2:	42a7      	cmp	r7, r4
 80005b4:	d01a      	beq.n	80005ec <chEvtBroadcastFlagsI+0x4c>
  /*lint -restore*/
    elp->el_flags |= flags;
 80005b6:	68e3      	ldr	r3, [r4, #12]
 80005b8:	4333      	orrs	r3, r6
 80005ba:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80005bc:	b116      	cbz	r6, 80005c4 <chEvtBroadcastFlagsI+0x24>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 80005be:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80005c0:	4213      	tst	r3, r2
 80005c2:	d0f5      	beq.n	80005b0 <chEvtBroadcastFlagsI+0x10>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 80005c4:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80005c6:	68a3      	ldr	r3, [r4, #8]
 80005c8:	6b41      	ldr	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80005ca:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80005cc:	430b      	orrs	r3, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80005ce:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80005d0:	6343      	str	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80005d2:	d00c      	beq.n	80005ee <chEvtBroadcastFlagsI+0x4e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80005d4:	2a0b      	cmp	r2, #11
 80005d6:	d1eb      	bne.n	80005b0 <chEvtBroadcastFlagsI+0x10>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 80005d8:	6a02      	ldr	r2, [r0, #32]
 80005da:	4013      	ands	r3, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 80005dc:	429a      	cmp	r2, r3
 80005de:	d1e7      	bne.n	80005b0 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80005e0:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 80005e2:	f7ff ffc5 	bl	8000570 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 80005e6:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80005e8:	42a7      	cmp	r7, r4
 80005ea:	d1e4      	bne.n	80005b6 <chEvtBroadcastFlagsI+0x16>
 80005ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80005ee:	6a02      	ldr	r2, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80005f0:	4213      	tst	r3, r2
 80005f2:	d0dd      	beq.n	80005b0 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80005f4:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 80005f6:	f7ff ffbb 	bl	8000570 <chSchReadyI>
 80005fa:	e7f4      	b.n	80005e6 <chEvtBroadcastFlagsI+0x46>
 80005fc:	0000      	movs	r0, r0
	...

08000600 <serve_interrupt>:
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8000600:	f644 6374 	movw	r3, #20084	; 0x4e74
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8000604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8000608:	58c6      	ldr	r6, [r0, r3]
  uint16_t cr1 = u->CR1;
 800060a:	f8d6 a00c 	ldr.w	sl, [r6, #12]
  uint16_t sr = u->SR;
 800060e:	6833      	ldr	r3, [r6, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8000610:	05da      	lsls	r2, r3, #23
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8000612:	b082      	sub	sp, #8
 8000614:	4605      	mov	r5, r0
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8000616:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8000618:	f100 8082 	bmi.w	8000720 <serve_interrupt+0x120>
 800061c:	2320      	movs	r3, #32
 800061e:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000622:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000626:	d04a      	beq.n	80006be <serve_interrupt+0xbe>
    sts |= SD_PARITY_ERROR;
  if (sr & USART_SR_FE)
    sts |= SD_FRAMING_ERROR;
  if (sr & USART_SR_NE)
    sts |= SD_NOISE_ERROR;
  chnAddFlagsI(sdp, sts);
 8000628:	f105 0804 	add.w	r8, r5, #4
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 800062c:	f105 070c 	add.w	r7, r5, #12

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000630:	f04f 0900 	mov.w	r9, #0
 8000634:	e007      	b.n	8000646 <serve_interrupt+0x46>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8000636:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8000638:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 800063a:	d41d      	bmi.n	8000678 <serve_interrupt+0x78>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800063c:	6834      	ldr	r4, [r6, #0]
 800063e:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000640:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000644:	d03b      	beq.n	80006be <serve_interrupt+0xbe>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000646:	0723      	lsls	r3, r4, #28
 8000648:	d0f5      	beq.n	8000636 <serve_interrupt+0x36>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 800064a:	f014 0f08 	tst.w	r4, #8
 800064e:	bf0c      	ite	eq
 8000650:	2100      	moveq	r1, #0
 8000652:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8000654:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 8000656:	bf48      	it	mi
 8000658:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 800065c:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 800065e:	bf48      	it	mi
 8000660:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8000664:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8000666:	bf48      	it	mi
 8000668:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800066c:	4640      	mov	r0, r8
 800066e:	f7ff ff97 	bl	80005a0 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8000672:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8000674:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000676:	d5e1      	bpl.n	800063c <serve_interrupt+0x3c>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8000678:	696a      	ldr	r2, [r5, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800067a:	2a00      	cmp	r2, #0
 800067c:	d03e      	beq.n	80006fc <serve_interrupt+0xfc>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 800067e:	6a2a      	ldr	r2, [r5, #32]
 8000680:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000682:	428a      	cmp	r2, r1
 8000684:	d044      	beq.n	8000710 <serve_interrupt+0x110>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8000686:	6969      	ldr	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8000688:	1c50      	adds	r0, r2, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800068a:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 800068c:	6228      	str	r0, [r5, #32]

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800068e:	6169      	str	r1, [r5, #20]
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8000690:	7013      	strb	r3, [r2, #0]
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
 8000692:	6a2a      	ldr	r2, [r5, #32]
 8000694:	69eb      	ldr	r3, [r5, #28]
 8000696:	429a      	cmp	r2, r3
 8000698:	d301      	bcc.n	800069e <serve_interrupt+0x9e>
    iqp->q_wrptr = iqp->q_buffer;
 800069a:	69ab      	ldr	r3, [r5, #24]
 800069c:	622b      	str	r3, [r5, #32]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800069e:	68eb      	ldr	r3, [r5, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80006a0:	429f      	cmp	r7, r3
 80006a2:	d0cb      	beq.n	800063c <serve_interrupt+0x3c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	60ea      	str	r2, [r5, #12]
  (void) chSchReadyI(tp);
 80006a8:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 80006aa:	6057      	str	r7, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80006ac:	f8c3 9020 	str.w	r9, [r3, #32]
  (void) chSchReadyI(tp);
 80006b0:	f7ff ff5e 	bl	8000570 <chSchReadyI>
    if (sr & USART_SR_RXNE)
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 80006b4:	6834      	ldr	r4, [r6, #0]
 80006b6:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80006b8:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80006bc:	d1c3      	bne.n	8000646 <serve_interrupt+0x46>
 80006be:	2300      	movs	r3, #0
 80006c0:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80006c4:	f01a 0f80 	tst.w	sl, #128	; 0x80
 80006c8:	d001      	beq.n	80006ce <serve_interrupt+0xce>
 80006ca:	0622      	lsls	r2, r4, #24
 80006cc:	d437      	bmi.n	800073e <serve_interrupt+0x13e>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 80006ce:	0663      	lsls	r3, r4, #25
 80006d0:	d511      	bpl.n	80006f6 <serve_interrupt+0xf6>
 80006d2:	2320      	movs	r3, #32
 80006d4:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80006d8:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80006da:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80006dc:	429a      	cmp	r2, r3
 80006de:	d054      	beq.n	800078a <serve_interrupt+0x18a>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80006e0:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80006e4:	ea0a 0303 	and.w	r3, sl, r3
    u->SR = ~USART_SR_TC;
 80006e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80006ec:	60f3      	str	r3, [r6, #12]
 80006ee:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 80006f0:	6032      	str	r2, [r6, #0]
 80006f2:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }
}
 80006f6:	b002      	add	sp, #8
 80006f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fc:	2104      	movs	r1, #4
 80006fe:	4640      	mov	r0, r8
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	f7ff ff4d 	bl	80005a0 <chEvtBroadcastFlagsI>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8000706:	6a2a      	ldr	r2, [r5, #32]
 8000708:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800070a:	9b01      	ldr	r3, [sp, #4]
 800070c:	428a      	cmp	r2, r1
 800070e:	d1ba      	bne.n	8000686 <serve_interrupt+0x86>
 8000710:	6969      	ldr	r1, [r5, #20]
 8000712:	2900      	cmp	r1, #0
 8000714:	d0b7      	beq.n	8000686 <serve_interrupt+0x86>
 8000716:	4640      	mov	r0, r8
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	f7ff ff41 	bl	80005a0 <chEvtBroadcastFlagsI>
 800071e:	e78d      	b.n	800063c <serve_interrupt+0x3c>
 8000720:	2320      	movs	r3, #32
 8000722:	f383 8811 	msr	BASEPRI, r3
 8000726:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072a:	3004      	adds	r0, #4
 800072c:	f7ff ff38 	bl	80005a0 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8000730:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8000734:	6033      	str	r3, [r6, #0]
 8000736:	2300      	movs	r3, #0
 8000738:	f383 8811 	msr	BASEPRI, r3
 800073c:	e76e      	b.n	800061c <serve_interrupt+0x1c>
 800073e:	2320      	movs	r3, #32
 8000740:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000744:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000746:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000748:	429a      	cmp	r2, r3
 800074a:	d026      	beq.n	800079a <serve_interrupt+0x19a>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800074c:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800074e:	6c29      	ldr	r1, [r5, #64]	; 0x40
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8000750:	1c58      	adds	r0, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8000752:	3201      	adds	r2, #1
 8000754:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8000756:	64a8      	str	r0, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8000758:	4288      	cmp	r0, r1
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800075a:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 800075c:	d301      	bcc.n	8000762 <serve_interrupt+0x162>
    oqp->q_rdptr = oqp->q_buffer;
 800075e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000760:	64ab      	str	r3, [r5, #72]	; 0x48
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000762:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 8000764:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8000768:	4293      	cmp	r3, r2
 800076a:	d009      	beq.n	8000780 <serve_interrupt+0x180>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800076c:	6819      	ldr	r1, [r3, #0]
 800076e:	6329      	str	r1, [r5, #48]	; 0x30

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000770:	f04f 0e00 	mov.w	lr, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000774:	604a      	str	r2, [r1, #4]
  (void) chSchReadyI(tp);
 8000776:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000778:	f8c3 e020 	str.w	lr, [r3, #32]
  (void) chSchReadyI(tp);
 800077c:	f7ff fef8 	bl	8000570 <chSchReadyI>
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 8000780:	6077      	str	r7, [r6, #4]
 8000782:	2300      	movs	r3, #0
 8000784:	f383 8811 	msr	BASEPRI, r3
 8000788:	e7a1      	b.n	80006ce <serve_interrupt+0xce>
 800078a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0a7      	beq.n	80006e0 <serve_interrupt+0xe0>
 8000790:	1d28      	adds	r0, r5, #4
 8000792:	2110      	movs	r1, #16
 8000794:	f7ff ff04 	bl	80005a0 <chEvtBroadcastFlagsI>
 8000798:	e7a2      	b.n	80006e0 <serve_interrupt+0xe0>
 800079a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800079c:	2a00      	cmp	r2, #0
 800079e:	d0d5      	beq.n	800074c <serve_interrupt+0x14c>
 80007a0:	1d28      	adds	r0, r5, #4
 80007a2:	2108      	movs	r1, #8
 80007a4:	f7ff fefc 	bl	80005a0 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 80007a8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80007ac:	ea0a 0303 	and.w	r3, sl, r3
 80007b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b4:	60f3      	str	r3, [r6, #12]
 80007b6:	e7e4      	b.n	8000782 <serve_interrupt+0x182>
	...

080007c0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80007c0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);
 80007c2:	4803      	ldr	r0, [pc, #12]	; (80007d0 <VectorD8+0x10>)
 80007c4:	f7ff ff1c 	bl	8000600 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 80007c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 80007cc:	f7ff bdb8 	b.w	8000340 <_port_irq_epilogue>
 80007d0:	20006410 	.word	0x20006410
	...

080007e0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 80007e0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);
 80007e2:	4803      	ldr	r0, [pc, #12]	; (80007f0 <VectorD4+0x10>)
 80007e4:	f7ff ff0c 	bl	8000600 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 80007e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 80007ec:	f7ff bda8 	b.w	8000340 <_port_irq_epilogue>
 80007f0:	20001598 	.word	0x20001598
	...

08000800 <_idle_thread.lto_priv.22>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000800:	e7fe      	b.n	8000800 <_idle_thread.lto_priv.22>
 8000802:	bf00      	nop
	...

08000810 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000810:	e7fe      	b.n	8000810 <BusFault_Handler>
 8000812:	bf00      	nop
	...

08000820 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000822:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000824:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000826:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8000828:	6814      	ldr	r4, [r2, #0]
  otp->p_state = newstate;
 800082a:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800082c:	2501      	movs	r5, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 800082e:	6063      	str	r3, [r4, #4]
 8000830:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000832:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8000834:	4610      	mov	r0, r2
}
 8000836:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000838:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800083a:	f7ff bd29 	b.w	8000290 <_port_switch>
 800083e:	bf00      	nop
 8000840:	2000b2d0 	.word	0x2000b2d0
	...

08000850 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000852:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000854:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000856:	d047      	beq.n	80008e8 <chSchGoSleepTimeoutS+0x98>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8000858:	4c3e      	ldr	r4, [pc, #248]	; (8000954 <chSchGoSleepTimeoutS+0x104>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800085a:	4a3f      	ldr	r2, [pc, #252]	; (8000958 <chSchGoSleepTimeoutS+0x108>)
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 800085c:	69a3      	ldr	r3, [r4, #24]
 800085e:	9305      	str	r3, [sp, #20]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000860:	4625      	mov	r5, r4
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000862:	2901      	cmp	r1, #1
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000864:	f855 3f1c 	ldr.w	r3, [r5, #28]!
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000868:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 800086c:	bf98      	it	ls
 800086e:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000870:	42ab      	cmp	r3, r5
 8000872:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8000876:	9204      	str	r2, [sp, #16]
 8000878:	4686      	mov	lr, r0
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800087a:	d055      	beq.n	8000928 <chSchGoSleepTimeoutS+0xd8>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 800087c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (delta < ch.vtlist.vt_next->vt_delta) {
 800087e:	6898      	ldr	r0, [r3, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000880:	4431      	add	r1, r6
 8000882:	1a8a      	subs	r2, r1, r2
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000884:	4282      	cmp	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000886:	bf38      	it	cc
 8000888:	f8cc 1034 	strcc.w	r1, [ip, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800088c:	4282      	cmp	r2, r0
 800088e:	d904      	bls.n	800089a <chSchGoSleepTimeoutS+0x4a>
    delta -= p->vt_delta;
    p = p->vt_next;
 8000890:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8000892:	1a12      	subs	r2, r2, r0
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8000894:	6898      	ldr	r0, [r3, #8]
 8000896:	4290      	cmp	r0, r2
 8000898:	d3fa      	bcc.n	8000890 <chSchGoSleepTimeoutS+0x40>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800089a:	6859      	ldr	r1, [r3, #4]
 800089c:	9102      	str	r1, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 800089e:	af01      	add	r7, sp, #4
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 80008a0:	9301      	str	r3, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 80008a2:	600f      	str	r7, [r1, #0]
  p->vt_prev = vtp;
 80008a4:	605f      	str	r7, [r3, #4]
  vtp->vt_delta = delta
 80008a6:	9203      	str	r2, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80008a8:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80008aa:	f04f 30ff 	mov.w	r0, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80008ae:	1a8a      	subs	r2, r1, r2
 80008b0:	609a      	str	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80008b2:	6260      	str	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 80008b4:	4670      	mov	r0, lr
 80008b6:	f7ff ffb3 	bl	8000820 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80008ba:	9b04      	ldr	r3, [sp, #16]
 80008bc:	b183      	cbz	r3, 80008e0 <chSchGoSleepTimeoutS+0x90>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 80008be:	69e3      	ldr	r3, [r4, #28]
 80008c0:	4a24      	ldr	r2, [pc, #144]	; (8000954 <chSchGoSleepTimeoutS+0x104>)
 80008c2:	42bb      	cmp	r3, r7
 80008c4:	d017      	beq.n	80008f6 <chSchGoSleepTimeoutS+0xa6>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 80008c6:	9a02      	ldr	r2, [sp, #8]
 80008c8:	9b01      	ldr	r3, [sp, #4]
 80008ca:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 80008cc:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 80008ce:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 80008d0:	42ab      	cmp	r3, r5
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 80008d2:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 80008d4:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 80008d6:	d003      	beq.n	80008e0 <chSchGoSleepTimeoutS+0x90>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 80008d8:	6899      	ldr	r1, [r3, #8]
 80008da:	9a03      	ldr	r2, [sp, #12]
 80008dc:	440a      	add	r2, r1
 80008de:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 80008e0:	69a3      	ldr	r3, [r4, #24]
}
 80008e2:	6a18      	ldr	r0, [r3, #32]
 80008e4:	b007      	add	sp, #28
 80008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e8:	4c1a      	ldr	r4, [pc, #104]	; (8000954 <chSchGoSleepTimeoutS+0x104>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80008ea:	f7ff ff99 	bl	8000820 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 80008ee:	69a3      	ldr	r3, [r4, #24]
}
 80008f0:	6a18      	ldr	r0, [r3, #32]
 80008f2:	b007      	add	sp, #28
 80008f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 80008f6:	9901      	ldr	r1, [sp, #4]
 80008f8:	61d1      	str	r1, [r2, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 80008fa:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80008fc:	42a9      	cmp	r1, r5
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80008fe:	604d      	str	r5, [r1, #4]
  vtp->vt_func = NULL;
 8000900:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000902:	d022      	beq.n	800094a <chSchGoSleepTimeoutS+0xfa>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000904:	9803      	ldr	r0, [sp, #12]
 8000906:	688b      	ldr	r3, [r1, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000908:	6a92      	ldr	r2, [r2, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800090a:	4403      	add	r3, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800090c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000910:	608b      	str	r3, [r1, #8]
 8000912:	6a41      	ldr	r1, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000914:	1a8a      	subs	r2, r1, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000916:	4293      	cmp	r3, r2
 8000918:	d9e2      	bls.n	80008e0 <chSchGoSleepTimeoutS+0x90>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 800091a:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800091c:	2b01      	cmp	r3, #1
 800091e:	bf98      	it	ls
 8000920:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8000922:	440b      	add	r3, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000924:	6343      	str	r3, [r0, #52]	; 0x34
 8000926:	e7db      	b.n	80008e0 <chSchGoSleepTimeoutS+0x90>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8000928:	af01      	add	r7, sp, #4
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 800092a:	1988      	adds	r0, r1, r6
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 800092c:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800092e:	2302      	movs	r3, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8000930:	62a6      	str	r6, [r4, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8000932:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000934:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 8000936:	9103      	str	r1, [sp, #12]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8000938:	61e7      	str	r7, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 800093a:	6227      	str	r7, [r4, #32]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800093c:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000940:	f8cc 2010 	str.w	r2, [ip, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000944:	f8cc 300c 	str.w	r3, [ip, #12]
 8000948:	e7b4      	b.n	80008b4 <chSchGoSleepTimeoutS+0x64>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800094a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094e:	60d3      	str	r3, [r2, #12]
 8000950:	e7c6      	b.n	80008e0 <chSchGoSleepTimeoutS+0x90>
 8000952:	bf00      	nop
 8000954:	2000b2d0 	.word	0x2000b2d0
 8000958:	08000501 	.word	0x08000501
 800095c:	00000000 	.word	0x00000000

08000960 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8000960:	b169      	cbz	r1, 800097e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8000964:	b410      	push	{r4}
 8000966:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000968:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800096a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800096c:	2004      	movs	r0, #4
 800096e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8000972:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8000974:	6053      	str	r3, [r2, #4]
}
 8000976:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800097a:	f7ff bf69 	b.w	8000850 <chSchGoSleepTimeoutS>
}
 800097e:	f04f 30ff 	mov.w	r0, #4294967295
 8000982:	4770      	bx	lr
 8000984:	2000b2d0 	.word	0x2000b2d0
	...

08000990 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8000990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000994:	b083      	sub	sp, #12
 8000996:	4604      	mov	r4, r0
 8000998:	468b      	mov	fp, r1
 800099a:	4615      	mov	r5, r2
 800099c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800099e:	69c7      	ldr	r7, [r0, #28]
 80009a0:	f04f 0820 	mov.w	r8, #32
 80009a4:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 80009a8:	2600      	movs	r6, #0
 80009aa:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 80009ac:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80009ae:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 80009b2:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80009b4:	b1fb      	cbz	r3, 80009f6 <chOQWriteTimeout+0x66>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80009b6:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80009b8:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80009ba:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80009bc:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 80009be:	6161      	str	r1, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 80009c0:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80009c2:	f89b 3000 	ldrb.w	r3, [fp]
 80009c6:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 80009c8:	6923      	ldr	r3, [r4, #16]
 80009ca:	6962      	ldr	r2, [r4, #20]
 80009cc:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 80009ce:	bf24      	itt	cs
 80009d0:	68e3      	ldrcs	r3, [r4, #12]
 80009d2:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 80009d4:	b107      	cbz	r7, 80009d8 <chOQWriteTimeout+0x48>
      nfy(oqp);
 80009d6:	47b8      	blx	r7
 80009d8:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 80009dc:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 80009de:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 80009e2:	d012      	beq.n	8000a0a <chOQWriteTimeout+0x7a>
 80009e4:	f388 8811 	msr	BASEPRI, r8
 80009e8:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80009ea:	46d3      	mov	fp, sl
 80009ec:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 80009f0:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1df      	bne.n	80009b6 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 80009f6:	4620      	mov	r0, r4
 80009f8:	9901      	ldr	r1, [sp, #4]
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	f7ff ffb0 	bl	8000960 <chThdEnqueueTimeoutS>
 8000a00:	9b00      	ldr	r3, [sp, #0]
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d0d2      	beq.n	80009ac <chOQWriteTimeout+0x1c>
 8000a06:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8000a0a:	4630      	mov	r0, r6
 8000a0c:	b003      	add	sp, #12
 8000a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a12:	bf00      	nop
	...

08000a20 <writet.lto_priv.31>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000a20:	3030      	adds	r0, #48	; 0x30
 8000a22:	f7ff bfb5 	b.w	8000990 <chOQWriteTimeout>
 8000a26:	bf00      	nop
	...

08000a30 <write.lto_priv.25>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000a30:	3030      	adds	r0, #48	; 0x30
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	f7ff bfab 	b.w	8000990 <chOQWriteTimeout>
 8000a3a:	bf00      	nop
 8000a3c:	0000      	movs	r0, r0
	...

08000a40 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8000a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a42:	4604      	mov	r4, r0
 8000a44:	460f      	mov	r7, r1
 8000a46:	4616      	mov	r6, r2
 8000a48:	2320      	movs	r3, #32
 8000a4a:	f383 8811 	msr	BASEPRI, r3
 8000a4e:	e003      	b.n	8000a58 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000a50:	f7ff ff86 	bl	8000960 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8000a54:	2800      	cmp	r0, #0
 8000a56:	db19      	blt.n	8000a8c <chOQPutTimeout+0x4c>
 8000a58:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	d0f6      	beq.n	8000a50 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8000a62:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000a64:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000a66:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000a68:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000a6a:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000a6c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000a6e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000a70:	6923      	ldr	r3, [r4, #16]
 8000a72:	6962      	ldr	r2, [r4, #20]
 8000a74:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000a76:	bf24      	itt	cs
 8000a78:	68e3      	ldrcs	r3, [r4, #12]
 8000a7a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8000a7c:	69e3      	ldr	r3, [r4, #28]
 8000a7e:	b10b      	cbz	r3, 8000a84 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8000a80:	4620      	mov	r0, r4
 8000a82:	4798      	blx	r3
 8000a84:	2000      	movs	r0, #0
 8000a86:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8000a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a8c:	f385 8811 	msr	BASEPRI, r5
 8000a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a92:	bf00      	nop
	...

08000aa0 <putt.lto_priv.29>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000aa0:	3030      	adds	r0, #48	; 0x30
 8000aa2:	f7ff bfcd 	b.w	8000a40 <chOQPutTimeout>
 8000aa6:	bf00      	nop
	...

08000ab0 <put.lto_priv.27>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000ab0:	3030      	adds	r0, #48	; 0x30
 8000ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab6:	f7ff bfc3 	b.w	8000a40 <chOQPutTimeout>
 8000aba:	bf00      	nop
 8000abc:	0000      	movs	r0, r0
	...

08000ac0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8000ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	4689      	mov	r9, r1
 8000aca:	4693      	mov	fp, r2
 8000acc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8000ace:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000ad2:	2720      	movs	r7, #32
 8000ad4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8000ad8:	2600      	movs	r6, #0
 8000ada:	9701      	str	r7, [sp, #4]
 8000adc:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 8000ade:	f1b8 0f00 	cmp.w	r8, #0
 8000ae2:	d005      	beq.n	8000af0 <chIQReadTimeout+0x30>
      nfy(iqp);
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	47c0      	blx	r8
 8000ae8:	e002      	b.n	8000af0 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8000aea:	f7ff ff39 	bl	8000960 <chThdEnqueueTimeoutS>
 8000aee:	b9e0      	cbnz	r0, 8000b2a <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8000af0:	68a7      	ldr	r7, [r4, #8]
 8000af2:	4620      	mov	r0, r4
 8000af4:	4629      	mov	r1, r5
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d0f7      	beq.n	8000aea <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8000afa:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000afc:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000afe:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000b00:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8000b02:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000b04:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000b06:	7813      	ldrb	r3, [r2, #0]
 8000b08:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8000b0c:	6923      	ldr	r3, [r4, #16]
 8000b0e:	69a2      	ldr	r2, [r4, #24]
 8000b10:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8000b12:	bf24      	itt	cs
 8000b14:	68e3      	ldrcs	r3, [r4, #12]
 8000b16:	61a3      	strcs	r3, [r4, #24]
 8000b18:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 8000b1c:	3601      	adds	r6, #1
    if (--n == 0U) {
 8000b1e:	45b3      	cmp	fp, r6
 8000b20:	d005      	beq.n	8000b2e <chIQReadTimeout+0x6e>
 8000b22:	9b01      	ldr	r3, [sp, #4]
 8000b24:	f383 8811 	msr	BASEPRI, r3
 8000b28:	e7d9      	b.n	8000ade <chIQReadTimeout+0x1e>
 8000b2a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 8000b2e:	4630      	mov	r0, r6
 8000b30:	b003      	add	sp, #12
 8000b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b36:	bf00      	nop
	...

08000b40 <readt.lto_priv.32>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000b40:	300c      	adds	r0, #12
 8000b42:	f7ff bfbd 	b.w	8000ac0 <chIQReadTimeout>
 8000b46:	bf00      	nop
	...

08000b50 <read.lto_priv.26>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000b50:	300c      	adds	r0, #12
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	f7ff bfb3 	b.w	8000ac0 <chIQReadTimeout>
 8000b5a:	bf00      	nop
 8000b5c:	0000      	movs	r0, r0
	...

08000b60 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	2320      	movs	r3, #32
 8000b64:	460e      	mov	r6, r1
 8000b66:	4604      	mov	r4, r0
 8000b68:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 8000b6c:	69c3      	ldr	r3, [r0, #28]
 8000b6e:	b12b      	cbz	r3, 8000b7c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8000b70:	4798      	blx	r3
 8000b72:	e003      	b.n	8000b7c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000b74:	f7ff fef4 	bl	8000960 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	db15      	blt.n	8000ba8 <chIQGetTimeout+0x48>
 8000b7c:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000b7e:	4620      	mov	r0, r4
 8000b80:	4631      	mov	r1, r6
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	d0f6      	beq.n	8000b74 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000b86:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000b88:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8000b8a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000b8c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000b8e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8000b90:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000b92:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8000b94:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8000b96:	bf28      	it	cs
 8000b98:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000b9a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8000b9c:	bf28      	it	cs
 8000b9e:	61a3      	strcs	r3, [r4, #24]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8000ba6:	bd70      	pop	{r4, r5, r6, pc}
 8000ba8:	f385 8811 	msr	BASEPRI, r5
 8000bac:	bd70      	pop	{r4, r5, r6, pc}
 8000bae:	bf00      	nop

08000bb0 <gett.lto_priv.30>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000bb0:	300c      	adds	r0, #12
 8000bb2:	f7ff bfd5 	b.w	8000b60 <chIQGetTimeout>
 8000bb6:	bf00      	nop
	...

08000bc0 <get.lto_priv.28>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000bc0:	300c      	adds	r0, #12
 8000bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc6:	f7ff bfcb 	b.w	8000b60 <chIQGetTimeout>
 8000bca:	bf00      	nop
 8000bcc:	0000      	movs	r0, r0
	...

08000bd0 <strcpy>:
    return len;
}

char *strcpy(char *dest, const char *src){
  unsigned i;
  for (i=0; src[i] != '\0'; ++i)
 8000bd0:	780b      	ldrb	r3, [r1, #0]
 8000bd2:	b173      	cbz	r3, 8000bf2 <strcpy+0x22>
    int len;
    for (len = 0; str[len]; len++);
    return len;
}

char *strcpy(char *dest, const char *src){
 8000bd4:	b410      	push	{r4}
  unsigned i;
  for (i=0; src[i] != '\0'; ++i)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	1e44      	subs	r4, r0, #1
    dest[i] = src[i];
 8000bda:	f804 3f01 	strb.w	r3, [r4, #1]!
    return len;
}

char *strcpy(char *dest, const char *src){
  unsigned i;
  for (i=0; src[i] != '\0'; ++i)
 8000bde:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000be2:	3201      	adds	r2, #1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f8      	bne.n	8000bda <strcpy+0xa>
    dest[i] = src[i];
  dest[i] = '\0';
 8000be8:	2300      	movs	r3, #0
 8000bea:	5483      	strb	r3, [r0, r2]
  return dest;
}
 8000bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bf0:	4770      	bx	lr
    return len;
}

char *strcpy(char *dest, const char *src){
  unsigned i;
  for (i=0; src[i] != '\0'; ++i)
 8000bf2:	461a      	mov	r2, r3
    dest[i] = src[i];
  dest[i] = '\0';
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	5483      	strb	r3, [r0, r2]
  return dest;
}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	0000      	movs	r0, r0
	...

08000c00 <strlen>:
/**
 * Return length of str as char (es. '47')
 */
int strlen(const char * str){
    int len;
    for (len = 0; str[len]; len++);
 8000c00:	7803      	ldrb	r3, [r0, #0]
 8000c02:	b13b      	cbz	r3, 8000c14 <strlen+0x14>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2000      	movs	r0, #0
 8000c08:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000c0c:	3001      	adds	r0, #1
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	d1fa      	bne.n	8000c08 <strlen+0x8>
 8000c12:	4770      	bx	lr
 8000c14:	4618      	mov	r0, r3
    return len;
}
 8000c16:	4770      	bx	lr
	...

08000c20 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8000c20:	b40e      	push	{r1, r2, r3}
 8000c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	ad0f      	add	r5, sp, #60	; 0x3c
 8000c2a:	f10d 030d 	add.w	r3, sp, #13
 8000c2e:	f855 9b04 	ldr.w	r9, [r5], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8000c32:	9502      	str	r5, [sp, #8]
 8000c34:	aa03      	add	r2, sp, #12
 8000c36:	1a9b      	subs	r3, r3, r2
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8000c38:	4682      	mov	sl, r0
 8000c3a:	9301      	str	r3, [sp, #4]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8000c3c:	f04f 0800 	mov.w	r8, #0
 8000c40:	46cb      	mov	fp, r9
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8000c42:	f89b 1000 	ldrb.w	r1, [fp]
 8000c46:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8000c4a:	b179      	cbz	r1, 8000c6c <chprintf+0x4c>
      return n;
    if (c != '%') {
 8000c4c:	2925      	cmp	r1, #37	; 0x25
 8000c4e:	d013      	beq.n	8000c78 <chprintf+0x58>
      streamPut(chp, (uint8_t)c);
 8000c50:	f8da 2000 	ldr.w	r2, [sl]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8000c54:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8000c56:	6892      	ldr	r2, [r2, #8]
 8000c58:	4650      	mov	r0, sl
 8000c5a:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8000c5c:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
 8000c60:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8000c64:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8000c68:	2900      	cmp	r1, #0
 8000c6a:	d1ef      	bne.n	8000c4c <chprintf+0x2c>
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8000c6c:	4640      	mov	r0, r8
 8000c6e:	b006      	add	sp, #24
 8000c70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c74:	b003      	add	sp, #12
 8000c76:	4770      	bx	lr
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8000c78:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8000c7c:	2a2d      	cmp	r2, #45	; 0x2d
 8000c7e:	bf03      	ittte	eq
 8000c80:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 8000c84:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 8000c88:	f04f 0901 	moveq.w	r9, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8000c8c:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8000c90:	2a30      	cmp	r2, #48	; 0x30
 8000c92:	bf03      	ittte	eq
 8000c94:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8000c96:	3301      	addeq	r3, #1
      filler = '0';
 8000c98:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8000c9a:	2720      	movne	r7, #32
 8000c9c:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	e006      	b.n	8000cb0 <chprintf+0x90>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8000ca2:	782b      	ldrb	r3, [r5, #0]
 8000ca4:	3504      	adds	r5, #4
 8000ca6:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 8000caa:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8000cae:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8000cb0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8000cb8:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8000cba:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8000cbe:	d9f2      	bls.n	8000ca6 <chprintf+0x86>
        c -= '0';
      else if (c == '*')
 8000cc0:	2a2a      	cmp	r2, #42	; 0x2a
 8000cc2:	d0ee      	beq.n	8000ca2 <chprintf+0x82>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8000cc4:	2a2e      	cmp	r2, #46	; 0x2e
 8000cc6:	f04f 0100 	mov.w	r1, #0
 8000cca:	d043      	beq.n	8000d54 <chprintf+0x134>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8000ccc:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8000cd0:	2b4c      	cmp	r3, #76	; 0x4c
 8000cd2:	d04e      	beq.n	8000d72 <chprintf+0x152>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8000cd4:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 8000cd8:	2834      	cmp	r0, #52	; 0x34
 8000cda:	f200 80f7 	bhi.w	8000ecc <chprintf+0x2ac>
 8000cde:	e8df f010 	tbh	[pc, r0, lsl #1]
 8000ce2:	00ea      	.short	0x00ea
 8000ce4:	00f500f5 	.word	0x00f500f5
 8000ce8:	00f500f5 	.word	0x00f500f5
 8000cec:	00f500ea 	.word	0x00f500ea
 8000cf0:	00f500f5 	.word	0x00f500f5
 8000cf4:	00f500f5 	.word	0x00f500f5
 8000cf8:	00f500e8 	.word	0x00f500e8
 8000cfc:	00f500f5 	.word	0x00f500f5
 8000d00:	00f500f5 	.word	0x00f500f5
 8000d04:	00f500dd 	.word	0x00f500dd
 8000d08:	00f200f5 	.word	0x00f200f5
 8000d0c:	00f500f5 	.word	0x00f500f5
 8000d10:	00f500f5 	.word	0x00f500f5
 8000d14:	00f500f5 	.word	0x00f500f5
 8000d18:	00f500f5 	.word	0x00f500f5
 8000d1c:	00f500f5 	.word	0x00f500f5
 8000d20:	00ea00a1 	.word	0x00ea00a1
 8000d24:	00f500f5 	.word	0x00f500f5
 8000d28:	00f500f5 	.word	0x00f500f5
 8000d2c:	00f500ea 	.word	0x00f500ea
 8000d30:	00f500f5 	.word	0x00f500f5
 8000d34:	00f500f5 	.word	0x00f500f5
 8000d38:	00f500e8 	.word	0x00f500e8
 8000d3c:	00f500f5 	.word	0x00f500f5
 8000d40:	00f50071 	.word	0x00f50071
 8000d44:	00f500dd 	.word	0x00f500dd
 8000d48:	00f200f5 	.word	0x00f200f5
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8000d4c:	782b      	ldrb	r3, [r5, #0]
 8000d4e:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 8000d50:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8000d54:	f81b 2b01 	ldrb.w	r2, [fp], #1
        if (c >= '0' && c <= '9')
 8000d58:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8000d60:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8000d64:	d9f4      	bls.n	8000d50 <chprintf+0x130>
          c -= '0';
        else if (c == '*')
 8000d66:	2a2a      	cmp	r2, #42	; 0x2a
 8000d68:	d0f0      	beq.n	8000d4c <chprintf+0x12c>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8000d6a:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8000d6e:	2b4c      	cmp	r3, #76	; 0x4c
 8000d70:	d1b0      	bne.n	8000cd4 <chprintf+0xb4>
      is_long = TRUE;
      if (*fmt)
 8000d72:	f89b 3000 	ldrb.w	r3, [fp]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 80a8 	beq.w	8000ecc <chprintf+0x2ac>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8000d7c:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8000d80:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8000d84:	2a34      	cmp	r2, #52	; 0x34
 8000d86:	f200 80a0 	bhi.w	8000eca <chprintf+0x2aa>
 8000d8a:	e8df f002 	tbb	[pc, r2]
 8000d8e:	9e94      	.short	0x9e94
 8000d90:	949e9e9e 	.word	0x949e9e9e
 8000d94:	9e9e9e9e 	.word	0x9e9e9e9e
 8000d98:	9e9e929e 	.word	0x9e9e929e
 8000d9c:	879e9e9e 	.word	0x879e9e9e
 8000da0:	9e9c9e9e 	.word	0x9e9c9e9e
 8000da4:	9e9e9e9e 	.word	0x9e9e9e9e
 8000da8:	9e9e9e9e 	.word	0x9e9e9e9e
 8000dac:	9e944b9e 	.word	0x9e944b9e
 8000db0:	949e9e9e 	.word	0x949e9e9e
 8000db4:	9e9e9e9e 	.word	0x9e9e9e9e
 8000db8:	9e9e929e 	.word	0x9e9e929e
 8000dbc:	879e1b9e 	.word	0x879e1b9e
 8000dc0:	9e9e      	.short	0x9e9e
 8000dc2:	9c          	.byte	0x9c
 8000dc3:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8000dc4:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 8000dc6:	4b5a      	ldr	r3, [pc, #360]	; (8000f30 <chprintf+0x310>)
 8000dc8:	2c00      	cmp	r4, #0
 8000dca:	bf08      	it	eq
 8000dcc:	461c      	moveq	r4, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8000dce:	3504      	adds	r5, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8000dd0:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	f000 8094 	beq.w	8000f00 <chprintf+0x2e0>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 8096 	beq.w	8000f0a <chprintf+0x2ea>
 8000dde:	3901      	subs	r1, #1
 8000de0:	4620      	mov	r0, r4
 8000de2:	e001      	b.n	8000de8 <chprintf+0x1c8>
 8000de4:	3901      	subs	r1, #1
 8000de6:	d403      	bmi.n	8000df0 <chprintf+0x1d0>
 8000de8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f9      	bne.n	8000de4 <chprintf+0x1c4>
 8000df0:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8000df2:	1a36      	subs	r6, r6, r0
 8000df4:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8000df6:	2720      	movs	r7, #32
 8000df8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8000dfc:	f1b9 0f00 	cmp.w	r9, #0
 8000e00:	d01f      	beq.n	8000e42 <chprintf+0x222>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	da34      	bge.n	8000e72 <chprintf+0x252>
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	f43f af1a 	beq.w	8000c42 <chprintf+0x22>
 8000e0e:	4634      	mov	r4, r6
      streamPut(chp, (uint8_t)filler);
 8000e10:	f8da 3000 	ldr.w	r3, [sl]
 8000e14:	4650      	mov	r0, sl
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8000e1c:	3c01      	subs	r4, #1
 8000e1e:	d1f7      	bne.n	8000e10 <chprintf+0x1f0>
 8000e20:	44b0      	add	r8, r6
 8000e22:	e70e      	b.n	8000c42 <chprintf+0x22>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8000e24:	682b      	ldr	r3, [r5, #0]
 8000e26:	f88d 300c 	strb.w	r3, [sp, #12]
 8000e2a:	9b01      	ldr	r3, [sp, #4]
 8000e2c:	3504      	adds	r5, #4
 8000e2e:	4618      	mov	r0, r3
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8000e30:	2720      	movs	r7, #32
 8000e32:	3b01      	subs	r3, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8000e34:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8000e36:	1a36      	subs	r6, r6, r0
 8000e38:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 8000e3c:	f1b9 0f00 	cmp.w	r9, #0
 8000e40:	d1df      	bne.n	8000e02 <chprintf+0x1e2>
 8000e42:	9300      	str	r3, [sp, #0]
      width = -width;
 8000e44:	f1c6 0900 	rsb	r9, r6, #0
    if (width < 0) {
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	d045      	beq.n	8000eda <chprintf+0x2ba>
      if (*s == '-' && filler == '0') {
 8000e4e:	7821      	ldrb	r1, [r4, #0]
 8000e50:	292d      	cmp	r1, #45	; 0x2d
 8000e52:	d047      	beq.n	8000ee4 <chprintf+0x2c4>
        streamPut(chp, (uint8_t)*s++);
        n++;
 8000e54:	464e      	mov	r6, r9
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8000e56:	f8da 3000 	ldr.w	r3, [sl]
 8000e5a:	4650      	mov	r0, sl
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4639      	mov	r1, r7
 8000e60:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8000e62:	3601      	adds	r6, #1
 8000e64:	d1f7      	bne.n	8000e56 <chprintf+0x236>
    }
    while (--i >= 0) {
 8000e66:	9b00      	ldr	r3, [sp, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	ebc9 0808 	rsb	r8, r9, r8
 8000e6e:	f6ff aee8 	blt.w	8000c42 <chprintf+0x22>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8000e72:	f8dd 9000 	ldr.w	r9, [sp]
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 8000e76:	f8da 3000 	ldr.w	r3, [sl]
 8000e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e7e:	689b      	ldr	r3, [r3, #8]
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8000e80:	f109 39ff 	add.w	r9, r9, #4294967295
      streamPut(chp, (uint8_t)*s++);
 8000e84:	4650      	mov	r0, sl
 8000e86:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8000e88:	f1b9 3fff 	cmp.w	r9, #4294967295
 8000e8c:	d1f3      	bne.n	8000e76 <chprintf+0x256>
 8000e8e:	9b00      	ldr	r3, [sp, #0]
 8000e90:	f108 0801 	add.w	r8, r8, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bfa8      	it	ge
 8000e98:	4498      	addge	r8, r3
 8000e9a:	e7b5      	b.n	8000e08 <chprintf+0x1e8>
 8000e9c:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8000e9e:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8000ea0:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8000ea2:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8000ea4:	f000 fe74 	bl	8001b90 <long_to_string_with_divisor.constprop.3>
 8000ea8:	ab03      	add	r3, sp, #12
 8000eaa:	1ac0      	subs	r0, r0, r3
 8000eac:	1e43      	subs	r3, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8000eae:	ac03      	add	r4, sp, #12
 8000eb0:	e7c1      	b.n	8000e36 <chprintf+0x216>
 8000eb2:	2208      	movs	r2, #8
 8000eb4:	e7f3      	b.n	8000e9e <chprintf+0x27e>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8000eb6:	6829      	ldr	r1, [r5, #0]
      if (l < 0) {
 8000eb8:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8000eba:	f105 0504 	add.w	r5, r5, #4
      if (l < 0) {
 8000ebe:	db2e      	blt.n	8000f1e <chprintf+0x2fe>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8000ec0:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8000ec2:	220a      	movs	r2, #10
 8000ec4:	e7ee      	b.n	8000ea4 <chprintf+0x284>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8000ec6:	2210      	movs	r2, #16
 8000ec8:	e7e9      	b.n	8000e9e <chprintf+0x27e>
 8000eca:	461a      	mov	r2, r3
 8000ecc:	9b01      	ldr	r3, [sp, #4]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8000ece:	f88d 200c 	strb.w	r2, [sp, #12]
 8000ed2:	4618      	mov	r0, r3
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8000ed4:	ac03      	add	r4, sp, #12
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	e7ad      	b.n	8000e36 <chprintf+0x216>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8000eda:	9b00      	ldr	r3, [sp, #0]
 8000edc:	2b00      	cmp	r3, #0
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 8000ede:	464e      	mov	r6, r9
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8000ee0:	dac7      	bge.n	8000e72 <chprintf+0x252>
 8000ee2:	e6ae      	b.n	8000c42 <chprintf+0x22>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8000ee4:	2f30      	cmp	r7, #48	; 0x30
 8000ee6:	d1b5      	bne.n	8000e54 <chprintf+0x234>
        streamPut(chp, (uint8_t)*s++);
 8000ee8:	f8da 3000 	ldr.w	r3, [sl]
 8000eec:	4650      	mov	r0, sl
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	4798      	blx	r3
 8000ef2:	9b00      	ldr	r3, [sp, #0]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	3401      	adds	r4, #1
        n++;
 8000ef8:	f108 0801 	add.w	r8, r8, #1
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	e7a9      	b.n	8000e54 <chprintf+0x234>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8000f00:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f47f af6b 	bne.w	8000de0 <chprintf+0x1c0>
 8000f0a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8000f0e:	f1b9 0f00 	cmp.w	r9, #0
 8000f12:	d10b      	bne.n	8000f2c <chprintf+0x30c>
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2720      	movs	r7, #32
 8000f1c:	e792      	b.n	8000e44 <chprintf+0x224>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8000f1e:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8000f20:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8000f22:	f88d 300c 	strb.w	r3, [sp, #12]
 8000f26:	f10d 000d 	add.w	r0, sp, #13
 8000f2a:	e7ca      	b.n	8000ec2 <chprintf+0x2a2>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8000f2c:	2720      	movs	r7, #32
 8000f2e:	e76b      	b.n	8000e08 <chprintf+0x1e8>
 8000f30:	08002760 	.word	0x08002760
	...

08000f40 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000f40:	4928      	ldr	r1, [pc, #160]	; (8000fe4 <__early_init+0xa4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000f42:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <__early_init+0xa8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000f44:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000f48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000f4c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000f4e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000f50:	680b      	ldr	r3, [r1, #0]
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000f58:	680a      	ldr	r2, [r1, #0]
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <__early_init+0xa4>)
 8000f5c:	0792      	lsls	r2, r2, #30
 8000f5e:	d5fb      	bpl.n	8000f58 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	f022 0203 	bic.w	r2, r2, #3
 8000f66:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	688b      	ldr	r3, [r1, #8]
 8000f70:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <__early_init+0xa4>)
 8000f72:	f013 030c 	ands.w	r3, r3, #12
 8000f76:	d1fa      	bne.n	8000f6e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000f78:	6811      	ldr	r1, [r2, #0]
 8000f7a:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8000f7e:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000f80:	6093      	str	r3, [r2, #8]
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000f82:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000f8a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000f8c:	4915      	ldr	r1, [pc, #84]	; (8000fe4 <__early_init+0xa4>)
 8000f8e:	0798      	lsls	r0, r3, #30
 8000f90:	d5fb      	bpl.n	8000f8a <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <__early_init+0xac>)
 8000f94:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8000f96:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <__early_init+0xa8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8000f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f9e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000fa0:	6853      	ldr	r3, [r2, #4]
 8000fa2:	0459      	lsls	r1, r3, #17
 8000fa4:	d5fc      	bpl.n	8000fa0 <__early_init+0x60>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000fa6:	490f      	ldr	r1, [pc, #60]	; (8000fe4 <__early_init+0xa4>)
 8000fa8:	680a      	ldr	r2, [r1, #0]
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <__early_init+0xa4>)
 8000fac:	0192      	lsls	r2, r2, #6
 8000fae:	d5fb      	bpl.n	8000fa8 <__early_init+0x68>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <__early_init+0xb0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8000fb2:	4910      	ldr	r1, [pc, #64]	; (8000ff4 <__early_init+0xb4>)
 8000fb4:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8000fb6:	f240 7102 	movw	r1, #1794	; 0x702
 8000fba:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	f042 0202 	orr.w	r2, r2, #2
 8000fc2:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	6893      	ldr	r3, [r2, #8]
 8000fc8:	4906      	ldr	r1, [pc, #24]	; (8000fe4 <__early_init+0xa4>)
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d1f9      	bne.n	8000fc6 <__early_init+0x86>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8000fd2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd8:	644b      	str	r3, [r1, #68]	; 0x44
 8000fda:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	664b      	str	r3, [r1, #100]	; 0x64
 8000fe2:	4770      	bx	lr
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000
 8000fec:	07015410 	.word	0x07015410
 8000ff0:	40023c00 	.word	0x40023c00
 8000ff4:	38881000 	.word	0x38881000
	...

08001000 <pwm_lld_start>:
 */
void pwm_lld_start(PWMDriver *pwmp) {
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8001000:	7803      	ldrb	r3, [r0, #0]
 8001002:	2b01      	cmp	r3, #1
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
 8001004:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8001006:	d052      	beq.n	80010ae <pwm_lld_start+0xae>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8001008:	6983      	ldr	r3, [r0, #24]
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 800100e:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8001010:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001018:	6841      	ldr	r1, [r0, #4]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 800101a:	6884      	ldr	r4, [r0, #8]
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 800101c:	68ca      	ldr	r2, [r1, #12]
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 800101e:	680e      	ldr	r6, [r1, #0]
 8001020:	6940      	ldr	r0, [r0, #20]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001022:	6acd      	ldr	r5, [r1, #44]	; 0x2c
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001024:	fbb0 f0f6 	udiv	r0, r0, r6
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001028:	f002 020f 	and.w	r2, r2, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 800102c:	3c01      	subs	r4, #1
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 800102e:	3801      	subs	r0, #1
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001030:	2a01      	cmp	r2, #1
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8001032:	6298      	str	r0, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8001034:	62dc      	str	r4, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001036:	605d      	str	r5, [r3, #4]

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001038:	d037      	beq.n	80010aa <pwm_lld_start+0xaa>
 800103a:	2a02      	cmp	r2, #2
 800103c:	d133      	bne.n	80010a6 <pwm_lld_start+0xa6>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC1P;
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC1E;
 800103e:	f042 0201 	orr.w	r2, r2, #1
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8001042:	6948      	ldr	r0, [r1, #20]
 8001044:	f000 000f 	and.w	r0, r0, #15
 8001048:	2801      	cmp	r0, #1
 800104a:	d029      	beq.n	80010a0 <pwm_lld_start+0xa0>
 800104c:	2802      	cmp	r0, #2
 800104e:	d025      	beq.n	800109c <pwm_lld_start+0x9c>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8001050:	69c8      	ldr	r0, [r1, #28]
 8001052:	f000 000f 	and.w	r0, r0, #15
 8001056:	2801      	cmp	r0, #1
 8001058:	d01d      	beq.n	8001096 <pwm_lld_start+0x96>
 800105a:	2802      	cmp	r0, #2
 800105c:	d019      	beq.n	8001092 <pwm_lld_start+0x92>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 800105e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001060:	f000 000f 	and.w	r0, r0, #15
 8001064:	2801      	cmp	r0, #1
 8001066:	d003      	beq.n	8001070 <pwm_lld_start+0x70>
 8001068:	2802      	cmp	r0, #2
 800106a:	d103      	bne.n	8001074 <pwm_lld_start+0x74>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC4P;
 800106c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC4E;
 8001070:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001074:	6b09      	ldr	r1, [r1, #48]	; 0x30
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 8001076:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8001078:	2501      	movs	r5, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 800107a:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 800107e:	2400      	movs	r4, #0
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8001080:	f44f 4000 	mov.w	r0, #32768	; 0x8000
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8001084:	2185      	movs	r1, #133	; 0x85
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8001086:	615d      	str	r5, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8001088:	611c      	str	r4, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 800108a:	60da      	str	r2, [r3, #12]
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 800108c:	6458      	str	r0, [r3, #68]	; 0x44
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 800108e:	6019      	str	r1, [r3, #0]
 8001090:	bdf0      	pop	{r4, r5, r6, r7, pc}
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC3P;
 8001092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
 8001096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800109a:	e7e0      	b.n	800105e <pwm_lld_start+0x5e>
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC2P;
 800109c:	f042 0220 	orr.w	r2, r2, #32
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
 80010a0:	f042 0210 	orr.w	r2, r2, #16
 80010a4:	e7d4      	b.n	8001050 <pwm_lld_start+0x50>
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
 80010a6:	2200      	movs	r2, #0
 80010a8:	e7cb      	b.n	8001042 <pwm_lld_start+0x42>
 80010aa:	2200      	movs	r2, #0
 80010ac:	e7c7      	b.n	800103e <pwm_lld_start+0x3e>
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <pwm_lld_start+0x134>)
 80010b0:	4298      	cmp	r0, r3
 80010b2:	d008      	beq.n	80010c6 <pwm_lld_start+0xc6>
#endif
    }
#endif

#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <pwm_lld_start+0x138>)
 80010b6:	4298      	cmp	r0, r3
 80010b8:	d025      	beq.n	8001106 <pwm_lld_start+0x106>
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80010ba:	6983      	ldr	r3, [r0, #24]
 80010bc:	f646 0268 	movw	r2, #26728	; 0x6868
 80010c0:	619a      	str	r2, [r3, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 80010c2:	61da      	str	r2, [r3, #28]
 80010c4:	e7a8      	b.n	8001018 <pwm_lld_start+0x18>

  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
      rccEnableTIM1(FALSE);
 80010c6:	4a1d      	ldr	r2, [pc, #116]	; (800113c <pwm_lld_start+0x13c>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <pwm_lld_start+0x140>)
 80010ca:	6c51      	ldr	r1, [r2, #68]	; 0x44
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      pwmp->clock = STM32_TIM1CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 80010cc:	4f1d      	ldr	r7, [pc, #116]	; (8001144 <pwm_lld_start+0x144>)

  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
      rccEnableTIM1(FALSE);
 80010ce:	f041 0101 	orr.w	r1, r1, #1
 80010d2:	6451      	str	r1, [r2, #68]	; 0x44
      rccResetTIM1();
 80010d4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80010d6:	2570      	movs	r5, #112	; 0x70
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010d8:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80010dc:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
 80010e0:	f04f 0e00 	mov.w	lr, #0
 80010e4:	f041 0101 	orr.w	r1, r1, #1
 80010e8:	6251      	str	r1, [r2, #36]	; 0x24
 80010ea:	f8c2 e024 	str.w	lr, [r2, #36]	; 0x24

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010ee:	f883 5319 	strb.w	r5, [r3, #793]	; 0x319
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010f2:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010f6:	601e      	str	r6, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010f8:	f883 531b 	strb.w	r5, [r3, #795]	; 0x31b
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010fc:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001100:	601c      	str	r4, [r3, #0]
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      pwmp->clock = STM32_TIM1CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 8001102:	6147      	str	r7, [r0, #20]
 8001104:	e7d9      	b.n	80010ba <pwm_lld_start+0xba>
    }
#endif

#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
      rccEnableTIM3(FALSE);
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <pwm_lld_start+0x13c>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <pwm_lld_start+0x140>)
 800110a:	6c19      	ldr	r1, [r3, #64]	; 0x40
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      pwmp->clock = STM32_TIM3CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 800110c:	4d0d      	ldr	r5, [pc, #52]	; (8001144 <pwm_lld_start+0x144>)
    }
#endif

#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
      rccEnableTIM3(FALSE);
 800110e:	f041 0102 	orr.w	r1, r1, #2
 8001112:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM3();
 8001114:	6a19      	ldr	r1, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001116:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 800111a:	2700      	movs	r7, #0
 800111c:	f041 0102 	orr.w	r1, r1, #2

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001120:	2670      	movs	r6, #112	; 0x70
 8001122:	6219      	str	r1, [r3, #32]
 8001124:	621f      	str	r7, [r3, #32]
 8001126:	f882 631d 	strb.w	r6, [r2, #797]	; 0x31d
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800112a:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800112e:	6014      	str	r4, [r2, #0]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      pwmp->clock = STM32_TIM3CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 8001130:	6145      	str	r5, [r0, #20]
 8001132:	e7c2      	b.n	80010ba <pwm_lld_start+0xba>
 8001134:	2000b294 	.word	0x2000b294
 8001138:	2000b2b0 	.word	0x2000b2b0
 800113c:	40023800 	.word	0x40023800
 8001140:	e000e100 	.word	0xe000e100
 8001144:	0501bd00 	.word	0x0501bd00
	...

08001150 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8001150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8001154:	f3c2 1c41 	ubfx	ip, r2, #5, #2
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001158:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800115c:	f3c2 0980 	ubfx	r9, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8001160:	f3c2 08c1 	ubfx	r8, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8001164:	2700      	movs	r7, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8001166:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800116a:	f04f 0b0f 	mov.w	fp, #15
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 800116e:	f04f 0a01 	mov.w	sl, #1
 8001172:	e00f      	b.n	8001194 <_pal_lld_setgroupmode+0x44>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001174:	6a04      	ldr	r4, [r0, #32]
 8001176:	ea24 0303 	bic.w	r3, r4, r3
 800117a:	431d      	orrs	r5, r3
 800117c:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800117e:	0849      	lsrs	r1, r1, #1
 8001180:	d039      	beq.n	80011f6 <_pal_lld_setgroupmode+0xa6>
      return;
    otyper <<= 1;
 8001182:	ea4f 0949 	mov.w	r9, r9, lsl #1
    ospeedr <<= 2;
 8001186:	ea4f 0888 	mov.w	r8, r8, lsl #2
    pupdr <<= 2;
 800118a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    moder <<= 2;
 800118e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8001192:	3701      	adds	r7, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 8001194:	07cb      	lsls	r3, r1, #31
 8001196:	d5f2      	bpl.n	800117e <_pal_lld_setgroupmode+0x2e>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001198:	6843      	ldr	r3, [r0, #4]
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 800119a:	fa0a f407 	lsl.w	r4, sl, r7
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800119e:	ea23 0304 	bic.w	r3, r3, r4
 80011a2:	ea43 0309 	orr.w	r3, r3, r9
 80011a6:	6043      	str	r3, [r0, #4]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 80011a8:	2503      	movs	r5, #3
 80011aa:	007c      	lsls	r4, r7, #1
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80011ac:	6883      	ldr	r3, [r0, #8]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 80011ae:	fa05 f404 	lsl.w	r4, r5, r4
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80011b2:	43e4      	mvns	r4, r4
 80011b4:	4023      	ands	r3, r4
 80011b6:	ea43 0308 	orr.w	r3, r3, r8
 80011ba:	6083      	str	r3, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80011bc:	68c5      	ldr	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80011be:	f007 0307 	and.w	r3, r7, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80011c2:	4025      	ands	r5, r4
 80011c4:	ea45 050c 	orr.w	r5, r5, ip
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80011c8:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 80011ca:	f1be 0f02 	cmp.w	lr, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80011ce:	60c5      	str	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80011d0:	fa02 f503 	lsl.w	r5, r2, r3
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 80011d4:	fa0b f303 	lsl.w	r3, fp, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 80011d8:	d00f      	beq.n	80011fa <_pal_lld_setgroupmode+0xaa>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80011da:	6806      	ldr	r6, [r0, #0]
 80011dc:	4034      	ands	r4, r6
 80011de:	ea44 040e 	orr.w	r4, r4, lr
        if (bit < 8)
 80011e2:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80011e4:	6004      	str	r4, [r0, #0]
        if (bit < 8)
 80011e6:	d9c5      	bls.n	8001174 <_pal_lld_setgroupmode+0x24>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80011e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80011ea:	ea24 0303 	bic.w	r3, r4, r3
 80011ee:	431d      	orrs	r5, r3
      }
    }
    mask >>= 1;
    if (!mask)
 80011f0:	0849      	lsrs	r1, r1, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80011f2:	6245      	str	r5, [r0, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 80011f4:	d1c5      	bne.n	8001182 <_pal_lld_setgroupmode+0x32>
 80011f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 80011fa:	2f07      	cmp	r7, #7
 80011fc:	d80a      	bhi.n	8001214 <_pal_lld_setgroupmode+0xc4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80011fe:	6a06      	ldr	r6, [r0, #32]
 8001200:	ea26 0303 	bic.w	r3, r6, r3
 8001204:	431d      	orrs	r5, r3
 8001206:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8001208:	6803      	ldr	r3, [r0, #0]
 800120a:	401c      	ands	r4, r3
 800120c:	f044 0402 	orr.w	r4, r4, #2
 8001210:	6004      	str	r4, [r0, #0]
 8001212:	e7b4      	b.n	800117e <_pal_lld_setgroupmode+0x2e>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001214:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8001216:	ea26 0303 	bic.w	r3, r6, r3
 800121a:	431d      	orrs	r5, r3
 800121c:	6245      	str	r5, [r0, #36]	; 0x24
 800121e:	e7f3      	b.n	8001208 <_pal_lld_setgroupmode+0xb8>

08001220 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8001220:	b470      	push	{r4, r5, r6}
 8001222:	2320      	movs	r3, #32
 8001224:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 8001228:	4c2b      	ldr	r4, [pc, #172]	; (80012d8 <sdStart+0xb8>)

  if (sdp->state == SD_STOP) {
 800122a:	7a02      	ldrb	r2, [r0, #8]
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 800122c:	2900      	cmp	r1, #0
 800122e:	bf08      	it	eq
 8001230:	4621      	moveq	r1, r4

  if (sdp->state == SD_STOP) {
 8001232:	2a01      	cmp	r2, #1
 8001234:	d029      	beq.n	800128a <sdStart+0x6a>
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8001236:	f644 6374 	movw	r3, #20084	; 0x4e74

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800123a:	4a28      	ldr	r2, [pc, #160]	; (80012dc <sdStart+0xbc>)
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 800123c:	58c3      	ldr	r3, [r0, r3]

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800123e:	4293      	cmp	r3, r2
 8001240:	d037      	beq.n	80012b2 <sdStart+0x92>
 8001242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001246:	4293      	cmp	r3, r2
 8001248:	d033      	beq.n	80012b2 <sdStart+0x92>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 800124a:	680c      	ldr	r4, [r1, #0]
 800124c:	4a24      	ldr	r2, [pc, #144]	; (80012e0 <sdStart+0xc0>)
 800124e:	fbb2 f2f4 	udiv	r2, r2, r4
 8001252:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001254:	888a      	ldrh	r2, [r1, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001256:	88cc      	ldrh	r4, [r1, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001258:	8909      	ldrh	r1, [r1, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800125a:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800125e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001262:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001266:	f041 0101 	orr.w	r1, r1, #1
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800126a:	b2a4      	uxth	r4, r4
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800126c:	b292      	uxth	r2, r2
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800126e:	b289      	uxth	r1, r1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8001270:	2500      	movs	r5, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001272:	611c      	str	r4, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001274:	6159      	str	r1, [r3, #20]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8001276:	2402      	movs	r4, #2
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001278:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800127a:	601d      	str	r5, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800127c:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	7204      	strb	r4, [r0, #8]
 8001282:	f385 8811 	msr	BASEPRI, r5
  osalSysUnlock();
}
 8001286:	bc70      	pop	{r4, r5, r6}
 8001288:	4770      	bx	lr
  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
 800128a:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <sdStart+0xc4>)
 800128c:	4290      	cmp	r0, r2
 800128e:	d016      	beq.n	80012be <sdStart+0x9e>
      rccEnableUSART1(FALSE);
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <sdStart+0xc8>)
 8001292:	4298      	cmp	r0, r3
 8001294:	d1cf      	bne.n	8001236 <sdStart+0x16>
      rccEnableUSART2(FALSE);
 8001296:	4d15      	ldr	r5, [pc, #84]	; (80012ec <sdStart+0xcc>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <sdStart+0xd0>)
 800129a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800129c:	2440      	movs	r4, #64	; 0x40

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800129e:	26c0      	movs	r6, #192	; 0xc0
 80012a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80012a4:	642a      	str	r2, [r5, #64]	; 0x40
 80012a6:	f883 6326 	strb.w	r6, [r3, #806]	; 0x326
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80012aa:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80012ae:	605c      	str	r4, [r3, #4]
 80012b0:	e7c1      	b.n	8001236 <sdStart+0x16>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 80012b2:	680c      	ldr	r4, [r1, #0]
 80012b4:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <sdStart+0xd4>)
 80012b6:	fbb2 f2f4 	udiv	r2, r2, r4
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	e7ca      	b.n	8001254 <sdStart+0x34>
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 80012be:	4d0b      	ldr	r5, [pc, #44]	; (80012ec <sdStart+0xcc>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <sdStart+0xd0>)
 80012c2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 80012c4:	26c0      	movs	r6, #192	; 0xc0
 80012c6:	f044 0410 	orr.w	r4, r4, #16
 80012ca:	646c      	str	r4, [r5, #68]	; 0x44
 80012cc:	f882 6325 	strb.w	r6, [r2, #805]	; 0x325
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80012d0:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80012d4:	6053      	str	r3, [r2, #4]
 80012d6:	e7ae      	b.n	8001236 <sdStart+0x16>
 80012d8:	08002750 	.word	0x08002750
 80012dc:	40011000 	.word	0x40011000
 80012e0:	0280de80 	.word	0x0280de80
 80012e4:	20001598 	.word	0x20001598
 80012e8:	20006410 	.word	0x20006410
 80012ec:	40023800 	.word	0x40023800
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	0501bd00 	.word	0x0501bd00
	...

08001300 <pwmEnablePeriodicNotification>:
 8001300:	2320      	movs	r3, #32
 8001302:	f383 8811 	msr	BASEPRI, r3
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_enable_periodic_notification(PWMDriver *pwmp) {
  uint32_t dier = pwmp->tim->DIER;
 8001306:	6983      	ldr	r3, [r0, #24]
 8001308:	68da      	ldr	r2, [r3, #12]

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & STM32_TIM_DIER_UIE) == 0) {
 800130a:	07d1      	lsls	r1, r2, #31
 800130c:	d406      	bmi.n	800131c <pwmEnablePeriodicNotification+0x1c>
    pwmp->tim->DIER = dier | STM32_TIM_DIER_UIE;
 800130e:	f042 0201 	orr.w	r2, r2, #1
 8001312:	60da      	str	r2, [r3, #12]
    pwmp->tim->SR &= STM32_TIM_SR_UIF;
 8001314:	691a      	ldr	r2, [r3, #16]
 8001316:	f002 0201 	and.w	r2, r2, #1
 800131a:	611a      	str	r2, [r3, #16]
 800131c:	2300      	movs	r3, #0
 800131e:	f383 8811 	msr	BASEPRI, r3
 8001322:	4770      	bx	lr
	...

08001330 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001332:	490f      	ldr	r1, [pc, #60]	; (8001370 <chTMStopMeasurementX+0x40>)
 8001334:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001336:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001338:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800133a:	6f4f      	ldr	r7, [r1, #116]	; 0x74
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 800133c:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800133e:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001340:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8001348:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800134a:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800134c:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800134e:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8001352:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8001354:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8001358:	bf88      	it	hi
 800135a:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 800135c:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800135e:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001360:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8001364:	bf38      	it	cc
 8001366:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8001368:	bcf0      	pop	{r4, r5, r6, r7}
 800136a:	4770      	bx	lr
 800136c:	e0001000 	.word	0xe0001000
 8001370:	2000b2d0 	.word	0x2000b2d0
	...

08001380 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8001380:	b538      	push	{r3, r4, r5, lr}
 8001382:	2220      	movs	r2, #32
 8001384:	4603      	mov	r3, r0
 8001386:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <chThdExit+0x44>)
 800138c:	6994      	ldr	r4, [r2, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800138e:	6a60      	ldr	r0, [r4, #36]	; 0x24

  tp->p_u.exitcode = msg;
 8001390:	6223      	str	r3, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001392:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8001396:	42a8      	cmp	r0, r5
 8001398:	d006      	beq.n	80013a8 <chThdExit+0x28>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 800139a:	6803      	ldr	r3, [r0, #0]
 800139c:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800139e:	f7ff f8e7 	bl	8000570 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80013a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80013a4:	42a8      	cmp	r0, r5
 80013a6:	d1f8      	bne.n	800139a <chThdExit+0x1a>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80013a8:	7f63      	ldrb	r3, [r4, #29]
 80013aa:	079b      	lsls	r3, r3, #30
 80013ac:	d104      	bne.n	80013b8 <chThdExit+0x38>
    REG_REMOVE(tp);
 80013ae:	6963      	ldr	r3, [r4, #20]
 80013b0:	6922      	ldr	r2, [r4, #16]
 80013b2:	611a      	str	r2, [r3, #16]
 80013b4:	6922      	ldr	r2, [r4, #16]
 80013b6:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80013b8:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 80013ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80013be:	f7ff ba2f 	b.w	8000820 <chSchGoSleepS>
 80013c2:	bf00      	nop
 80013c4:	2000b2d0 	.word	0x2000b2d0
	...

080013d0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 80013d0:	b508      	push	{r3, lr}
 80013d2:	4601      	mov	r1, r0
 80013d4:	2320      	movs	r3, #32
 80013d6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80013da:	2008      	movs	r0, #8
 80013dc:	f7ff fa38 	bl	8000850 <chSchGoSleepTimeoutS>
 80013e0:	2300      	movs	r3, #0
 80013e2:	f383 8811 	msr	BASEPRI, r3
 80013e6:	bd08      	pop	{r3, pc}
	...

080013f0 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80013f0:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <chSchDoReschedule+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80013f2:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80013f4:	b470      	push	{r4, r5, r6}

  tqp->p_next = tp->p_next;
 80013f6:	6803      	ldr	r3, [r0, #0]
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80013f8:	6994      	ldr	r4, [r2, #24]
 80013fa:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80013fc:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 80013fe:	2500      	movs	r5, #0
 8001400:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001402:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001404:	7706      	strb	r6, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001406:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8001408:	7725      	strb	r5, [r4, #28]
 800140a:	e000      	b.n	800140e <chSchDoReschedule+0x1e>
 800140c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	428a      	cmp	r2, r1
 8001412:	d8fb      	bhi.n	800140c <chSchDoReschedule+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8001418:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800141a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 800141c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800141e:	605c      	str	r4, [r3, #4]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8001420:	bc70      	pop	{r4, r5, r6}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8001422:	f7fe bf35 	b.w	8000290 <_port_switch>
 8001426:	bf00      	nop
 8001428:	2000b2d0 	.word	0x2000b2d0
 800142c:	00000000 	.word	0x00000000

08001430 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001430:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8001432:	4e11      	ldr	r6, [pc, #68]	; (8001478 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001434:	2500      	movs	r5, #0
 8001436:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 800143a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800143e:	42a3      	cmp	r3, r4
 8001440:	d20d      	bcs.n	800145e <__init_ram_areas+0x2e>
 8001442:	3904      	subs	r1, #4
 8001444:	461a      	mov	r2, r3
      *p = *tp;
 8001446:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800144a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800144e:	42a2      	cmp	r2, r4
 8001450:	d3f9      	bcc.n	8001446 <__init_ram_areas+0x16>
 8001452:	43da      	mvns	r2, r3
 8001454:	4414      	add	r4, r2
 8001456:	f024 0403 	bic.w	r4, r4, #3
 800145a:	3404      	adds	r4, #4
 800145c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800145e:	68f2      	ldr	r2, [r6, #12]
 8001460:	4293      	cmp	r3, r2
 8001462:	d203      	bcs.n	800146c <__init_ram_areas+0x3c>
      *p = 0;
 8001464:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001468:	4293      	cmp	r3, r2
 800146a:	d3fb      	bcc.n	8001464 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 800146c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800146e:	42be      	cmp	r6, r7
 8001470:	d3e3      	bcc.n	800143a <__init_ram_areas+0xa>
#endif
}
 8001472:	bcf0      	pop	{r4, r5, r6, r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	080027c0 	.word	0x080027c0
 800147c:	00000000 	.word	0x00000000

08001480 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001480:	e7fe      	b.n	8001480 <__default_exit>
 8001482:	bf00      	nop
	...

08001490 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
	...

080014a0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
	...

080014b0 <printWebPage>:
  }
  buff[0] = '\0';
  chprintf((BaseChannel *)MONITOR_SERIAL, '\0', 1);
}

void printWebPage() {
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  char cipSend[100] = {"AT+CIPSEND="};
 80014b2:	4e51      	ldr	r6, [pc, #324]	; (80015f8 <printWebPage+0x148>)
 80014b4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  }
  buff[0] = '\0';
  chprintf((BaseChannel *)MONITOR_SERIAL, '\0', 1);
}

void printWebPage() {
 80014b8:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
  char cipSend[100] = {"AT+CIPSEND="};
 80014bc:	ad06      	add	r5, sp, #24
 80014be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80014c2:	2100      	movs	r1, #0
 80014c4:	2258      	movs	r2, #88	; 0x58
 80014c6:	a809      	add	r0, sp, #36	; 0x24
 80014c8:	f000 fee2 	bl	8002290 <memset>
  char webPage[600] = {"<html>_"};
 80014cc:	f106 0364 	add.w	r3, r6, #100	; 0x64
 80014d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014d4:	af38      	add	r7, sp, #224	; 0xe0
 80014d6:	e887 0003 	stmia.w	r7, {r0, r1}
 80014da:	f44f 7214 	mov.w	r2, #592	; 0x250
 80014de:	2100      	movs	r1, #0
  char webPage1[20] = {"_</html>"};
 80014e0:	f506 762f 	add.w	r6, r6, #700	; 0x2bc
  chprintf((BaseChannel *)MONITOR_SERIAL, '\0', 1);
}

void printWebPage() {
  char cipSend[100] = {"AT+CIPSEND="};
  char webPage[600] = {"<html>_"};
 80014e4:	a83a      	add	r0, sp, #232	; 0xe8
 80014e6:	f000 fed3 	bl	8002290 <memset>
  char webPage1[20] = {"_</html>"};
 80014ea:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  if (request == 'c')
 80014ee:	f8df e11c 	ldr.w	lr, [pc, #284]	; 800160c <printWebPage+0x15c>
}

void printWebPage() {
  char cipSend[100] = {"AT+CIPSEND="};
  char webPage[600] = {"<html>_"};
  char webPage1[20] = {"_</html>"};
 80014f2:	ae01      	add	r6, sp, #4
 80014f4:	c603      	stmia	r6!, {r0, r1}
  if (request == 'c')
 80014f6:	f89e 1000 	ldrb.w	r1, [lr]
}

void printWebPage() {
  char cipSend[100] = {"AT+CIPSEND="};
  char webPage[600] = {"<html>_"};
  char webPage1[20] = {"_</html>"};
 80014fa:	7032      	strb	r2, [r6, #0]
 80014fc:	2400      	movs	r4, #0
  if (request == 'c')
 80014fe:	2963      	cmp	r1, #99	; 0x63
}

void printWebPage() {
  char cipSend[100] = {"AT+CIPSEND="};
  char webPage[600] = {"<html>_"};
  char webPage1[20] = {"_</html>"};
 8001500:	f88d 400d 	strb.w	r4, [sp, #13]
 8001504:	f88d 400e 	strb.w	r4, [sp, #14]
 8001508:	f88d 400f 	strb.w	r4, [sp, #15]
 800150c:	f88d 4010 	strb.w	r4, [sp, #16]
 8001510:	f88d 4011 	strb.w	r4, [sp, #17]
 8001514:	f88d 4012 	strb.w	r4, [sp, #18]
 8001518:	f88d 4013 	strb.w	r4, [sp, #19]
 800151c:	f88d 4014 	strb.w	r4, [sp, #20]
 8001520:	f88d 4015 	strb.w	r4, [sp, #21]
 8001524:	f88d 4016 	strb.w	r4, [sp, #22]
 8001528:	f88d 4017 	strb.w	r4, [sp, #23]
  if (request == 'c')
 800152c:	d05e      	beq.n	80015ec <printWebPage+0x13c>
    strcat(webPage,command);
  strcat(webPage,webPage1);
 800152e:	a901      	add	r1, sp, #4
 8001530:	4638      	mov	r0, r7
 8001532:	f000 fe8d 	bl	8002250 <strcat>
  strcat(cipSend,clientID);
 8001536:	4931      	ldr	r1, [pc, #196]	; (80015fc <printWebPage+0x14c>)
 8001538:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 800153c:	f7ff fb48 	bl	8000bd0 <strcpy>
  strcat(cipSend,",");
 8001540:	4628      	mov	r0, r5
 8001542:	f7ff fb5d 	bl	8000c00 <strlen>
/**
 * Return length of str as char (es. '47')
 */
int strlen(const char * str){
    int len;
    for (len = 0; str[len]; len++);
 8001546:	4a2e      	ldr	r2, [pc, #184]	; (8001600 <printWebPage+0x150>)
  char webPage1[20] = {"_</html>"};
  if (request == 'c')
    strcat(webPage,command);
  strcat(webPage,webPage1);
  strcat(cipSend,clientID);
  strcat(cipSend,",");
 8001548:	492e      	ldr	r1, [pc, #184]	; (8001604 <printWebPage+0x154>)
/**
 * Return length of str as char (es. '47')
 */
int strlen(const char * str){
    int len;
    for (len = 0; str[len]; len++);
 800154a:	7813      	ldrb	r3, [r2, #0]
  char webPage1[20] = {"_</html>"};
  if (request == 'c')
    strcat(webPage,command);
  strcat(webPage,webPage1);
  strcat(cipSend,clientID);
  strcat(cipSend,",");
 800154c:	8809      	ldrh	r1, [r1, #0]
 800154e:	5229      	strh	r1, [r5, r0]
/**
 * Return length of str as char (es. '47')
 */
int strlen(const char * str){
    int len;
    for (len = 0; str[len]; len++);
 8001550:	b12b      	cbz	r3, 800155e <printWebPage+0xae>
 8001552:	2300      	movs	r3, #0
 8001554:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001558:	3301      	adds	r3, #1
 800155a:	2900      	cmp	r1, #0
 800155c:	d1fa      	bne.n	8001554 <printWebPage+0xa4>
 800155e:	a91f      	add	r1, sp, #124	; 0x7c
     int i, sign;
     if ((sign = n) < 0)  /* record sign */
         n = -n;          /* make n positive */
     i = 0;
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
 8001560:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8001610 <printWebPage+0x160>
 8001564:	460e      	mov	r6, r1
/**
 * Return length of str as char (es. '47')
 */
int strlen(const char * str){
    int len;
    for (len = 0; str[len]; len++);
 8001566:	468e      	mov	lr, r1
 8001568:	2700      	movs	r7, #0
     int i, sign;
     if ((sign = n) < 0)  /* record sign */
         n = -n;          /* make n positive */
     i = 0;
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
 800156a:	fb8c 2403 	smull	r2, r4, ip, r3
 800156e:	17da      	asrs	r2, r3, #31
 8001570:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8001574:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8001578:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 800157c:	3330      	adds	r3, #48	; 0x30
 800157e:	f80e 3b01 	strb.w	r3, [lr], #1
 8001582:	3701      	adds	r7, #1
     } while ((n /= 10) > 0);     /* delete it */
 8001584:	4613      	mov	r3, r2
 8001586:	2a00      	cmp	r2, #0
 8001588:	d1ef      	bne.n	800156a <printWebPage+0xba>
     if (sign < 0)
         s[i++] = '-';
     s[i] = '\0';
 800158a:	55ca      	strb	r2, [r1, r7]
/**
 * Return length of str as char (es. '47')
 */
int strlen(const char * str){
    int len;
    for (len = 0; str[len]; len++);
 800158c:	780f      	ldrb	r7, [r1, #0]
 800158e:	460c      	mov	r4, r1
 8001590:	b90f      	cbnz	r7, 8001596 <printWebPage+0xe6>
 8001592:	e015      	b.n	80015c0 <printWebPage+0x110>
 8001594:	4673      	mov	r3, lr
 8001596:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800159a:	f103 0e01 	add.w	lr, r3, #1
 800159e:	2a00      	cmp	r2, #0
 80015a0:	d1f8      	bne.n	8001594 <printWebPage+0xe4>
 /* reverse:  reverse string s in place */
void reverse(char s[]){
    int i, j;
    char c;

    for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 80015a2:	b16b      	cbz	r3, 80015c0 <printWebPage+0x110>
 80015a4:	18cc      	adds	r4, r1, r3
 80015a6:	e000      	b.n	80015aa <printWebPage+0xfa>
 80015a8:	7837      	ldrb	r7, [r6, #0]
        c = s[i];
        s[i] = s[j];
 80015aa:	f894 e000 	ldrb.w	lr, [r4]
 80015ae:	f806 eb01 	strb.w	lr, [r6], #1
 /* reverse:  reverse string s in place */
void reverse(char s[]){
    int i, j;
    char c;

    for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 80015b2:	3201      	adds	r2, #1
 80015b4:	ebc2 0e03 	rsb	lr, r2, r3
 80015b8:	4596      	cmp	lr, r2
        c = s[i];
        s[i] = s[j];
        s[j] = c;
 80015ba:	f804 7901 	strb.w	r7, [r4], #-1
 /* reverse:  reverse string s in place */
void reverse(char s[]){
    int i, j;
    char c;

    for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 80015be:	dcf3      	bgt.n	80015a8 <printWebPage+0xf8>
  char webPage1[20] = {"_</html>"};
  if (request == 'c')
    strcat(webPage,command);
  strcat(webPage,webPage1);
  strcat(cipSend,clientID);
  strcat(cipSend,",");
 80015c0:	3001      	adds	r0, #1
  int pageLength = strlen(command);
  char pageLengthAsString[100];
  itoa(pageLength,pageLengthAsString);
  strcat(cipSend,pageLengthAsString);
 80015c2:	4428      	add	r0, r5
 80015c4:	f7ff fb04 	bl	8000bd0 <strcpy>
  strcat(cipSend,"\r\n");
 80015c8:	4628      	mov	r0, r5
 80015ca:	f7ff fb19 	bl	8000c00 <strlen>
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <printWebPage+0x158>)
 80015d0:	182a      	adds	r2, r5, r0
 80015d2:	8819      	ldrh	r1, [r3, #0]
 80015d4:	789b      	ldrb	r3, [r3, #2]
 80015d6:	5229      	strh	r1, [r5, r0]
  sendToESP8266(cipSend, COMMAND_SLEEP);
 80015d8:	4628      	mov	r0, r5
  strcat(cipSend,",");
  int pageLength = strlen(command);
  char pageLengthAsString[100];
  itoa(pageLength,pageLengthAsString);
  strcat(cipSend,pageLengthAsString);
  strcat(cipSend,"\r\n");
 80015da:	7093      	strb	r3, [r2, #2]
  sendToESP8266(cipSend, COMMAND_SLEEP);
 80015dc:	f000 fb00 	bl	8001be0 <sendToESP8266.constprop.2>
  sendToESP8266(command, COMMAND_SLEEP);
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <printWebPage+0x150>)
 80015e2:	f000 fafd 	bl	8001be0 <sendToESP8266.constprop.2>
}
 80015e6:	f50d 7d4f 	add.w	sp, sp, #828	; 0x33c
 80015ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
void printWebPage() {
  char cipSend[100] = {"AT+CIPSEND="};
  char webPage[600] = {"<html>_"};
  char webPage1[20] = {"_</html>"};
  if (request == 'c')
    strcat(webPage,command);
 80015ec:	f10d 00e7 	add.w	r0, sp, #231	; 0xe7
 80015f0:	4903      	ldr	r1, [pc, #12]	; (8001600 <printWebPage+0x150>)
 80015f2:	f7ff faed 	bl	8000bd0 <strcpy>
 80015f6:	e79a      	b.n	800152e <printWebPage+0x7e>
 80015f8:	08002480 	.word	0x08002480
 80015fc:	20000cb8 	.word	0x20000cb8
 8001600:	20000cbc 	.word	0x20000cbc
 8001604:	08002768 	.word	0x08002768
 8001608:	080028ac 	.word	0x080028ac
 800160c:	20000cc5 	.word	0x20000cc5
 8001610:	66666667 	.word	0x66666667
	...

08001620 <Uart1EVT_Thread.lto_priv.21>:
char request;
static THD_WORKING_AREA(waThread1, 2048);
/**
 * Asynchronous serial SD1
 */
static msg_t Uart1EVT_Thread(void *p) {
 8001620:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001624:	b089      	sub	sp, #36	; 0x24
 8001626:	af00      	add	r7, sp, #0
  int letterAfterPlus = 0;
  int spaceAfterD = 0;
  int x_charRead = 0, y_charRead = 0;
  int BUFF_SIZE = 1024;
  char received[BUFF_SIZE];
 8001628:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 800162c:	46e9      	mov	r9, sp
 800162e:	2620      	movs	r6, #32
 8001630:	f386 8811 	msr	BASEPRI, r6
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8001634:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8001894 <Uart1EVT_Thread.lto_priv.21+0x274>
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8001638:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8001824 <Uart1EVT_Thread.lto_priv.21+0x204>
  esp->es_next     = elp;
  elp->el_listener = currp;
 800163c:	f8da 3018 	ldr.w	r3, [sl, #24]
 8001640:	613b      	str	r3, [r7, #16]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8001642:	19bb      	adds	r3, r7, r6
 8001644:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8001648:	f843 2d14 	str.w	r2, [r3, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 800164c:	2001      	movs	r0, #1
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 800164e:	f04f 31ff 	mov.w	r1, #4294967295
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8001652:	2200      	movs	r2, #0

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8001654:	6178      	str	r0, [r7, #20]
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8001656:	61f9      	str	r1, [r7, #28]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8001658:	f8c8 3004 	str.w	r3, [r8, #4]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 800165c:	61ba      	str	r2, [r7, #24]
 800165e:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
    ctp->p_u.ewmask = events;
 8001662:	2501      	movs	r5, #1
 8001664:	e00f      	b.n	8001686 <Uart1EVT_Thread.lto_priv.21+0x66>
  thread_t *ctp = currp;
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
 8001666:	f06f 0201 	mvn.w	r2, #1
    ctp->p_u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->p_epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
  ctp->p_epending &= ~m;
 800166a:	4013      	ands	r3, r2
 800166c:	2400      	movs	r4, #0
 800166e:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8001672:	f384 8811 	msr	BASEPRI, r4
 8001676:	f386 8811 	msr	BASEPRI, r6
 * @iclass
 */
eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp) {
  eventflags_t flags;

  flags = elp->el_flags;
 800167a:	69bb      	ldr	r3, [r7, #24]
  elp->el_flags = (eventflags_t)0;
 800167c:	61bc      	str	r4, [r7, #24]
 800167e:	f384 8811 	msr	BASEPRI, r4

    chSysLock();
    flags = chEvtGetAndClearFlagsI(&el1);
    chSysUnlock();  //wait for events;

    if (flags & CHN_INPUT_AVAILABLE) {  //events received
 8001682:	075a      	lsls	r2, r3, #29
 8001684:	d412      	bmi.n	80016ac <Uart1EVT_Thread.lto_priv.21+0x8c>
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8001686:	f8da b018 	ldr.w	fp, [sl, #24]
 800168a:	f386 8811 	msr	BASEPRI, r6
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800168e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8001692:	07d9      	lsls	r1, r3, #31
 8001694:	d4e7      	bmi.n	8001666 <Uart1EVT_Thread.lto_priv.21+0x46>
    ctp->p_u.ewmask = events;
 8001696:	f8cb 5020 	str.w	r5, [fp, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 800169a:	200a      	movs	r0, #10
 800169c:	f7ff f8c0 	bl	8000820 <chSchGoSleepS>
    m = ctp->p_epending & events;
 80016a0:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 80016a4:	f003 0201 	and.w	r2, r3, #1
 80016a8:	43d2      	mvns	r2, r2
 80016aa:	e7de      	b.n	800166a <Uart1EVT_Thread.lto_priv.21+0x4a>
      msg_t charbuf;
      do {
        charbuf = chnGetTimeout(WIFI_SERIAL, TIME_IMMEDIATE);
 80016ac:	f8d8 3000 	ldr.w	r3, [r8]
 80016b0:	485c      	ldr	r0, [pc, #368]	; (8001824 <Uart1EVT_Thread.lto_priv.21+0x204>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	2100      	movs	r1, #0
 80016b6:	4798      	blx	r3
 80016b8:	4605      	mov	r5, r0
        chThdSleepMicroseconds(100);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff fe88 	bl	80013d0 <chThdSleep>
        if (charbuf != Q_TIMEOUT) {
 80016c0:	1c6b      	adds	r3, r5, #1
          if (DEBUG)
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%c", (char)charbuf);
 80016c2:	4959      	ldr	r1, [pc, #356]	; (8001828 <Uart1EVT_Thread.lto_priv.21+0x208>)
 80016c4:	4859      	ldr	r0, [pc, #356]	; (800182c <Uart1EVT_Thread.lto_priv.21+0x20c>)
 80016c6:	b2ea      	uxtb	r2, r5
    if (flags & CHN_INPUT_AVAILABLE) {  //events received
      msg_t charbuf;
      do {
        charbuf = chnGetTimeout(WIFI_SERIAL, TIME_IMMEDIATE);
        chThdSleepMicroseconds(100);
        if (charbuf != Q_TIMEOUT) {
 80016c8:	d008      	beq.n	80016dc <Uart1EVT_Thread.lto_priv.21+0xbc>
          if (DEBUG)
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%c", (char)charbuf);
 80016ca:	f7ff faa9 	bl	8000c20 <chprintf>
          if (pos < BUFF_SIZE) {
 80016ce:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80016d2:	daeb      	bge.n	80016ac <Uart1EVT_Thread.lto_priv.21+0x8c>
            received[pos] = (char)charbuf;
 80016d4:	f809 5004 	strb.w	r5, [r9, r4]
            pos++;
 80016d8:	3401      	adds	r4, #1
 80016da:	e7e7      	b.n	80016ac <Uart1EVT_Thread.lto_priv.21+0x8c>
          }
        }
      } while (charbuf != Q_TIMEOUT );
      received[pos] = '\0';
 80016dc:	2500      	movs	r5, #0
 80016de:	4648      	mov	r0, r9
 80016e0:	4953      	ldr	r1, [pc, #332]	; (8001830 <Uart1EVT_Thread.lto_priv.21+0x210>)
 80016e2:	f809 5004 	strb.w	r5, [r9, r4]
 80016e6:	f000 fa8b 	bl	8001c00 <StrStr.part.0.lto_priv.43>
      /***********DO SOMETHING WITH RECEIVED MESSAGE************/
      char* clearRequest = StrStr(received, "+IPD"); //HTTP REQUEST
      if (StrStr(received, "+IPD") != NULL){
 80016ea:	4683      	mov	fp, r0
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d0b8      	beq.n	8001662 <Uart1EVT_Thread.lto_priv.21+0x42>
 80016f0:	4648      	mov	r0, r9
 80016f2:	4950      	ldr	r1, [pc, #320]	; (8001834 <Uart1EVT_Thread.lto_priv.21+0x214>)
 80016f4:	f000 fa84 	bl	8001c00 <StrStr.part.0.lto_priv.43>
        char* subStringCommand = StrStr(received,"c=");
        if (subStringCommand[0] == 'c'){
 80016f8:	7803      	ldrb	r3, [r0, #0]
 80016fa:	2b63      	cmp	r3, #99	; 0x63
 80016fc:	4604      	mov	r4, r0
 80016fe:	d1b0      	bne.n	8001662 <Uart1EVT_Thread.lto_priv.21+0x42>
          if (DEBUG)
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Received http request");
 8001700:	494d      	ldr	r1, [pc, #308]	; (8001838 <Uart1EVT_Thread.lto_priv.21+0x218>)
 8001702:	4a4e      	ldr	r2, [pc, #312]	; (800183c <Uart1EVT_Thread.lto_priv.21+0x21c>)
 8001704:	4849      	ldr	r0, [pc, #292]	; (800182c <Uart1EVT_Thread.lto_priv.21+0x20c>)
 8001706:	f7ff fa8b 	bl	8000c20 <chprintf>
          clientID[0] = clearRequest[5];
          clientID[1] = '\0';
 800170a:	4a4d      	ldr	r2, [pc, #308]	; (8001840 <Uart1EVT_Thread.lto_priv.21+0x220>)
      if (StrStr(received, "+IPD") != NULL){
        char* subStringCommand = StrStr(received,"c=");
        if (subStringCommand[0] == 'c'){
          if (DEBUG)
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Received http request");
          clientID[0] = clearRequest[5];
 800170c:	f89b 3005 	ldrb.w	r3, [fp, #5]
          clientID[1] = '\0';
 8001710:	7055      	strb	r5, [r2, #1]
      if (StrStr(received, "+IPD") != NULL){
        char* subStringCommand = StrStr(received,"c=");
        if (subStringCommand[0] == 'c'){
          if (DEBUG)
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Received http request");
          clientID[0] = clearRequest[5];
 8001712:	7013      	strb	r3, [r2, #0]
          clientID[1] = '\0';
          request = subStringCommand[0]; //it is c for command (c=M0...)
          command[0] = subStringCommand[2];
 8001714:	4a4b      	ldr	r2, [pc, #300]	; (8001844 <Uart1EVT_Thread.lto_priv.21+0x224>)
 8001716:	78a3      	ldrb	r3, [r4, #2]
        if (subStringCommand[0] == 'c'){
          if (DEBUG)
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Received http request");
          clientID[0] = clearRequest[5];
          clientID[1] = '\0';
          request = subStringCommand[0]; //it is c for command (c=M0...)
 8001718:	f894 e000 	ldrb.w	lr, [r4]
          command[0] = subStringCommand[2];
 800171c:	7013      	strb	r3, [r2, #0]
          command[1] = subStringCommand[3];
 800171e:	78e3      	ldrb	r3, [r4, #3]
 8001720:	7053      	strb	r3, [r2, #1]
          command[2] = subStringCommand[4];
 8001722:	7923      	ldrb	r3, [r4, #4]
 8001724:	7093      	strb	r3, [r2, #2]
          command[3] = subStringCommand[5];
 8001726:	7963      	ldrb	r3, [r4, #5]
 8001728:	70d3      	strb	r3, [r2, #3]
          command[4] = subStringCommand[6];
 800172a:	79a3      	ldrb	r3, [r4, #6]
 800172c:	7113      	strb	r3, [r2, #4]
          command[5] = subStringCommand[7];
 800172e:	79e3      	ldrb	r3, [r4, #7]
 8001730:	7153      	strb	r3, [r2, #5]
          command[6] = subStringCommand[8];
 8001732:	7a23      	ldrb	r3, [r4, #8]
 8001734:	7193      	strb	r3, [r2, #6]
          command[7] = subStringCommand[9];
 8001736:	7a63      	ldrb	r3, [r4, #9]
        if (subStringCommand[0] == 'c'){
          if (DEBUG)
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Received http request");
          clientID[0] = clearRequest[5];
          clientID[1] = '\0';
          request = subStringCommand[0]; //it is c for command (c=M0...)
 8001738:	4c43      	ldr	r4, [pc, #268]	; (8001848 <Uart1EVT_Thread.lto_priv.21+0x228>)
          command[5] = subStringCommand[7];
          command[6] = subStringCommand[8];
          command[7] = subStringCommand[9];
          command[8] = '\0';
          if (DEBUG){
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Client id=");
 800173a:	493f      	ldr	r1, [pc, #252]	; (8001838 <Uart1EVT_Thread.lto_priv.21+0x218>)
        if (subStringCommand[0] == 'c'){
          if (DEBUG)
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Received http request");
          clientID[0] = clearRequest[5];
          clientID[1] = '\0';
          request = subStringCommand[0]; //it is c for command (c=M0...)
 800173c:	f884 e000 	strb.w	lr, [r4]
          command[2] = subStringCommand[4];
          command[3] = subStringCommand[5];
          command[4] = subStringCommand[6];
          command[5] = subStringCommand[7];
          command[6] = subStringCommand[8];
          command[7] = subStringCommand[9];
 8001740:	4c40      	ldr	r4, [pc, #256]	; (8001844 <Uart1EVT_Thread.lto_priv.21+0x224>)
          command[8] = '\0';
          if (DEBUG){
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Client id=");
 8001742:	4a42      	ldr	r2, [pc, #264]	; (800184c <Uart1EVT_Thread.lto_priv.21+0x22c>)
 8001744:	4839      	ldr	r0, [pc, #228]	; (800182c <Uart1EVT_Thread.lto_priv.21+0x20c>)
          command[2] = subStringCommand[4];
          command[3] = subStringCommand[5];
          command[4] = subStringCommand[6];
          command[5] = subStringCommand[7];
          command[6] = subStringCommand[8];
          command[7] = subStringCommand[9];
 8001746:	71e3      	strb	r3, [r4, #7]
          command[8] = '\0';
 8001748:	7225      	strb	r5, [r4, #8]
          if (DEBUG){
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Client id=");
 800174a:	f7ff fa69 	bl	8000c20 <chprintf>
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s\n", clientID);
 800174e:	4940      	ldr	r1, [pc, #256]	; (8001850 <Uart1EVT_Thread.lto_priv.21+0x230>)
 8001750:	4a3b      	ldr	r2, [pc, #236]	; (8001840 <Uart1EVT_Thread.lto_priv.21+0x220>)
 8001752:	4836      	ldr	r0, [pc, #216]	; (800182c <Uart1EVT_Thread.lto_priv.21+0x20c>)
 8001754:	f7ff fa64 	bl	8000c20 <chprintf>
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s", "Command=");
 8001758:	4937      	ldr	r1, [pc, #220]	; (8001838 <Uart1EVT_Thread.lto_priv.21+0x218>)
 800175a:	4a3e      	ldr	r2, [pc, #248]	; (8001854 <Uart1EVT_Thread.lto_priv.21+0x234>)
 800175c:	4833      	ldr	r0, [pc, #204]	; (800182c <Uart1EVT_Thread.lto_priv.21+0x20c>)
 800175e:	f7ff fa5f 	bl	8000c20 <chprintf>
            chprintf((BaseSequentialStream*)MONITOR_SERIAL, "%s\n", command);
 8001762:	4622      	mov	r2, r4
 8001764:	493a      	ldr	r1, [pc, #232]	; (8001850 <Uart1EVT_Thread.lto_priv.21+0x230>)
 8001766:	4831      	ldr	r0, [pc, #196]	; (800182c <Uart1EVT_Thread.lto_priv.21+0x20c>)
 8001768:	f7ff fa5a 	bl	8000c20 <chprintf>
  char left[3];
  char right[3];
  int toret[2];
  char type = command[0];

  left[0] = command[2];
 800176c:	4623      	mov	r3, r4
 800176e:	78a0      	ldrb	r0, [r4, #2]
  left[1] = command[3];
  left[2] = command[4];

  right[0] = command[5];
 8001770:	7959      	ldrb	r1, [r3, #5]
  right[1] = command[6];
 8001772:	799a      	ldrb	r2, [r3, #6]
  char right[3];
  int toret[2];
  char type = command[0];

  left[0] = command[2];
  left[1] = command[3];
 8001774:	78e5      	ldrb	r5, [r4, #3]
  left[2] = command[4];

  right[0] = command[5];
  right[1] = command[6];
  right[2] = command[7];
 8001776:	79db      	ldrb	r3, [r3, #7]
  int toret[2];
  char type = command[0];

  left[0] = command[2];
  left[1] = command[3];
  left[2] = command[4];
 8001778:	7924      	ldrb	r4, [r4, #4]
  char left[3];
  char right[3];
  int toret[2];
  char type = command[0];

  left[0] = command[2];
 800177a:	7138      	strb	r0, [r7, #4]
  right[1] = command[6];
  right[2] = command[7];

  int le, ri;

  le = atoi(left);
 800177c:	1d38      	adds	r0, r7, #4
  int toret[2];
  char type = command[0];

  left[0] = command[2];
  left[1] = command[3];
  left[2] = command[4];
 800177e:	71bc      	strb	r4, [r7, #6]

  right[0] = command[5];
 8001780:	7239      	strb	r1, [r7, #8]
  right[1] = command[6];
 8001782:	727a      	strb	r2, [r7, #9]
  right[2] = command[7];
 8001784:	72bb      	strb	r3, [r7, #10]
  char right[3];
  int toret[2];
  char type = command[0];

  left[0] = command[2];
  left[1] = command[3];
 8001786:	717d      	strb	r5, [r7, #5]
  right[1] = command[6];
  right[2] = command[7];

  int le, ri;

  le = atoi(left);
 8001788:	f000 fdd2 	bl	8002330 <atoi>
 800178c:	4604      	mov	r4, r0
  ri = atoi(right);
 800178e:	f107 0008 	add.w	r0, r7, #8
 8001792:	f000 fdcd 	bl	8002330 <atoi>
    vel--;
    chThdSleepMilliseconds(10);
  }
  /*******************END DEMO************************/

  if (velocity[0] >= 128) {
 8001796:	2c7f      	cmp	r4, #127	; 0x7f
  right[2] = command[7];

  int le, ri;

  le = atoi(left);
  ri = atoi(right);
 8001798:	4683      	mov	fp, r0
  if (velocity[0] >= 128) {
    velocity[0] = velocity[0] - 128;    //[0-127]
    functioPtrLeftUP = &Sinistra_Avanti_up;
    functioPtrLeftDOWN = &Sinistra_Avanti_Down;

    pwm1 =  8 * velocity[0] + 1;
 800179a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    vel--;
    chThdSleepMilliseconds(10);
  }
  /*******************END DEMO************************/

  if (velocity[0] >= 128) {
 800179e:	dd27      	ble.n	80017f0 <Uart1EVT_Thread.lto_priv.21+0x1d0>
    velocity[0] = velocity[0] - 128;    //[0-127]
    functioPtrLeftUP = &Sinistra_Avanti_up;
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <Uart1EVT_Thread.lto_priv.21+0x238>)
 80017a2:	4d2e      	ldr	r5, [pc, #184]	; (800185c <Uart1EVT_Thread.lto_priv.21+0x23c>)
 80017a4:	601d      	str	r5, [r3, #0]
    functioPtrLeftDOWN = &Sinistra_Avanti_Down;

    pwm1 =  8 * velocity[0] + 1;
 80017a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    chprintf(MONITOR_SERIAL, "%d - ", pwm1);
 80017aa:	4820      	ldr	r0, [pc, #128]	; (800182c <Uart1EVT_Thread.lto_priv.21+0x20c>)
 80017ac:	492c      	ldr	r1, [pc, #176]	; (8001860 <Uart1EVT_Thread.lto_priv.21+0x240>)
  /*******************END DEMO************************/

  if (velocity[0] >= 128) {
    velocity[0] = velocity[0] - 128;    //[0-127]
    functioPtrLeftUP = &Sinistra_Avanti_up;
    functioPtrLeftDOWN = &Sinistra_Avanti_Down;
 80017ae:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <Uart1EVT_Thread.lto_priv.21+0x244>)
 80017b0:	4d2d      	ldr	r5, [pc, #180]	; (8001868 <Uart1EVT_Thread.lto_priv.21+0x248>)

    pwm1 =  8 * velocity[0] + 1;
    chprintf(MONITOR_SERIAL, "%d - ", pwm1);
 80017b2:	4622      	mov	r2, r4

    pwmEnableChannel(&PWMD1, 0, pwm1);
  }
  else {    //<128
    functioPtrLeftUP = &Sinistra_Dietro_up;
    functioPtrLeftDOWN = &Sinistra_Dietro_Down;
 80017b4:	601d      	str	r5, [r3, #0]

    pwm1 = 8 * velocity[0] + 1;
    chprintf(MONITOR_SERIAL, "%d - ", pwm1);
 80017b6:	f7ff fa33 	bl	8000c20 <chprintf>

    pwmEnableChannel(&PWMD1, 0, pwm1);
 80017ba:	4621      	mov	r1, r4
 80017bc:	482b      	ldr	r0, [pc, #172]	; (800186c <Uart1EVT_Thread.lto_priv.21+0x24c>)
 80017be:	f000 f9d7 	bl	8001b70 <pwmEnableChannel.constprop.6>
  }

  if (velocity[1] >= 128) {
 80017c2:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
    velocity[1] = velocity[1] - 128;    //[0-127]
    functioPtrRightUP = &Destra_Avanti_up;
    functioPtrRightDOWN = &Destra_Avanti_Down;

    pwm2 =  8 * velocity[1] + 1;
    chprintf(MONITOR_SERIAL, "%d - ", pwm1);
 80017c6:	4622      	mov	r2, r4
 80017c8:	4818      	ldr	r0, [pc, #96]	; (800182c <Uart1EVT_Thread.lto_priv.21+0x20c>)
 80017ca:	4925      	ldr	r1, [pc, #148]	; (8001860 <Uart1EVT_Thread.lto_priv.21+0x240>)
    pwmEnableChannel(&PWMD1, 0, pwm1);
  }

  if (velocity[1] >= 128) {
    velocity[1] = velocity[1] - 128;    //[0-127]
    functioPtrRightUP = &Destra_Avanti_up;
 80017cc:	4b28      	ldr	r3, [pc, #160]	; (8001870 <Uart1EVT_Thread.lto_priv.21+0x250>)
    chprintf(MONITOR_SERIAL, "%d - ", pwm1);

    pwmEnableChannel(&PWMD1, 0, pwm1);
  }

  if (velocity[1] >= 128) {
 80017ce:	dc19      	bgt.n	8001804 <Uart1EVT_Thread.lto_priv.21+0x1e4>
    chprintf(MONITOR_SERIAL, "%d - ", pwm1);

    pwmEnableChannel(&PWMD3, 0, pwm2);
  }
  else {
    functioPtrRightUP = &Destra_Dietro_up;
 80017d0:	4c28      	ldr	r4, [pc, #160]	; (8001874 <Uart1EVT_Thread.lto_priv.21+0x254>)
 80017d2:	601c      	str	r4, [r3, #0]
    functioPtrRightDOWN = &Destra_Dietro_Down;
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <Uart1EVT_Thread.lto_priv.21+0x258>)
 80017d6:	4c29      	ldr	r4, [pc, #164]	; (800187c <Uart1EVT_Thread.lto_priv.21+0x25c>)
 80017d8:	601c      	str	r4, [r3, #0]

    pwm2 = 8 * velocity[1] + 1;
    chprintf(MONITOR_SERIAL, "%d - ", pwm1);
 80017da:	f7ff fa21 	bl	8000c20 <chprintf>
  }
  else {
    functioPtrRightUP = &Destra_Dietro_up;
    functioPtrRightDOWN = &Destra_Dietro_Down;

    pwm2 = 8 * velocity[1] + 1;
 80017de:	ea4f 01cb 	mov.w	r1, fp, lsl #3
    chprintf(MONITOR_SERIAL, "%d - ", pwm1);

    pwmEnableChannel(&PWMD3, 0, pwm2);
 80017e2:	3101      	adds	r1, #1
 80017e4:	4826      	ldr	r0, [pc, #152]	; (8001880 <Uart1EVT_Thread.lto_priv.21+0x260>)
 80017e6:	f000 f9c3 	bl	8001b70 <pwmEnableChannel.constprop.6>
          }
          control_motor(command);
          printWebPage();
 80017ea:	f7ff fe61 	bl	80014b0 <printWebPage>
 80017ee:	e738      	b.n	8001662 <Uart1EVT_Thread.lto_priv.21+0x42>
    chprintf(MONITOR_SERIAL, "%d - ", pwm1);

    pwmEnableChannel(&PWMD1, 0, pwm1);
  }
  else {    //<128
    functioPtrLeftUP = &Sinistra_Dietro_up;
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <Uart1EVT_Thread.lto_priv.21+0x238>)
 80017f2:	4d24      	ldr	r5, [pc, #144]	; (8001884 <Uart1EVT_Thread.lto_priv.21+0x264>)
 80017f4:	601d      	str	r5, [r3, #0]
    functioPtrLeftDOWN = &Sinistra_Dietro_Down;

    pwm1 = 8 * velocity[0] + 1;
 80017f6:	3401      	adds	r4, #1
    chprintf(MONITOR_SERIAL, "%d - ", pwm1);
 80017f8:	4622      	mov	r2, r4
 80017fa:	480c      	ldr	r0, [pc, #48]	; (800182c <Uart1EVT_Thread.lto_priv.21+0x20c>)
 80017fc:	4918      	ldr	r1, [pc, #96]	; (8001860 <Uart1EVT_Thread.lto_priv.21+0x240>)

    pwmEnableChannel(&PWMD1, 0, pwm1);
  }
  else {    //<128
    functioPtrLeftUP = &Sinistra_Dietro_up;
    functioPtrLeftDOWN = &Sinistra_Dietro_Down;
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <Uart1EVT_Thread.lto_priv.21+0x244>)
 8001800:	4d21      	ldr	r5, [pc, #132]	; (8001888 <Uart1EVT_Thread.lto_priv.21+0x268>)
 8001802:	e7d7      	b.n	80017b4 <Uart1EVT_Thread.lto_priv.21+0x194>
    pwmEnableChannel(&PWMD1, 0, pwm1);
  }

  if (velocity[1] >= 128) {
    velocity[1] = velocity[1] - 128;    //[0-127]
    functioPtrRightUP = &Destra_Avanti_up;
 8001804:	4c21      	ldr	r4, [pc, #132]	; (800188c <Uart1EVT_Thread.lto_priv.21+0x26c>)
 8001806:	601c      	str	r4, [r3, #0]
    functioPtrRightDOWN = &Destra_Avanti_Down;
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <Uart1EVT_Thread.lto_priv.21+0x258>)
 800180a:	4c21      	ldr	r4, [pc, #132]	; (8001890 <Uart1EVT_Thread.lto_priv.21+0x270>)
 800180c:	601c      	str	r4, [r3, #0]

    pwm2 =  8 * velocity[1] + 1;
    chprintf(MONITOR_SERIAL, "%d - ", pwm1);
 800180e:	f7ff fa07 	bl	8000c20 <chprintf>
  if (velocity[1] >= 128) {
    velocity[1] = velocity[1] - 128;    //[0-127]
    functioPtrRightUP = &Destra_Avanti_up;
    functioPtrRightDOWN = &Destra_Avanti_Down;

    pwm2 =  8 * velocity[1] + 1;
 8001812:	ea4f 01cb 	mov.w	r1, fp, lsl #3
    chprintf(MONITOR_SERIAL, "%d - ", pwm1);

    pwmEnableChannel(&PWMD3, 0, pwm2);
 8001816:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800181a:	4819      	ldr	r0, [pc, #100]	; (8001880 <Uart1EVT_Thread.lto_priv.21+0x260>)
 800181c:	f000 f9a8 	bl	8001b70 <pwmEnableChannel.constprop.6>
 8001820:	e7e3      	b.n	80017ea <Uart1EVT_Thread.lto_priv.21+0x1ca>
 8001822:	bf00      	nop
 8001824:	20001598 	.word	0x20001598
 8001828:	0800276c 	.word	0x0800276c
 800182c:	20006410 	.word	0x20006410
 8001830:	080027b4 	.word	0x080027b4
 8001834:	08002770 	.word	0x08002770
 8001838:	08002774 	.word	0x08002774
 800183c:	08002778 	.word	0x08002778
 8001840:	20000cb8 	.word	0x20000cb8
 8001844:	20000cbc 	.word	0x20000cbc
 8001848:	20000cc5 	.word	0x20000cc5
 800184c:	08002790 	.word	0x08002790
 8001850:	0800279c 	.word	0x0800279c
 8001854:	080027a0 	.word	0x080027a0
 8001858:	2000b440 	.word	0x2000b440
 800185c:	08001951 	.word	0x08001951
 8001860:	080027ac 	.word	0x080027ac
 8001864:	2000b288 	.word	0x2000b288
 8001868:	08001981 	.word	0x08001981
 800186c:	2000b294 	.word	0x2000b294
 8001870:	2000b28c 	.word	0x2000b28c
 8001874:	08001a81 	.word	0x08001a81
 8001878:	2000b290 	.word	0x2000b290
 800187c:	08001a51 	.word	0x08001a51
 8001880:	2000b2b0 	.word	0x2000b2b0
 8001884:	08001ae1 	.word	0x08001ae1
 8001888:	08001ab1 	.word	0x08001ab1
 800188c:	080019b1 	.word	0x080019b1
 8001890:	080019e1 	.word	0x080019e1
 8001894:	2000b2d0 	.word	0x2000b2d0
	...

080018a0 <chTMStartMeasurementX.constprop.16>:
 80018a0:	4b01      	ldr	r3, [pc, #4]	; (80018a8 <chTMStartMeasurementX.constprop.16+0x8>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80018a4:	6083      	str	r3, [r0, #8]
 80018a6:	4770      	bx	lr
 80018a8:	e0001000 	.word	0xe0001000
 80018ac:	00000000 	.word	0x00000000

080018b0 <sdObjectInit.constprop.9>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 80018b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  sdp->vmt = &vmt;
 80018b4:	4605      	mov	r5, r0
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <sdObjectInit.constprop.9+0x64>)
 80018b8:	f845 3b04 	str.w	r3, [r5], #4
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80018bc:	f500 449c 	add.w	r4, r0, #19968	; 0x4e00
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80018c0:	f500 531d 	add.w	r3, r0, #10048	; 0x2740
 80018c4:	3324      	adds	r3, #36	; 0x24
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 80018c6:	f100 0254 	add.w	r2, r0, #84	; 0x54
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80018ca:	f04f 0e00 	mov.w	lr, #0
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
 80018ce:	f100 070c 	add.w	r7, r0, #12
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
 80018d2:	f100 0630 	add.w	r6, r0, #48	; 0x30
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80018d6:	f04f 0801 	mov.w	r8, #1
  oqp->q_counter = size;
 80018da:	f242 7c10 	movw	ip, #10000	; 0x2710
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80018de:	3474      	adds	r4, #116	; 0x74
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80018e0:	f8c0 e014 	str.w	lr, [r0, #20]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 80018e4:	6045      	str	r5, [r0, #4]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 80018e6:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 80018e8:	64c1      	str	r1, [r0, #76]	; 0x4c
  oqp->q_link    = link;
 80018ea:	6500      	str	r0, [r0, #80]	; 0x50
 80018ec:	f880 8008 	strb.w	r8, [r0, #8]
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80018f0:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80018f4:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80018f8:	6404      	str	r4, [r0, #64]	; 0x40
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80018fa:	61c3      	str	r3, [r0, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 80018fc:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80018fe:	6483      	str	r3, [r0, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8001900:	6443      	str	r3, [r0, #68]	; 0x44
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001902:	6182      	str	r2, [r0, #24]
  iqp->q_rdptr   = bp;
 8001904:	6242      	str	r2, [r0, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8001906:	6202      	str	r2, [r0, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001908:	60c7      	str	r7, [r0, #12]
  tqp->p_prev = (thread_t *)tqp;
 800190a:	6107      	str	r7, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800190c:	6306      	str	r6, [r0, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 800190e:	6346      	str	r6, [r0, #52]	; 0x34
 8001910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001914:	08002860 	.word	0x08002860
	...

08001920 <pwmEnableChannelNotification.constprop.4>:
 8001920:	2320      	movs	r3, #32
 8001922:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void pwm_lld_enable_channel_notification(PWMDriver *pwmp,
                                         pwmchannel_t channel) {
  uint32_t dier = pwmp->tim->DIER;
 8001926:	6982      	ldr	r2, [r0, #24]
 8001928:	68d3      	ldr	r3, [r2, #12]
  osalDbgAssert(channel < 4, "callback not supported");
#endif

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & (2 << channel)) == 0) {
 800192a:	0799      	lsls	r1, r3, #30
 800192c:	d405      	bmi.n	800193a <pwmEnableChannelNotification.constprop.4+0x1a>
    pwmp->tim->DIER = dier | (2 << channel);
 800192e:	f043 0302 	orr.w	r3, r3, #2
    pwmp->tim->SR   = ~(2 << channel);
 8001932:	f06f 0102 	mvn.w	r1, #2
#endif

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & (2 << channel)) == 0) {
    pwmp->tim->DIER = dier | (2 << channel);
 8001936:	60d3      	str	r3, [r2, #12]
    pwmp->tim->SR   = ~(2 << channel);
 8001938:	6111      	str	r1, [r2, #16]
 800193a:	2300      	movs	r3, #0
 800193c:	f383 8811 	msr	BASEPRI, r3
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
	...

08001950 <Sinistra_Avanti_up.lto_priv.33>:
  stm32_gpio_t * type4;
  unsigned int port4;
} mapping;

static void Sinistra_Avanti_up() {
  palClearPad(mapping.type2, mapping.port2);
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <Sinistra_Avanti_up.lto_priv.33+0x24>)

  stm32_gpio_t * type4;
  unsigned int port4;
} mapping;

static void Sinistra_Avanti_up() {
 8001952:	b410      	push	{r4}
  palClearPad(mapping.type2, mapping.port2);
 8001954:	68da      	ldr	r2, [r3, #12]
  palSetPad(mapping.type1, mapping.port1);
 8001956:	685c      	ldr	r4, [r3, #4]
  stm32_gpio_t * type4;
  unsigned int port4;
} mapping;

static void Sinistra_Avanti_up() {
  palClearPad(mapping.type2, mapping.port2);
 8001958:	6898      	ldr	r0, [r3, #8]
  palSetPad(mapping.type1, mapping.port1);
 800195a:	6819      	ldr	r1, [r3, #0]
  stm32_gpio_t * type4;
  unsigned int port4;
} mapping;

static void Sinistra_Avanti_up() {
  palClearPad(mapping.type2, mapping.port2);
 800195c:	2301      	movs	r3, #1
 800195e:	fa03 f202 	lsl.w	r2, r3, r2
  palSetPad(mapping.type1, mapping.port1);
 8001962:	40a3      	lsls	r3, r4
  stm32_gpio_t * type4;
  unsigned int port4;
} mapping;

static void Sinistra_Avanti_up() {
  palClearPad(mapping.type2, mapping.port2);
 8001964:	b292      	uxth	r2, r2
  palSetPad(mapping.type1, mapping.port1);
 8001966:	b29b      	uxth	r3, r3
  stm32_gpio_t * type4;
  unsigned int port4;
} mapping;

static void Sinistra_Avanti_up() {
  palClearPad(mapping.type2, mapping.port2);
 8001968:	8342      	strh	r2, [r0, #26]
  palSetPad(mapping.type1, mapping.port1);
 800196a:	830b      	strh	r3, [r1, #24]
}
 800196c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2000b444 	.word	0x2000b444
	...

08001980 <Sinistra_Avanti_Down.lto_priv.34>:

static void Sinistra_Avanti_Down() {
  palClearPad(mapping.type2, mapping.port2);
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <Sinistra_Avanti_Down.lto_priv.34+0x24>)
static void Sinistra_Avanti_up() {
  palClearPad(mapping.type2, mapping.port2);
  palSetPad(mapping.type1, mapping.port1);
}

static void Sinistra_Avanti_Down() {
 8001982:	b410      	push	{r4}
  palClearPad(mapping.type2, mapping.port2);
 8001984:	68da      	ldr	r2, [r3, #12]
  palClearPad(mapping.type1, mapping.port1);
 8001986:	685c      	ldr	r4, [r3, #4]
  palClearPad(mapping.type2, mapping.port2);
  palSetPad(mapping.type1, mapping.port1);
}

static void Sinistra_Avanti_Down() {
  palClearPad(mapping.type2, mapping.port2);
 8001988:	6898      	ldr	r0, [r3, #8]
  palClearPad(mapping.type1, mapping.port1);
 800198a:	6819      	ldr	r1, [r3, #0]
  palClearPad(mapping.type2, mapping.port2);
  palSetPad(mapping.type1, mapping.port1);
}

static void Sinistra_Avanti_Down() {
  palClearPad(mapping.type2, mapping.port2);
 800198c:	2301      	movs	r3, #1
 800198e:	fa03 f202 	lsl.w	r2, r3, r2
  palClearPad(mapping.type1, mapping.port1);
 8001992:	40a3      	lsls	r3, r4
  palClearPad(mapping.type2, mapping.port2);
  palSetPad(mapping.type1, mapping.port1);
}

static void Sinistra_Avanti_Down() {
  palClearPad(mapping.type2, mapping.port2);
 8001994:	b292      	uxth	r2, r2
  palClearPad(mapping.type1, mapping.port1);
 8001996:	b29b      	uxth	r3, r3
  palClearPad(mapping.type2, mapping.port2);
  palSetPad(mapping.type1, mapping.port1);
}

static void Sinistra_Avanti_Down() {
  palClearPad(mapping.type2, mapping.port2);
 8001998:	8342      	strh	r2, [r0, #26]
  palClearPad(mapping.type1, mapping.port1);
 800199a:	834b      	strh	r3, [r1, #26]
}
 800199c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2000b444 	.word	0x2000b444
	...

080019b0 <Destra_Avanti_up.lto_priv.37>:
  palClearPad(mapping.type1, mapping.port1);
  palClearPad(mapping.type2, mapping.port2);
}

static void Destra_Avanti_up() {
  palSetPad(mapping.type3, mapping.port3);
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <Destra_Avanti_up.lto_priv.37+0x24>)
static void Sinistra_Dietro_Down() {
  palClearPad(mapping.type1, mapping.port1);
  palClearPad(mapping.type2, mapping.port2);
}

static void Destra_Avanti_up() {
 80019b2:	b410      	push	{r4}
  palSetPad(mapping.type3, mapping.port3);
 80019b4:	695a      	ldr	r2, [r3, #20]
  palClearPad(mapping.type4, mapping.port4);
 80019b6:	69dc      	ldr	r4, [r3, #28]
  palClearPad(mapping.type1, mapping.port1);
  palClearPad(mapping.type2, mapping.port2);
}

static void Destra_Avanti_up() {
  palSetPad(mapping.type3, mapping.port3);
 80019b8:	6918      	ldr	r0, [r3, #16]
  palClearPad(mapping.type4, mapping.port4);
 80019ba:	6999      	ldr	r1, [r3, #24]
  palClearPad(mapping.type1, mapping.port1);
  palClearPad(mapping.type2, mapping.port2);
}

static void Destra_Avanti_up() {
  palSetPad(mapping.type3, mapping.port3);
 80019bc:	2301      	movs	r3, #1
 80019be:	fa03 f202 	lsl.w	r2, r3, r2
  palClearPad(mapping.type4, mapping.port4);
 80019c2:	40a3      	lsls	r3, r4
  palClearPad(mapping.type1, mapping.port1);
  palClearPad(mapping.type2, mapping.port2);
}

static void Destra_Avanti_up() {
  palSetPad(mapping.type3, mapping.port3);
 80019c4:	b292      	uxth	r2, r2
  palClearPad(mapping.type4, mapping.port4);
 80019c6:	b29b      	uxth	r3, r3
  palClearPad(mapping.type1, mapping.port1);
  palClearPad(mapping.type2, mapping.port2);
}

static void Destra_Avanti_up() {
  palSetPad(mapping.type3, mapping.port3);
 80019c8:	8302      	strh	r2, [r0, #24]
  palClearPad(mapping.type4, mapping.port4);
 80019ca:	834b      	strh	r3, [r1, #26]
}
 80019cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	2000b444 	.word	0x2000b444
	...

080019e0 <Destra_Avanti_Down.lto_priv.38>:

static void Destra_Avanti_Down() {
  palClearPad(mapping.type3, mapping.port3);
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <Destra_Avanti_Down.lto_priv.38+0x24>)
static void Destra_Avanti_up() {
  palSetPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Avanti_Down() {
 80019e2:	b410      	push	{r4}
  palClearPad(mapping.type3, mapping.port3);
 80019e4:	695a      	ldr	r2, [r3, #20]
  palClearPad(mapping.type4, mapping.port4);
 80019e6:	69dc      	ldr	r4, [r3, #28]
  palSetPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Avanti_Down() {
  palClearPad(mapping.type3, mapping.port3);
 80019e8:	6918      	ldr	r0, [r3, #16]
  palClearPad(mapping.type4, mapping.port4);
 80019ea:	6999      	ldr	r1, [r3, #24]
  palSetPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Avanti_Down() {
  palClearPad(mapping.type3, mapping.port3);
 80019ec:	2301      	movs	r3, #1
 80019ee:	fa03 f202 	lsl.w	r2, r3, r2
  palClearPad(mapping.type4, mapping.port4);
 80019f2:	40a3      	lsls	r3, r4
  palSetPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Avanti_Down() {
  palClearPad(mapping.type3, mapping.port3);
 80019f4:	b292      	uxth	r2, r2
  palClearPad(mapping.type4, mapping.port4);
 80019f6:	b29b      	uxth	r3, r3
  palSetPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Avanti_Down() {
  palClearPad(mapping.type3, mapping.port3);
 80019f8:	8342      	strh	r2, [r0, #26]
  palClearPad(mapping.type4, mapping.port4);
 80019fa:	834b      	strh	r3, [r1, #26]
}
 80019fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	2000b444 	.word	0x2000b444
	...

08001a10 <pwm2c1cb>:
}

static void pwm2c1cb(PWMDriver *pwmp) {

  (void)pwmp;
  (*functioPtrRightUP)();
 8001a10:	4b01      	ldr	r3, [pc, #4]	; (8001a18 <pwm2c1cb+0x8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4718      	bx	r3
 8001a16:	bf00      	nop
 8001a18:	2000b28c 	.word	0x2000b28c
 8001a1c:	00000000 	.word	0x00000000

08001a20 <pwm2pcb>:

//pwm callbacks for right engine
static void pwm2pcb(PWMDriver *pwmp) {

  (void)pwmp;
  (*functioPtrRightDOWN)();
 8001a20:	4b01      	ldr	r3, [pc, #4]	; (8001a28 <pwm2pcb+0x8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4718      	bx	r3
 8001a26:	bf00      	nop
 8001a28:	2000b290 	.word	0x2000b290
 8001a2c:	00000000 	.word	0x00000000

08001a30 <pwmc1cb>:
}

static void pwmc1cb(PWMDriver *pwmp) {

  (void)pwmp;
  (*functioPtrLeftUP)();
 8001a30:	4b01      	ldr	r3, [pc, #4]	; (8001a38 <pwmc1cb+0x8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4718      	bx	r3
 8001a36:	bf00      	nop
 8001a38:	2000b440 	.word	0x2000b440
 8001a3c:	00000000 	.word	0x00000000

08001a40 <pwmpcb>:

//pwm callbacks for left engine
static void pwmpcb(PWMDriver *pwmp) {

  (void)pwmp;
  (*functioPtrLeftDOWN)();
 8001a40:	4b01      	ldr	r3, [pc, #4]	; (8001a48 <pwmpcb+0x8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4718      	bx	r3
 8001a46:	bf00      	nop
 8001a48:	2000b288 	.word	0x2000b288
 8001a4c:	00000000 	.word	0x00000000

08001a50 <Destra_Dietro_Down.lto_priv.40>:
  palClearPad(mapping.type3, mapping.port3);
  palSetPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <Destra_Dietro_Down.lto_priv.40+0x24>)
static void Destra_Dietro_up() {
  palClearPad(mapping.type3, mapping.port3);
  palSetPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_Down() {
 8001a52:	b410      	push	{r4}
  palClearPad(mapping.type3, mapping.port3);
 8001a54:	695a      	ldr	r2, [r3, #20]
  palClearPad(mapping.type4, mapping.port4);
 8001a56:	69dc      	ldr	r4, [r3, #28]
  palClearPad(mapping.type3, mapping.port3);
  palSetPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001a58:	6918      	ldr	r0, [r3, #16]
  palClearPad(mapping.type4, mapping.port4);
 8001a5a:	6999      	ldr	r1, [r3, #24]
  palClearPad(mapping.type3, mapping.port3);
  palSetPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	fa03 f202 	lsl.w	r2, r3, r2
  palClearPad(mapping.type4, mapping.port4);
 8001a62:	40a3      	lsls	r3, r4
  palClearPad(mapping.type3, mapping.port3);
  palSetPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001a64:	b292      	uxth	r2, r2
  palClearPad(mapping.type4, mapping.port4);
 8001a66:	b29b      	uxth	r3, r3
  palClearPad(mapping.type3, mapping.port3);
  palSetPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_Down() {
  palClearPad(mapping.type3, mapping.port3);
 8001a68:	8342      	strh	r2, [r0, #26]
  palClearPad(mapping.type4, mapping.port4);
 8001a6a:	834b      	strh	r3, [r1, #26]
}
 8001a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2000b444 	.word	0x2000b444
	...

08001a80 <Destra_Dietro_up.lto_priv.39>:
  palClearPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_up() {
  palClearPad(mapping.type3, mapping.port3);
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <Destra_Dietro_up.lto_priv.39+0x24>)
static void Destra_Avanti_Down() {
  palClearPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_up() {
 8001a82:	b410      	push	{r4}
  palClearPad(mapping.type3, mapping.port3);
 8001a84:	695a      	ldr	r2, [r3, #20]
  palSetPad(mapping.type4, mapping.port4);
 8001a86:	69dc      	ldr	r4, [r3, #28]
  palClearPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_up() {
  palClearPad(mapping.type3, mapping.port3);
 8001a88:	6918      	ldr	r0, [r3, #16]
  palSetPad(mapping.type4, mapping.port4);
 8001a8a:	6999      	ldr	r1, [r3, #24]
  palClearPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_up() {
  palClearPad(mapping.type3, mapping.port3);
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	fa03 f202 	lsl.w	r2, r3, r2
  palSetPad(mapping.type4, mapping.port4);
 8001a92:	40a3      	lsls	r3, r4
  palClearPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_up() {
  palClearPad(mapping.type3, mapping.port3);
 8001a94:	b292      	uxth	r2, r2
  palSetPad(mapping.type4, mapping.port4);
 8001a96:	b29b      	uxth	r3, r3
  palClearPad(mapping.type3, mapping.port3);
  palClearPad(mapping.type4, mapping.port4);
}

static void Destra_Dietro_up() {
  palClearPad(mapping.type3, mapping.port3);
 8001a98:	8342      	strh	r2, [r0, #26]
  palSetPad(mapping.type4, mapping.port4);
 8001a9a:	830b      	strh	r3, [r1, #24]
}
 8001a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	2000b444 	.word	0x2000b444
	...

08001ab0 <Sinistra_Dietro_Down.lto_priv.36>:
  palClearPad(mapping.type1, mapping.port1);
  palSetPad(mapping.type2, mapping.port2);
}

static void Sinistra_Dietro_Down() {
  palClearPad(mapping.type1, mapping.port1);
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <Sinistra_Dietro_Down.lto_priv.36+0x24>)
static void Sinistra_Dietro_up() {
  palClearPad(mapping.type1, mapping.port1);
  palSetPad(mapping.type2, mapping.port2);
}

static void Sinistra_Dietro_Down() {
 8001ab2:	b410      	push	{r4}
  palClearPad(mapping.type1, mapping.port1);
 8001ab4:	685a      	ldr	r2, [r3, #4]
  palClearPad(mapping.type2, mapping.port2);
 8001ab6:	68dc      	ldr	r4, [r3, #12]
  palClearPad(mapping.type1, mapping.port1);
  palSetPad(mapping.type2, mapping.port2);
}

static void Sinistra_Dietro_Down() {
  palClearPad(mapping.type1, mapping.port1);
 8001ab8:	6818      	ldr	r0, [r3, #0]
  palClearPad(mapping.type2, mapping.port2);
 8001aba:	6899      	ldr	r1, [r3, #8]
  palClearPad(mapping.type1, mapping.port1);
  palSetPad(mapping.type2, mapping.port2);
}

static void Sinistra_Dietro_Down() {
  palClearPad(mapping.type1, mapping.port1);
 8001abc:	2301      	movs	r3, #1
 8001abe:	fa03 f202 	lsl.w	r2, r3, r2
  palClearPad(mapping.type2, mapping.port2);
 8001ac2:	40a3      	lsls	r3, r4
  palClearPad(mapping.type1, mapping.port1);
  palSetPad(mapping.type2, mapping.port2);
}

static void Sinistra_Dietro_Down() {
  palClearPad(mapping.type1, mapping.port1);
 8001ac4:	b292      	uxth	r2, r2
  palClearPad(mapping.type2, mapping.port2);
 8001ac6:	b29b      	uxth	r3, r3
  palClearPad(mapping.type1, mapping.port1);
  palSetPad(mapping.type2, mapping.port2);
}

static void Sinistra_Dietro_Down() {
  palClearPad(mapping.type1, mapping.port1);
 8001ac8:	8342      	strh	r2, [r0, #26]
  palClearPad(mapping.type2, mapping.port2);
 8001aca:	834b      	strh	r3, [r1, #26]
}
 8001acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	2000b444 	.word	0x2000b444
	...

08001ae0 <Sinistra_Dietro_up.lto_priv.35>:
  palClearPad(mapping.type2, mapping.port2);
  palClearPad(mapping.type1, mapping.port1);
}

static void Sinistra_Dietro_up() {
  palClearPad(mapping.type1, mapping.port1);
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <Sinistra_Dietro_up.lto_priv.35+0x24>)
static void Sinistra_Avanti_Down() {
  palClearPad(mapping.type2, mapping.port2);
  palClearPad(mapping.type1, mapping.port1);
}

static void Sinistra_Dietro_up() {
 8001ae2:	b410      	push	{r4}
  palClearPad(mapping.type1, mapping.port1);
 8001ae4:	685a      	ldr	r2, [r3, #4]
  palSetPad(mapping.type2, mapping.port2);
 8001ae6:	68dc      	ldr	r4, [r3, #12]
  palClearPad(mapping.type2, mapping.port2);
  palClearPad(mapping.type1, mapping.port1);
}

static void Sinistra_Dietro_up() {
  palClearPad(mapping.type1, mapping.port1);
 8001ae8:	6818      	ldr	r0, [r3, #0]
  palSetPad(mapping.type2, mapping.port2);
 8001aea:	6899      	ldr	r1, [r3, #8]
  palClearPad(mapping.type2, mapping.port2);
  palClearPad(mapping.type1, mapping.port1);
}

static void Sinistra_Dietro_up() {
  palClearPad(mapping.type1, mapping.port1);
 8001aec:	2301      	movs	r3, #1
 8001aee:	fa03 f202 	lsl.w	r2, r3, r2
  palSetPad(mapping.type2, mapping.port2);
 8001af2:	40a3      	lsls	r3, r4
  palClearPad(mapping.type2, mapping.port2);
  palClearPad(mapping.type1, mapping.port1);
}

static void Sinistra_Dietro_up() {
  palClearPad(mapping.type1, mapping.port1);
 8001af4:	b292      	uxth	r2, r2
  palSetPad(mapping.type2, mapping.port2);
 8001af6:	b29b      	uxth	r3, r3
  palClearPad(mapping.type2, mapping.port2);
  palClearPad(mapping.type1, mapping.port1);
}

static void Sinistra_Dietro_up() {
  palClearPad(mapping.type1, mapping.port1);
 8001af8:	8342      	strh	r2, [r0, #26]
  palSetPad(mapping.type2, mapping.port2);
 8001afa:	830b      	strh	r3, [r1, #24]
}
 8001afc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	2000b444 	.word	0x2000b444
	...

08001b10 <chSchWakeupS.constprop.20>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <chSchWakeupS.constprop.20+0x54>)
 8001b12:	6881      	ldr	r1, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001b14:	b470      	push	{r4, r5, r6}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001b16:	699d      	ldr	r5, [r3, #24]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001b18:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001b1a:	68a8      	ldr	r0, [r5, #8]
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8001b1c:	2200      	movs	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001b1e:	4281      	cmp	r1, r0
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8001b20:	6222      	str	r2, [r4, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001b22:	d80b      	bhi.n	8001b3c <chSchWakeupS.constprop.20+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001b24:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8001b26:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	4291      	cmp	r1, r2
 8001b2c:	d9fb      	bls.n	8001b26 <chSchWakeupS.constprop.20+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001b32:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001b34:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001b36:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8001b38:	bc70      	pop	{r4, r5, r6}
 8001b3a:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001b3c:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001b3e:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 8001b40:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001b42:	6891      	ldr	r1, [r2, #8]
 8001b44:	4288      	cmp	r0, r1
 8001b46:	d9fb      	bls.n	8001b40 <chSchWakeupS.constprop.20+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001b48:	6850      	ldr	r0, [r2, #4]
 8001b4a:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001b4c:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001b4e:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001b50:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8001b52:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001b54:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8001b56:	4629      	mov	r1, r5
 8001b58:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8001b5a:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8001b5c:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8001b5e:	f7fe bb97 	b.w	8000290 <_port_switch>
 8001b62:	bf00      	nop
 8001b64:	2000b2d0 	.word	0x2000b2d0
	...

08001b70 <pwmEnableChannel.constprop.6>:
 8001b70:	2320      	movs	r3, #32
 8001b72:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8001b76:	68c3      	ldr	r3, [r0, #12]
                            pwmchannel_t channel,
                            pwmcnt_t width) {

  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
 8001b78:	6982      	ldr	r2, [r0, #24]
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	60c3      	str	r3, [r0, #12]
 8001b80:	2300      	movs	r3, #0
 8001b82:	6351      	str	r1, [r2, #52]	; 0x34
 8001b84:	f383 8811 	msr	BASEPRI, r3
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	0000      	movs	r0, r0
	...

08001b90 <long_to_string_with_divisor.constprop.3>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8001b90:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8001b92:	f100 070b 	add.w	r7, r0, #11
 8001b96:	463c      	mov	r4, r7
 8001b98:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8001b9a:	fbb1 f6f2 	udiv	r6, r1, r2
 8001b9e:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8001ba2:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8001ba6:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8001ba8:	bfc8      	it	gt
 8001baa:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 8001bb4:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 8001bb8:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8001bba:	2d00      	cmp	r5, #0
 8001bbc:	d1ed      	bne.n	8001b9a <long_to_string_with_divisor.constprop.3+0xa>

  i = (int)(p + MAX_FILLER - q);
 8001bbe:	1b3a      	subs	r2, r7, r4
 8001bc0:	4402      	add	r2, r0
 8001bc2:	e001      	b.n	8001bc8 <long_to_string_with_divisor.constprop.3+0x38>
 8001bc4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8001bc8:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8001bcc:	4290      	cmp	r0, r2
 8001bce:	d1f9      	bne.n	8001bc4 <long_to_string_with_divisor.constprop.3+0x34>

  return p;
}
 8001bd0:	bcf0      	pop	{r4, r5, r6, r7}
 8001bd2:	4770      	bx	lr
	...

08001be0 <sendToESP8266.constprop.2>:
/**
 * This function send a command on serial port SD1 to
 * ESP8266. You can listen for the response by calling
 * readAndPrintResponse() function.
 */
void sendToESP8266(char* command, int delay) {
 8001be0:	b508      	push	{r3, lr}
 8001be2:	4601      	mov	r1, r0
  chprintf((BaseChannel *)WIFI_SERIAL, command);
 8001be4:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <sendToESP8266.constprop.2+0x18>)
 8001be6:	f7ff f81b 	bl	8000c20 <chprintf>
  chThdSleepMilliseconds(delay);
 8001bea:	f241 3088 	movw	r0, #5000	; 0x1388
}
 8001bee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * ESP8266. You can listen for the response by calling
 * readAndPrintResponse() function.
 */
void sendToESP8266(char* command, int delay) {
  chprintf((BaseChannel *)WIFI_SERIAL, command);
  chThdSleepMilliseconds(delay);
 8001bf2:	f7ff bbed 	b.w	80013d0 <chThdSleep>
 8001bf6:	bf00      	nop
 8001bf8:	20001598 	.word	0x20001598
 8001bfc:	00000000 	.word	0x00000000

08001c00 <StrStr.part.0.lto_priv.43>:
}
char* StrStr(const char *str, const char *target) {
  if (!*target) return str;
  char *p1 = (char*)str, *p2 = (char*)target;
  char *p1Adv = (char*)str;
  while (*++p2)
 8001c00:	784b      	ldrb	r3, [r1, #1]
  for (i=0; src[i] != '\0'; ++i)
    dest[i] = src[i];
  dest[i] = '\0';
  return dest;
}
char* StrStr(const char *str, const char *target) {
 8001c02:	b4f0      	push	{r4, r5, r6, r7}
  if (!*target) return str;
  char *p1 = (char*)str, *p2 = (char*)target;
  char *p1Adv = (char*)str;
  while (*++p2)
 8001c04:	1c4f      	adds	r7, r1, #1
 8001c06:	b33b      	cbz	r3, 8001c58 <StrStr.part.0.lto_priv.43+0x58>
 8001c08:	463b      	mov	r3, r7
 8001c0a:	4606      	mov	r6, r0
 8001c0c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    p1Adv++;
 8001c10:	3601      	adds	r6, #1
}
char* StrStr(const char *str, const char *target) {
  if (!*target) return str;
  char *p1 = (char*)str, *p2 = (char*)target;
  char *p1Adv = (char*)str;
  while (*++p2)
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	d1fa      	bne.n	8001c0c <StrStr.part.0.lto_priv.43+0xc>
    p1Adv++;
  while (*p1Adv) {
 8001c16:	7833      	ldrb	r3, [r6, #0]
 8001c18:	b1cb      	cbz	r3, 8001c4e <StrStr.part.0.lto_priv.43+0x4e>
    char *p1Begin = p1;
    p2 = (char*)target;
    while (*p1 && *p2 && *p1 == *p2) {
 8001c1a:	7803      	ldrb	r3, [r0, #0]
 8001c1c:	b1d3      	cbz	r3, 8001c54 <StrStr.part.0.lto_priv.43+0x54>
 8001c1e:	780a      	ldrb	r2, [r1, #0]
 8001c20:	b1b2      	cbz	r2, 8001c50 <StrStr.part.0.lto_priv.43+0x50>
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d10e      	bne.n	8001c44 <StrStr.part.0.lto_priv.43+0x44>
 8001c26:	4605      	mov	r5, r0
 8001c28:	463b      	mov	r3, r7
 8001c2a:	e004      	b.n	8001c36 <StrStr.part.0.lto_priv.43+0x36>
 8001c2c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8001c30:	b174      	cbz	r4, 8001c50 <StrStr.part.0.lto_priv.43+0x50>
 8001c32:	42a2      	cmp	r2, r4
 8001c34:	d106      	bne.n	8001c44 <StrStr.part.0.lto_priv.43+0x44>
 8001c36:	f815 2f01 	ldrb.w	r2, [r5, #1]!
      p1++;
      p2++;
 8001c3a:	461c      	mov	r4, r3
  while (*++p2)
    p1Adv++;
  while (*p1Adv) {
    char *p1Begin = p1;
    p2 = (char*)target;
    while (*p1 && *p2 && *p1 == *p2) {
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d1f5      	bne.n	8001c2c <StrStr.part.0.lto_priv.43+0x2c>
      p1++;
      p2++;
    }
    if (!*p2)
 8001c40:	7823      	ldrb	r3, [r4, #0]
 8001c42:	b12b      	cbz	r3, 8001c50 <StrStr.part.0.lto_priv.43+0x50>
  if (!*target) return str;
  char *p1 = (char*)str, *p2 = (char*)target;
  char *p1Adv = (char*)str;
  while (*++p2)
    p1Adv++;
  while (*p1Adv) {
 8001c44:	f816 3f01 	ldrb.w	r3, [r6, #1]!
      p1++;
      p2++;
    }
    if (!*p2)
      return p1Begin;
    p1 = p1Begin + 1;
 8001c48:	3001      	adds	r0, #1
  if (!*target) return str;
  char *p1 = (char*)str, *p2 = (char*)target;
  char *p1Adv = (char*)str;
  while (*++p2)
    p1Adv++;
  while (*p1Adv) {
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1e5      	bne.n	8001c1a <StrStr.part.0.lto_priv.43+0x1a>
    if (!*p2)
      return p1Begin;
    p1 = p1Begin + 1;
    p1Adv++;
  }
  return NULL;
 8001c4e:	4618      	mov	r0, r3
}
 8001c50:	bcf0      	pop	{r4, r5, r6, r7}
 8001c52:	4770      	bx	lr
  while (*++p2)
    p1Adv++;
  while (*p1Adv) {
    char *p1Begin = p1;
    p2 = (char*)target;
    while (*p1 && *p2 && *p1 == *p2) {
 8001c54:	460c      	mov	r4, r1
 8001c56:	e7f3      	b.n	8001c40 <StrStr.part.0.lto_priv.43+0x40>
}
char* StrStr(const char *str, const char *target) {
  if (!*target) return str;
  char *p1 = (char*)str, *p2 = (char*)target;
  char *p1Adv = (char*)str;
  while (*++p2)
 8001c58:	4606      	mov	r6, r0
 8001c5a:	e7dc      	b.n	8001c16 <StrStr.part.0.lto_priv.43+0x16>
 8001c5c:	0000      	movs	r0, r0
	...

08001c60 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8001c60:	4bb9      	ldr	r3, [pc, #740]	; (8001f48 <main+0x2e8>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001c62:	4cba      	ldr	r4, [pc, #744]	; (8001f4c <main+0x2ec>)
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6a:	2200      	movs	r2, #0
static SerialConfig uartCfgMonitor = {9600, };

/*
 * Application entry point.
 */
int main(void) {
 8001c6c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001c70:	6119      	str	r1, [r3, #16]
 8001c72:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8001c74:	6958      	ldr	r0, [r3, #20]
 8001c76:	6159      	str	r1, [r3, #20]
 8001c78:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001c7a:	6a18      	ldr	r0, [r3, #32]
 8001c7c:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8001c80:	6218      	str	r0, [r3, #32]
 8001c82:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8001c84:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001c86:	6259      	str	r1, [r3, #36]	; 0x24
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8001c8a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001c8c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001c90:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001c92:	6821      	ldr	r1, [r4, #0]
 8001c94:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001c98:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001c9a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001c9c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001ca0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001ca4:	b08b      	sub	sp, #44	; 0x2c
 8001ca6:	d003      	beq.n	8001cb0 <main+0x50>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8001ca8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001cac:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001cae:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8001cb0:	f8df e298 	ldr.w	lr, [pc, #664]	; 8001f4c <main+0x2ec>
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8001cb4:	4ca4      	ldr	r4, [pc, #656]	; (8001f48 <main+0x2e8>)
 8001cb6:	f8de 5004 	ldr.w	r5, [lr, #4]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001cba:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 8001fb4 <main+0x354>
 8001cbe:	4ea4      	ldr	r6, [pc, #656]	; (8001f50 <main+0x2f0>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8001cc0:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 8001fb8 <main+0x358>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001cc4:	48a3      	ldr	r0, [pc, #652]	; (8001f54 <main+0x2f4>)
 8001cc6:	4ba4      	ldr	r3, [pc, #656]	; (8001f58 <main+0x2f8>)
 8001cc8:	49a4      	ldr	r1, [pc, #656]	; (8001f5c <main+0x2fc>)
 8001cca:	4aa5      	ldr	r2, [pc, #660]	; (8001f60 <main+0x300>)
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 8001ccc:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8001fbc <main+0x35c>
 8001cd0:	4fa4      	ldr	r7, [pc, #656]	; (8001f64 <main+0x304>)
 8001cd2:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8001cd6:	f8ce 5004 	str.w	r5, [lr, #4]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8001cda:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001cdc:	f045 051f 	orr.w	r5, r5, #31
 8001ce0:	6325      	str	r5, [r4, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8001ce2:	f8d4 c050 	ldr.w	ip, [r4, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001ce6:	2500      	movs	r5, #0
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8001ce8:	f04c 0c1f 	orr.w	ip, ip, #31
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8001cec:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8001cf0:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8001cf4:	f64f 7adf 	movw	sl, #65503	; 0xffdf
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001cf8:	f8c9 5004 	str.w	r5, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8001cfc:	f44f 4cee 	mov.w	ip, #30464	; 0x7700
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8001d00:	f8c9 e008 	str.w	lr, [r9, #8]
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8001d04:	4c98      	ldr	r4, [pc, #608]	; (8001f68 <main+0x308>)

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8001d06:	f8c9 b00c 	str.w	fp, [r9, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8001d0a:	f44f 2e2a 	mov.w	lr, #696320	; 0xaa000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8001d0e:	f8c9 a014 	str.w	sl, [r9, #20]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8001d12:	f04f 3bff 	mov.w	fp, #4294967295
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8001d16:	f8c9 c020 	str.w	ip, [r9, #32]
  gpiop->AFRH    = config->afrh;
 8001d1a:	f8c9 e024 	str.w	lr, [r9, #36]	; 0x24

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8001d1e:	f04f 3c55 	mov.w	ip, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8001d22:	f8c9 4000 	str.w	r4, [r9]
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8001d26:	f64f 7eff 	movw	lr, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8001d2a:	2480      	movs	r4, #128	; 0x80
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001d2c:	6075      	str	r5, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001d2e:	f8c6 b008 	str.w	fp, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8001d32:	f8c6 c00c 	str.w	ip, [r6, #12]
  gpiop->ODR     = config->odr;
 8001d36:	f8c6 e014 	str.w	lr, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8001d3a:	6235      	str	r5, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8001d3c:	6275      	str	r5, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001d3e:	6034      	str	r4, [r6, #0]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8001d40:	4c8a      	ldr	r4, [pc, #552]	; (8001f6c <main+0x30c>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001d42:	6045      	str	r5, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001d44:	f8c0 b008 	str.w	fp, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8001d48:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 8001d4a:	f8c0 e014 	str.w	lr, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8001d4e:	6205      	str	r5, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8001d50:	6245      	str	r5, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001d52:	6005      	str	r5, [r0, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001d54:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001d56:	f8c3 b008 	str.w	fp, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8001d5a:	f8c3 c00c 	str.w	ip, [r3, #12]
  gpiop->ODR     = config->odr;
 8001d5e:	f8c3 e014 	str.w	lr, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8001d62:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8001d64:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001d66:	601d      	str	r5, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001d68:	604d      	str	r5, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001d6a:	f8c1 b008 	str.w	fp, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8001d6e:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8001d72:	f8c1 e014 	str.w	lr, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8001d76:	620d      	str	r5, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001d78:	624d      	str	r5, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001d7a:	600d      	str	r5, [r1, #0]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8001d7c:	497c      	ldr	r1, [pc, #496]	; (8001f70 <main+0x310>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001d7e:	6055      	str	r5, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001d80:	f8c2 b008 	str.w	fp, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001d84:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 8001d86:	f8c2 e014 	str.w	lr, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001d8a:	6215      	str	r5, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001d8c:	6255      	str	r5, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001d8e:	6015      	str	r5, [r2, #0]

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
  PWMD1.tim = STM32_TIM1;
 8001d90:	f5a2 328e 	sub.w	r2, r2, #72704	; 0x11c00
 8001d94:	2301      	movs	r3, #1

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
  PWMD3.channels = STM32_TIM3_CHANNELS;
  PWMD3.tim = STM32_TIM3;
 8001d96:	f8df c228 	ldr.w	ip, [pc, #552]	; 8001fc0 <main+0x360>

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
  PWMD1.tim = STM32_TIM1;
 8001d9a:	f8c8 2018 	str.w	r2, [r8, #24]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8001d9e:	4875      	ldr	r0, [pc, #468]	; (8001f74 <main+0x314>)
 8001da0:	4975      	ldr	r1, [pc, #468]	; (8001f78 <main+0x318>)

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
  PWMD3.channels = STM32_TIM3_CHANNELS;
  PWMD3.tim = STM32_TIM3;
 8001da2:	f8c7 c018 	str.w	ip, [r7, #24]
void pwm_lld_init(void) {

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8001da6:	f04f 0204 	mov.w	r2, #4
  SD1.usart = USART1;
 8001daa:	f644 6a74 	movw	sl, #20084	; 0x4e74
 8001dae:	f888 3000 	strb.w	r3, [r8]
 8001db2:	f888 2010 	strb.w	r2, [r8, #16]
 8001db6:	703b      	strb	r3, [r7, #0]
 8001db8:	9301      	str	r3, [sp, #4]
#endif

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
  PWMD3.channels = STM32_TIM3_CHANNELS;
 8001dba:	743a      	strb	r2, [r7, #16]
  pwmp->config   = NULL;
 8001dbc:	f8c8 5004 	str.w	r5, [r8, #4]
  pwmp->enabled  = 0;
 8001dc0:	f8c8 500c 	str.w	r5, [r8, #12]
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  pwmp->config   = NULL;
 8001dc4:	607d      	str	r5, [r7, #4]
  pwmp->enabled  = 0;
 8001dc6:	60fd      	str	r5, [r7, #12]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8001dc8:	f7ff fd72 	bl	80018b0 <sdObjectInit.constprop.9>
  SD1.usart = USART1;
 8001dcc:	4b69      	ldr	r3, [pc, #420]	; (8001f74 <main+0x314>)
 8001dce:	4a6b      	ldr	r2, [pc, #428]	; (8001f7c <main+0x31c>)
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8001dd0:	496b      	ldr	r1, [pc, #428]	; (8001f80 <main+0x320>)
 8001dd2:	486c      	ldr	r0, [pc, #432]	; (8001f84 <main+0x324>)
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 8001dd4:	f843 200a 	str.w	r2, [r3, sl]
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8001dd8:	f7ff fd6a 	bl	80018b0 <sdObjectInit.constprop.9>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001ddc:	4b5a      	ldr	r3, [pc, #360]	; (8001f48 <main+0x2e8>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001dde:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 8001fc4 <main+0x364>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001de2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8001de4:	4a68      	ldr	r2, [pc, #416]	; (8001f88 <main+0x328>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001de6:	4969      	ldr	r1, [pc, #420]	; (8001f8c <main+0x32c>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001de8:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8001fc8 <main+0x368>
 8001dec:	f040 0001 	orr.w	r0, r0, #1
 8001df0:	6418      	str	r0, [r3, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001df2:	f8de 0008 	ldr.w	r0, [lr, #8]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001df6:	9b01      	ldr	r3, [sp, #4]

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001df8:	f040 0001 	orr.w	r0, r0, #1
 8001dfc:	f8ce 0008 	str.w	r0, [lr, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001e00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e04:	f242 04cf 	movw	r4, #8399	; 0x20cf
 8001e08:	6284      	str	r4, [r0, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001e0a:	f8c0 b02c 	str.w	fp, [r0, #44]	; 0x2c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e0e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  STM32_ST_TIM->CCMR1  = 0;
 8001e12:	6185      	str	r5, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001e14:	6345      	str	r5, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8001e16:	60c5      	str	r5, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 8001e18:	6045      	str	r5, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001e1a:	6143      	str	r3, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001e1c:	6003      	str	r3, [r0, #0]
 8001e1e:	9303      	str	r3, [sp, #12]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e20:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001e24:	f881 331c 	strb.w	r3, [r1, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e28:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
  SD2.usart = USART2;
 8001e2c:	4b55      	ldr	r3, [pc, #340]	; (8001f84 <main+0x324>)
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e2e:	600c      	str	r4, [r1, #0]
 8001e30:	6095      	str	r5, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e32:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8001e36:	4956      	ldr	r1, [pc, #344]	; (8001f90 <main+0x330>)
 8001e38:	f843 100a 	str.w	r1, [r3, sl]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8001e3c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8001e40:	ea0e 0101 	and.w	r1, lr, r1
  reg_value  =  (reg_value                                   |
 8001e44:	ea41 0c0c 	orr.w	ip, r1, ip

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001e48:	4b52      	ldr	r3, [pc, #328]	; (8001f94 <main+0x334>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001e4a:	f8c2 c00c 	str.w	ip, [r2, #12]
 8001e4e:	68d9      	ldr	r1, [r3, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001e50:	4c51      	ldr	r4, [pc, #324]	; (8001f98 <main+0x338>)
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001e52:	4852      	ldr	r0, [pc, #328]	; (8001f9c <main+0x33c>)
  tqp->p_prev = (thread_t *)tqp;
 8001e54:	6064      	str	r4, [r4, #4]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001e56:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001e5a:	60d9      	str	r1, [r3, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001e5c:	6801      	ldr	r1, [r0, #0]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8001e5e:	60a5      	str	r5, [r4, #8]
 8001e60:	f041 0101 	orr.w	r1, r1, #1
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	f04f 0a20 	mov.w	sl, #32
 8001e68:	f04f 0310 	mov.w	r3, #16
 8001e6c:	6001      	str	r1, [r0, #0]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8001e6e:	f104 0e1c 	add.w	lr, r4, #28
 8001e72:	77d3      	strb	r3, [r2, #31]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8001e74:	a804      	add	r0, sp, #16

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8001e76:	2300      	movs	r3, #0
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8001e78:	6124      	str	r4, [r4, #16]
 8001e7a:	f882 a022 	strb.w	sl, [r2, #34]	; 0x22
 8001e7e:	2200      	movs	r2, #0
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8001e80:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001e84:	6024      	str	r4, [r4, #0]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8001e86:	6164      	str	r4, [r4, #20]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8001e88:	f8c4 e01c 	str.w	lr, [r4, #28]
 8001e8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001e90:	f8c4 e020 	str.w	lr, [r4, #32]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8001e94:	f8cd b010 	str.w	fp, [sp, #16]
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8001e98:	62a5      	str	r5, [r4, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8001e9a:	6765      	str	r5, [r4, #116]	; 0x74
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8001e9c:	9505      	str	r5, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 8001e9e:	9506      	str	r5, [sp, #24]
  tmp->n          = (ucnt_t)0;
 8001ea0:	9507      	str	r5, [sp, #28]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8001ea2:	f7ff fcfd 	bl	80018a0 <chTMStartMeasurementX.constprop.16>
  chTMStopMeasurementX(&tm);
 8001ea6:	a804      	add	r0, sp, #16
 8001ea8:	f7ff fa42 	bl	8001330 <chTMStopMeasurementX>
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001eac:	483c      	ldr	r0, [pc, #240]	; (8001fa0 <main+0x340>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001eae:	493d      	ldr	r1, [pc, #244]	; (8001fa4 <main+0x344>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001eb0:	f8df b118 	ldr.w	fp, [pc, #280]	; 8001fcc <main+0x36c>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8001eb4:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <main+0x348>)
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001eb6:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
 8001eba:	f020 0007 	bic.w	r0, r0, #7
 8001ebe:	9001      	str	r0, [sp, #4]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001ec0:	6960      	ldr	r0, [r4, #20]
 8001ec2:	6460      	str	r0, [r4, #68]	; 0x44
 8001ec4:	9801      	ldr	r0, [sp, #4]
 8001ec6:	f8cb 0000 	str.w	r0, [fp]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001eca:	f021 0307 	bic.w	r3, r1, #7
 8001ece:	6960      	ldr	r0, [r4, #20]
  ch.tm.offset = tm.last;
 8001ed0:	9906      	ldr	r1, [sp, #24]
 8001ed2:	9302      	str	r3, [sp, #8]
 8001ed4:	f102 0e10 	add.w	lr, r2, #16
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001ed8:	9b03      	ldr	r3, [sp, #12]
 8001eda:	6761      	str	r1, [r4, #116]	; 0x74
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001edc:	f04f 0c40 	mov.w	ip, #64	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001ee0:	f104 0130 	add.w	r1, r4, #48	; 0x30
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001ee4:	6195      	str	r5, [r2, #24]
 8001ee6:	f8c2 e010 	str.w	lr, [r2, #16]
  tqp->p_prev = (thread_t *)tqp;
 8001eea:	f8c2 e014 	str.w	lr, [r2, #20]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001eee:	66a5      	str	r5, [r4, #104]	; 0x68
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8001ef0:	6665      	str	r5, [r4, #100]	; 0x64
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001ef2:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001ef6:	64a5      	str	r5, [r4, #72]	; 0x48
  REG_INSERT(tp);
 8001ef8:	6424      	str	r4, [r4, #64]	; 0x40
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001efa:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001efe:	f8c4 c06c 	str.w	ip, [r4, #108]	; 0x6c
 8001f02:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8001fd0 <main+0x370>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001f06:	6101      	str	r1, [r0, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001f08:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8001f0c:	6161      	str	r1, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8001f0e:	61a1      	str	r1, [r4, #24]
 8001f10:	4926      	ldr	r1, [pc, #152]	; (8001fac <main+0x34c>)
  default_heap.h_free.h.u.next = NULL;
 8001f12:	6095      	str	r5, [r2, #8]
  default_heap.h_free.h.size = 0;
 8001f14:	60d5      	str	r5, [r2, #12]
 8001f16:	6560      	str	r0, [r4, #84]	; 0x54
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8001f18:	6011      	str	r1, [r2, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001f1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f1e:	9a02      	ldr	r2, [sp, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001f20:	f8cd c00c 	str.w	ip, [sp, #12]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8001f24:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8001f28:	65a0      	str	r0, [r4, #88]	; 0x58
  tqp->p_prev = (thread_t *)tqp;
 8001f2a:	65e0      	str	r0, [r4, #92]	; 0x5c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001f2c:	f04f 0b02 	mov.w	fp, #2
 8001f30:	f8ce 2000 	str.w	r2, [lr]
 8001f34:	f385 8811 	msr	BASEPRI, r5
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001f38:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8001f3a:	69a2      	ldr	r2, [r4, #24]
 8001f3c:	491c      	ldr	r1, [pc, #112]	; (8001fb0 <main+0x350>)
 8001f3e:	6191      	str	r1, [r2, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001f40:	f38a 8811 	msr	BASEPRI, sl
 8001f44:	e046      	b.n	8001fd4 <main+0x374>
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	40020400 	.word	0x40020400
 8001f54:	40020800 	.word	0x40020800
 8001f58:	40020c00 	.word	0x40020c00
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40021c00 	.word	0x40021c00
 8001f64:	2000b2b0 	.word	0x2000b2b0
 8001f68:	2a8004a0 	.word	0x2a8004a0
 8001f6c:	51555555 	.word	0x51555555
 8001f70:	55555550 	.word	0x55555550
 8001f74:	20001598 	.word	0x20001598
 8001f78:	080002d1 	.word	0x080002d1
 8001f7c:	40011000 	.word	0x40011000
 8001f80:	080002c1 	.word	0x080002c1
 8001f84:	20006410 	.word	0x20006410
 8001f88:	e000ed00 	.word	0xe000ed00
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	40004400 	.word	0x40004400
 8001f94:	e000edf0 	.word	0xe000edf0
 8001f98:	2000b2d0 	.word	0x2000b2d0
 8001f9c:	e0001000 	.word	0xe0001000
 8001fa0:	2000b46f 	.word	0x2000b46f
 8001fa4:	20018000 	.word	0x20018000
 8001fa8:	2000b420 	.word	0x2000b420
 8001fac:	080004c1 	.word	0x080004c1
 8001fb0:	08002840 	.word	0x08002840
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	64155105 	.word	0x64155105
 8001fbc:	2000b294 	.word	0x2000b294
 8001fc0:	40000400 	.word	0x40000400
 8001fc4:	e0042000 	.word	0xe0042000
 8001fc8:	05fa0300 	.word	0x05fa0300
 8001fcc:	20000cc8 	.word	0x20000cc8
 8001fd0:	2000b464 	.word	0x2000b464
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001fd4:	6961      	ldr	r1, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001fd6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001fda:	f504 7296 	add.w	r2, r4, #300	; 0x12c
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001fde:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001fe2:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001fe6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001fea:	9301      	str	r3, [sp, #4]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001fec:	f104 0278 	add.w	r2, r4, #120	; 0x78

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001ff0:	4b7c      	ldr	r3, [pc, #496]	; (80021e4 <main+0x584>)
 8001ff2:	487d      	ldr	r0, [pc, #500]	; (80021e8 <main+0x588>)
 8001ff4:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001ff8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001ffc:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002000:	f884 b094 	strb.w	fp, [r4, #148]	; 0x94
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002004:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8002008:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800200c:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8002010:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  REG_INSERT(tp);
 8002014:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002018:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800201c:	4610      	mov	r0, r2
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800201e:	610a      	str	r2, [r1, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002020:	f104 019c 	add.w	r1, r4, #156	; 0x9c
 8002024:	6162      	str	r2, [r4, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002026:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800202a:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800202e:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
  tqp->p_prev = (thread_t *)tqp;
 8002032:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002036:	f7ff fd6b 	bl	8001b10 <chSchWakeupS.constprop.20>
 800203a:	f385 8811 	msr	BASEPRI, r5
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800203e:	4a6b      	ldr	r2, [pc, #428]	; (80021ec <main+0x58c>)
 8002040:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90

  /*
   * Activates the serial driver 2 using the driver default configuration.
   */
  /****************WIFI_SETUP*********************/
  sdStart(MONITOR_SERIAL, &uartCfgMonitor);
 8002044:	496a      	ldr	r1, [pc, #424]	; (80021f0 <main+0x590>)
 8002046:	486b      	ldr	r0, [pc, #428]	; (80021f4 <main+0x594>)
 8002048:	f7ff f8ea 	bl	8001220 <sdStart>
  palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(7)); // USART1 TX.
 800204c:	4648      	mov	r0, r9
 800204e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002052:	f240 3282 	movw	r2, #898	; 0x382
 8002056:	f7ff f87b 	bl	8001150 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(7)); // USART1 RX.
 800205a:	4648      	mov	r0, r9
 800205c:	f240 3282 	movw	r2, #898	; 0x382
 8002060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002064:	f7ff f874 	bl	8001150 <_pal_lld_setgroupmode>
  sdStart(WIFI_SERIAL, &uartCfgWiFi);
 8002068:	4863      	ldr	r0, [pc, #396]	; (80021f8 <main+0x598>)
 800206a:	4964      	ldr	r1, [pc, #400]	; (80021fc <main+0x59c>)
 800206c:	f7ff f8d8 	bl	8001220 <sdStart>
 8002070:	f38a 8811 	msr	BASEPRI, sl

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002074:	4a62      	ldr	r2, [pc, #392]	; (8002200 <main+0x5a0>)
 8002076:	4b5b      	ldr	r3, [pc, #364]	; (80021e4 <main+0x584>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002078:	6960      	ldr	r0, [r4, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800207a:	f8c2 38c4 	str.w	r3, [r2, #2244]	; 0x8c4
 800207e:	4961      	ldr	r1, [pc, #388]	; (8002204 <main+0x5a4>)
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002080:	9b01      	ldr	r3, [sp, #4]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002082:	f8dd c00c 	ldr.w	ip, [sp, #12]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002086:	7793      	strb	r3, [r2, #30]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002088:	f8c2 18a4 	str.w	r1, [r2, #2212]	; 0x8a4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800208c:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8002090:	f602 0ea4 	addw	lr, r2, #2212	; 0x8a4
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002094:	f102 0124 	add.w	r1, r2, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002098:	6150      	str	r0, [r2, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800209a:	f8c2 58a8 	str.w	r5, [r2, #2216]	; 0x8a8
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800209e:	f882 b01c 	strb.w	fp, [r2, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80020a2:	7755      	strb	r5, [r2, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80020a4:	f8c2 c03c 	str.w	ip, [r2, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 80020a8:	6395      	str	r5, [r2, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80020aa:	6355      	str	r5, [r2, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80020ac:	6195      	str	r5, [r2, #24]
  REG_INSERT(tp);
 80020ae:	6114      	str	r4, [r2, #16]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80020b0:	f8c2 c008 	str.w	ip, [r2, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80020b4:	6102      	str	r2, [r0, #16]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80020b6:	f8c2 e00c 	str.w	lr, [r2, #12]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80020ba:	4610      	mov	r0, r2
 80020bc:	6251      	str	r1, [r2, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80020be:	6293      	str	r3, [r2, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 80020c0:	62d3      	str	r3, [r2, #44]	; 0x2c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80020c2:	6162      	str	r2, [r4, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80020c4:	f7ff fd24 	bl	8001b10 <chSchWakeupS.constprop.20>
 80020c8:	f385 8811 	msr	BASEPRI, r5
 * ESP8266_setAsAP();
 */
void ESP8266_setAsAP(void) {
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Uart1EVT_Thread,
                    NULL);
  sendToESP8266(ESP8266_RESET, COMMAND_SLEEP);
 80020cc:	484e      	ldr	r0, [pc, #312]	; (8002208 <main+0x5a8>)
 80020ce:	f7ff fd87 	bl	8001be0 <sendToESP8266.constprop.2>
  sendToESP8266(ESP8266_SET_AS_ACCESS_POINT, COMMAND_SLEEP);
 80020d2:	484e      	ldr	r0, [pc, #312]	; (800220c <main+0x5ac>)
 80020d4:	f7ff fd84 	bl	8001be0 <sendToESP8266.constprop.2>
  sendToESP8266(ESP8266_GET_IP_ADD, COMMAND_SLEEP);
 80020d8:	484d      	ldr	r0, [pc, #308]	; (8002210 <main+0x5b0>)
 80020da:	f7ff fd81 	bl	8001be0 <sendToESP8266.constprop.2>
  sendToESP8266(ESP8266_MULTIPLE_CONNECTION, COMMAND_SLEEP);
 80020de:	484d      	ldr	r0, [pc, #308]	; (8002214 <main+0x5b4>)
 80020e0:	f7ff fd7e 	bl	8001be0 <sendToESP8266.constprop.2>
  sendToESP8266(ESP8266_START_SERVER, COMMAND_SLEEP);
 80020e4:	484c      	ldr	r0, [pc, #304]	; (8002218 <main+0x5b8>)
 80020e6:	f7ff fd7b 	bl	8001be0 <sendToESP8266.constprop.2>
  velocity[1] = ri;

}

void init_motor() {
  mapping.type1 = GPIOA;
 80020ea:	4b4c      	ldr	r3, [pc, #304]	; (800221c <main+0x5bc>)

  mapping.type2 = GPIOB;
  mapping.port2 = GPIOB_PIN10;

  mapping.type3 = GPIOB;
  mapping.port3 = GPIOB_PIN4;
 80020ec:	2404      	movs	r4, #4

}

void init_motor() {
  mapping.type1 = GPIOA;
  mapping.port1 = GPIOA_PIN8;
 80020ee:	f04f 0c08 	mov.w	ip, #8

  mapping.type2 = GPIOB;
  mapping.port2 = GPIOB_PIN10;
 80020f2:	f04f 0e0a 	mov.w	lr, #10
  mapping.port3 = GPIOB_PIN4;

  mapping.type4 = GPIOB;
  mapping.port4 = GPIOB_PIN5;

  palSetPadMode(mapping.type1, mapping.port1,
 80020f6:	4648      	mov	r0, r9

  mapping.type2 = GPIOB;
  mapping.port2 = GPIOB_PIN10;

  mapping.type3 = GPIOB;
  mapping.port3 = GPIOB_PIN4;
 80020f8:	615c      	str	r4, [r3, #20]

  mapping.type4 = GPIOB;
  mapping.port4 = GPIOB_PIN5;

  palSetPadMode(mapping.type1, mapping.port1,
 80020fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fe:	2219      	movs	r2, #25

  mapping.type3 = GPIOB;
  mapping.port3 = GPIOB_PIN4;

  mapping.type4 = GPIOB;
  mapping.port4 = GPIOB_PIN5;
 8002100:	2405      	movs	r4, #5

}

void init_motor() {
  mapping.type1 = GPIOA;
  mapping.port1 = GPIOA_PIN8;
 8002102:	f8c3 c004 	str.w	ip, [r3, #4]

  mapping.type2 = GPIOB;
  mapping.port2 = GPIOB_PIN10;
 8002106:	f8c3 e00c 	str.w	lr, [r3, #12]
  velocity[1] = ri;

}

void init_motor() {
  mapping.type1 = GPIOA;
 800210a:	f8c3 9000 	str.w	r9, [r3]
  mapping.port1 = GPIOA_PIN8;

  mapping.type2 = GPIOB;
 800210e:	609e      	str	r6, [r3, #8]
  mapping.port2 = GPIOB_PIN10;

  mapping.type3 = GPIOB;
 8002110:	611e      	str	r6, [r3, #16]
  mapping.port3 = GPIOB_PIN4;

  mapping.type4 = GPIOB;
 8002112:	619e      	str	r6, [r3, #24]
  mapping.port4 = GPIOB_PIN5;
 8002114:	61dc      	str	r4, [r3, #28]

  palSetPadMode(mapping.type1, mapping.port1,
 8002116:	f7ff f81b 	bl	8001150 <_pal_lld_setgroupmode>
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type1, mapping.port1);
 800211a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800211e:	f8a9 301a 	strh.w	r3, [r9, #26]
  palSetPadMode(mapping.type2, mapping.port2,
 8002122:	4630      	mov	r0, r6
 8002124:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002128:	2219      	movs	r2, #25
 800212a:	f7ff f811 	bl	8001150 <_pal_lld_setgroupmode>
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type2, mapping.port2);
 800212e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002132:	8373      	strh	r3, [r6, #26]
  palSetPadMode(mapping.type3, mapping.port3,
 8002134:	4630      	mov	r0, r6
 8002136:	2110      	movs	r1, #16
 8002138:	2219      	movs	r2, #25
 800213a:	f7ff f809 	bl	8001150 <_pal_lld_setgroupmode>
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type3, mapping.port3);
 800213e:	f04f 0310 	mov.w	r3, #16
 8002142:	8373      	strh	r3, [r6, #26]
  palSetPadMode(mapping.type4, mapping.port4,
 8002144:	4630      	mov	r0, r6
 8002146:	4651      	mov	r1, sl
 8002148:	2219      	movs	r2, #25
 800214a:	f7ff f801 	bl	8001150 <_pal_lld_setgroupmode>
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type4, mapping.port4);
  functioPtrLeftUP = &Sinistra_Avanti_up;
  functioPtrLeftDOWN = &Sinistra_Avanti_Down;
 800214e:	4c34      	ldr	r4, [pc, #208]	; (8002220 <main+0x5c0>)
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type3, mapping.port3);
  palSetPadMode(mapping.type4, mapping.port4,
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type4, mapping.port4);
  functioPtrLeftUP = &Sinistra_Avanti_up;
 8002150:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 800223c <main+0x5dc>
  functioPtrLeftDOWN = &Sinistra_Avanti_Down;

  functioPtrRightUP = &Destra_Avanti_up;
 8002154:	4933      	ldr	r1, [pc, #204]	; (8002224 <main+0x5c4>)
  functioPtrRightDOWN = &Destra_Avanti_Down;
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <main+0x5c8>)
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type3, mapping.port3);
  palSetPadMode(mapping.type4, mapping.port4,
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type4, mapping.port4);
  functioPtrLeftUP = &Sinistra_Avanti_up;
 8002158:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8002240 <main+0x5e0>
  functioPtrLeftDOWN = &Sinistra_Avanti_Down;
 800215c:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 8002244 <main+0x5e4>

  functioPtrRightUP = &Destra_Avanti_up;
 8002160:	4832      	ldr	r0, [pc, #200]	; (800222c <main+0x5cc>)
  functioPtrRightDOWN = &Destra_Avanti_Down;
 8002162:	4a33      	ldr	r2, [pc, #204]	; (8002230 <main+0x5d0>)
  palSetPadMode(mapping.type3, mapping.port3,
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type3, mapping.port3);
  palSetPadMode(mapping.type4, mapping.port4,
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
  palClearPad(mapping.type4, mapping.port4);
 8002164:	f8a6 a01a 	strh.w	sl, [r6, #26]
  functioPtrLeftUP = &Sinistra_Avanti_up;
 8002168:	f8cc 9000 	str.w	r9, [ip]
  functioPtrLeftDOWN = &Sinistra_Avanti_Down;
 800216c:	f8c4 e000 	str.w	lr, [r4]

  functioPtrRightUP = &Destra_Avanti_up;
 8002170:	6008      	str	r0, [r1, #0]
  functioPtrRightDOWN = &Destra_Avanti_Down;
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f38a 8811 	msr	BASEPRI, sl
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <main+0x5d4>)
 800217a:	f8c8 3004 	str.w	r3, [r8, #4]
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
 800217e:	4640      	mov	r0, r8

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f8c8 3008 	str.w	r3, [r8, #8]
  pwm_lld_start(pwmp);
 8002186:	f7fe ff3b 	bl	8001000 <pwm_lld_start>
  pwmp->enabled = 0;
 800218a:	f8c8 500c 	str.w	r5, [r8, #12]
  pwmp->state = PWM_READY;
 800218e:	f888 b000 	strb.w	fp, [r8]
 8002192:	f385 8811 	msr	BASEPRI, r5

  //start pwm1 (left engine)
  pwmStart(&PWMD1, &pwm1cfg);
  pwmEnablePeriodicNotification(&PWMD1);
 8002196:	4640      	mov	r0, r8
 8002198:	f7ff f8b2 	bl	8001300 <pwmEnablePeriodicNotification>
  pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0));
 800219c:	4640      	mov	r0, r8
 800219e:	4629      	mov	r1, r5
 80021a0:	f7ff fce6 	bl	8001b70 <pwmEnableChannel.constprop.6>
  pwmEnableChannelNotification(&PWMD1, 0);
 80021a4:	4640      	mov	r0, r8
 80021a6:	f7ff fbbb 	bl	8001920 <pwmEnableChannelNotification.constprop.4>
 80021aa:	f38a 8811 	msr	BASEPRI, sl
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <main+0x5d8>)
 80021b0:	607b      	str	r3, [r7, #4]
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
 80021b2:	4638      	mov	r0, r7

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	60bb      	str	r3, [r7, #8]
  pwm_lld_start(pwmp);
 80021b8:	f7fe ff22 	bl	8001000 <pwm_lld_start>
  pwmp->enabled = 0;
 80021bc:	60fd      	str	r5, [r7, #12]
  pwmp->state = PWM_READY;
 80021be:	f887 b000 	strb.w	fp, [r7]
 80021c2:	f385 8811 	msr	BASEPRI, r5

  //start pwm2 (right engine)
  pwmStart(&PWMD3, &pwm2cfg);
  pwmEnablePeriodicNotification(&PWMD3);
 80021c6:	4638      	mov	r0, r7
 80021c8:	f7ff f89a 	bl	8001300 <pwmEnablePeriodicNotification>
  pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 80021cc:	4638      	mov	r0, r7
 80021ce:	4629      	mov	r1, r5
 80021d0:	f7ff fcce 	bl	8001b70 <pwmEnableChannel.constprop.6>
  pwmEnableChannelNotification(&PWMD3, 0);
 80021d4:	4638      	mov	r0, r7
 80021d6:	f7ff fba3 	bl	8001920 <pwmEnableChannelNotification.constprop.4>
  ESP8266_setAsAP();
  /****************MOTOR_SETUP*********************/
  init_motor();

  while (true) {
    chThdSleepMilliseconds(100); //without this, serial events will not be received (priority issue, maybe)
 80021da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021de:	f7ff f8f7 	bl	80013d0 <chThdSleep>
 80021e2:	e7fa      	b.n	80021da <main+0x57a>
 80021e4:	080002a1 	.word	0x080002a1
 80021e8:	08000801 	.word	0x08000801
 80021ec:	08002880 	.word	0x08002880
 80021f0:	20000874 	.word	0x20000874
 80021f4:	20006410 	.word	0x20006410
 80021f8:	20001598 	.word	0x20001598
 80021fc:	20000800 	.word	0x20000800
 8002200:	20000cd0 	.word	0x20000cd0
 8002204:	08001621 	.word	0x08001621
 8002208:	08002888 	.word	0x08002888
 800220c:	08002894 	.word	0x08002894
 8002210:	080028a4 	.word	0x080028a4
 8002214:	080028b0 	.word	0x080028b0
 8002218:	080028c0 	.word	0x080028c0
 800221c:	2000b444 	.word	0x2000b444
 8002220:	2000b288 	.word	0x2000b288
 8002224:	2000b28c 	.word	0x2000b28c
 8002228:	2000b290 	.word	0x2000b290
 800222c:	080019b1 	.word	0x080019b1
 8002230:	080019e1 	.word	0x080019e1
 8002234:	2000080c 	.word	0x2000080c
 8002238:	20000840 	.word	0x20000840
 800223c:	2000b440 	.word	0x2000b440
 8002240:	08001951 	.word	0x08001951
 8002244:	08001981 	.word	0x08001981
	...

08002250 <strcat>:
  }
  return NULL;
}
char *strcat(char *dest, const char *src){
    size_t i,j;
    for (i = 0; dest[i] != '\0'; i++)
 8002250:	7802      	ldrb	r2, [r0, #0]
    p1 = p1Begin + 1;
    p1Adv++;
  }
  return NULL;
}
char *strcat(char *dest, const char *src){
 8002252:	b430      	push	{r4, r5}
    size_t i,j;
    for (i = 0; dest[i] != '\0'; i++)
 8002254:	b132      	cbz	r2, 8002264 <strcat+0x14>
 8002256:	4603      	mov	r3, r0
 8002258:	2200      	movs	r2, #0
 800225a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800225e:	3201      	adds	r2, #1
 8002260:	2c00      	cmp	r4, #0
 8002262:	d1fa      	bne.n	800225a <strcat+0xa>
        ;
    for (j = 0; src[j] != '\0'; j++)
 8002264:	780b      	ldrb	r3, [r1, #0]
 8002266:	b14b      	cbz	r3, 800227c <strcat+0x2c>
 8002268:	1885      	adds	r5, r0, r2
 800226a:	2400      	movs	r4, #0
        dest[i+j] = src[j];
 800226c:	f805 3b01 	strb.w	r3, [r5], #1
}
char *strcat(char *dest, const char *src){
    size_t i,j;
    for (i = 0; dest[i] != '\0'; i++)
        ;
    for (j = 0; src[j] != '\0'; j++)
 8002270:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8002274:	3401      	adds	r4, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f8      	bne.n	800226c <strcat+0x1c>
 800227a:	4422      	add	r2, r4
        dest[i+j] = src[j];
    dest[i+j] = '\0';
 800227c:	2300      	movs	r3, #0
 800227e:	5483      	strb	r3, [r0, r2]
    return dest;
}
 8002280:	bc30      	pop	{r4, r5}
 8002282:	4770      	bx	lr
	...

08002290 <memset>:
 8002290:	b470      	push	{r4, r5, r6}
 8002292:	0784      	lsls	r4, r0, #30
 8002294:	d046      	beq.n	8002324 <memset+0x94>
 8002296:	1e54      	subs	r4, r2, #1
 8002298:	2a00      	cmp	r2, #0
 800229a:	d041      	beq.n	8002320 <memset+0x90>
 800229c:	b2cd      	uxtb	r5, r1
 800229e:	4603      	mov	r3, r0
 80022a0:	e002      	b.n	80022a8 <memset+0x18>
 80022a2:	1e62      	subs	r2, r4, #1
 80022a4:	b3e4      	cbz	r4, 8002320 <memset+0x90>
 80022a6:	4614      	mov	r4, r2
 80022a8:	f803 5b01 	strb.w	r5, [r3], #1
 80022ac:	079a      	lsls	r2, r3, #30
 80022ae:	d1f8      	bne.n	80022a2 <memset+0x12>
 80022b0:	2c03      	cmp	r4, #3
 80022b2:	d92e      	bls.n	8002312 <memset+0x82>
 80022b4:	b2cd      	uxtb	r5, r1
 80022b6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80022ba:	2c0f      	cmp	r4, #15
 80022bc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80022c0:	d919      	bls.n	80022f6 <memset+0x66>
 80022c2:	f103 0210 	add.w	r2, r3, #16
 80022c6:	4626      	mov	r6, r4
 80022c8:	3e10      	subs	r6, #16
 80022ca:	2e0f      	cmp	r6, #15
 80022cc:	f842 5c10 	str.w	r5, [r2, #-16]
 80022d0:	f842 5c0c 	str.w	r5, [r2, #-12]
 80022d4:	f842 5c08 	str.w	r5, [r2, #-8]
 80022d8:	f842 5c04 	str.w	r5, [r2, #-4]
 80022dc:	f102 0210 	add.w	r2, r2, #16
 80022e0:	d8f2      	bhi.n	80022c8 <memset+0x38>
 80022e2:	f1a4 0210 	sub.w	r2, r4, #16
 80022e6:	f022 020f 	bic.w	r2, r2, #15
 80022ea:	f004 040f 	and.w	r4, r4, #15
 80022ee:	3210      	adds	r2, #16
 80022f0:	2c03      	cmp	r4, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	d90d      	bls.n	8002312 <memset+0x82>
 80022f6:	461e      	mov	r6, r3
 80022f8:	4622      	mov	r2, r4
 80022fa:	3a04      	subs	r2, #4
 80022fc:	2a03      	cmp	r2, #3
 80022fe:	f846 5b04 	str.w	r5, [r6], #4
 8002302:	d8fa      	bhi.n	80022fa <memset+0x6a>
 8002304:	1f22      	subs	r2, r4, #4
 8002306:	f022 0203 	bic.w	r2, r2, #3
 800230a:	3204      	adds	r2, #4
 800230c:	4413      	add	r3, r2
 800230e:	f004 0403 	and.w	r4, r4, #3
 8002312:	b12c      	cbz	r4, 8002320 <memset+0x90>
 8002314:	b2c9      	uxtb	r1, r1
 8002316:	441c      	add	r4, r3
 8002318:	f803 1b01 	strb.w	r1, [r3], #1
 800231c:	42a3      	cmp	r3, r4
 800231e:	d1fb      	bne.n	8002318 <memset+0x88>
 8002320:	bc70      	pop	{r4, r5, r6}
 8002322:	4770      	bx	lr
 8002324:	4614      	mov	r4, r2
 8002326:	4603      	mov	r3, r0
 8002328:	e7c2      	b.n	80022b0 <memset+0x20>
 800232a:	bf00      	nop
 800232c:	0000      	movs	r0, r0
	...

08002330 <atoi>:
 8002330:	2100      	movs	r1, #0
 8002332:	220a      	movs	r2, #10
 8002334:	f000 b894 	b.w	8002460 <strtol>
	...

08002340 <_strtol_r>:
 8002340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002344:	4c44      	ldr	r4, [pc, #272]	; (8002458 <_strtol_r+0x118>)
 8002346:	4683      	mov	fp, r0
 8002348:	460e      	mov	r6, r1
 800234a:	f8d4 e000 	ldr.w	lr, [r4]
 800234e:	e000      	b.n	8002352 <_strtol_r+0x12>
 8002350:	4626      	mov	r6, r4
 8002352:	4634      	mov	r4, r6
 8002354:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002358:	eb0e 0005 	add.w	r0, lr, r5
 800235c:	7840      	ldrb	r0, [r0, #1]
 800235e:	f000 0008 	and.w	r0, r0, #8
 8002362:	f000 08ff 	and.w	r8, r0, #255	; 0xff
 8002366:	2800      	cmp	r0, #0
 8002368:	d1f2      	bne.n	8002350 <_strtol_r+0x10>
 800236a:	2d2d      	cmp	r5, #45	; 0x2d
 800236c:	d04b      	beq.n	8002406 <_strtol_r+0xc6>
 800236e:	2d2b      	cmp	r5, #43	; 0x2b
 8002370:	bf04      	itt	eq
 8002372:	7875      	ldrbeq	r5, [r6, #1]
 8002374:	1cb4      	addeq	r4, r6, #2
 8002376:	b11b      	cbz	r3, 8002380 <_strtol_r+0x40>
 8002378:	2b10      	cmp	r3, #16
 800237a:	d060      	beq.n	800243e <_strtol_r+0xfe>
 800237c:	469a      	mov	sl, r3
 800237e:	e003      	b.n	8002388 <_strtol_r+0x48>
 8002380:	2d30      	cmp	r5, #48	; 0x30
 8002382:	d054      	beq.n	800242e <_strtol_r+0xee>
 8002384:	230a      	movs	r3, #10
 8002386:	469a      	mov	sl, r3
 8002388:	f1b8 0f00 	cmp.w	r8, #0
 800238c:	bf14      	ite	ne
 800238e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8002392:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8002396:	2700      	movs	r7, #0
 8002398:	fbb0 f9fa 	udiv	r9, r0, sl
 800239c:	46bc      	mov	ip, r7
 800239e:	fb0a 0019 	mls	r0, sl, r9, r0
 80023a2:	e00c      	b.n	80023be <_strtol_r+0x7e>
 80023a4:	3d30      	subs	r5, #48	; 0x30
 80023a6:	42ab      	cmp	r3, r5
 80023a8:	dd19      	ble.n	80023de <_strtol_r+0x9e>
 80023aa:	1c7e      	adds	r6, r7, #1
 80023ac:	d005      	beq.n	80023ba <_strtol_r+0x7a>
 80023ae:	45cc      	cmp	ip, r9
 80023b0:	d824      	bhi.n	80023fc <_strtol_r+0xbc>
 80023b2:	d021      	beq.n	80023f8 <_strtol_r+0xb8>
 80023b4:	fb0a 5c0c 	mla	ip, sl, ip, r5
 80023b8:	2701      	movs	r7, #1
 80023ba:	f814 5b01 	ldrb.w	r5, [r4], #1
 80023be:	eb0e 0605 	add.w	r6, lr, r5
 80023c2:	7876      	ldrb	r6, [r6, #1]
 80023c4:	f016 0f04 	tst.w	r6, #4
 80023c8:	d1ec      	bne.n	80023a4 <_strtol_r+0x64>
 80023ca:	f016 0603 	ands.w	r6, r6, #3
 80023ce:	d006      	beq.n	80023de <_strtol_r+0x9e>
 80023d0:	2e01      	cmp	r6, #1
 80023d2:	bf0c      	ite	eq
 80023d4:	2637      	moveq	r6, #55	; 0x37
 80023d6:	2657      	movne	r6, #87	; 0x57
 80023d8:	1bad      	subs	r5, r5, r6
 80023da:	42ab      	cmp	r3, r5
 80023dc:	dce5      	bgt.n	80023aa <_strtol_r+0x6a>
 80023de:	1c7b      	adds	r3, r7, #1
 80023e0:	d016      	beq.n	8002410 <_strtol_r+0xd0>
 80023e2:	f1c8 0000 	rsb	r0, r8, #0
 80023e6:	ea8c 0000 	eor.w	r0, ip, r0
 80023ea:	4440      	add	r0, r8
 80023ec:	b14a      	cbz	r2, 8002402 <_strtol_r+0xc2>
 80023ee:	b107      	cbz	r7, 80023f2 <_strtol_r+0xb2>
 80023f0:	1e61      	subs	r1, r4, #1
 80023f2:	6011      	str	r1, [r2, #0]
 80023f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023f8:	4285      	cmp	r5, r0
 80023fa:	dddb      	ble.n	80023b4 <_strtol_r+0x74>
 80023fc:	f04f 37ff 	mov.w	r7, #4294967295
 8002400:	e7db      	b.n	80023ba <_strtol_r+0x7a>
 8002402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002406:	1cb4      	adds	r4, r6, #2
 8002408:	7875      	ldrb	r5, [r6, #1]
 800240a:	f04f 0801 	mov.w	r8, #1
 800240e:	e7b2      	b.n	8002376 <_strtol_r+0x36>
 8002410:	f1b8 0f00 	cmp.w	r8, #0
 8002414:	f04f 0322 	mov.w	r3, #34	; 0x22
 8002418:	bf14      	ite	ne
 800241a:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800241e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8002422:	f8cb 3000 	str.w	r3, [fp]
 8002426:	2a00      	cmp	r2, #0
 8002428:	d1e2      	bne.n	80023f0 <_strtol_r+0xb0>
 800242a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800242e:	7823      	ldrb	r3, [r4, #0]
 8002430:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002434:	2b58      	cmp	r3, #88	; 0x58
 8002436:	d009      	beq.n	800244c <_strtol_r+0x10c>
 8002438:	2308      	movs	r3, #8
 800243a:	469a      	mov	sl, r3
 800243c:	e7a4      	b.n	8002388 <_strtol_r+0x48>
 800243e:	2d30      	cmp	r5, #48	; 0x30
 8002440:	d19c      	bne.n	800237c <_strtol_r+0x3c>
 8002442:	7820      	ldrb	r0, [r4, #0]
 8002444:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002448:	2858      	cmp	r0, #88	; 0x58
 800244a:	d197      	bne.n	800237c <_strtol_r+0x3c>
 800244c:	f04f 0a10 	mov.w	sl, #16
 8002450:	7865      	ldrb	r5, [r4, #1]
 8002452:	4653      	mov	r3, sl
 8002454:	3402      	adds	r4, #2
 8002456:	e797      	b.n	8002388 <_strtol_r+0x48>
 8002458:	20000880 	.word	0x20000880
 800245c:	00000000 	.word	0x00000000

08002460 <strtol>:
 8002460:	b430      	push	{r4, r5}
 8002462:	4c04      	ldr	r4, [pc, #16]	; (8002474 <strtol+0x14>)
 8002464:	460d      	mov	r5, r1
 8002466:	4613      	mov	r3, r2
 8002468:	4601      	mov	r1, r0
 800246a:	462a      	mov	r2, r5
 800246c:	6820      	ldr	r0, [r4, #0]
 800246e:	bc30      	pop	{r4, r5}
 8002470:	f7ff bf66 	b.w	8002340 <_strtol_r>
 8002474:	20000cb0 	.word	0x20000cb0
	...
 8002480:	432b5441 	.word	0x432b5441
 8002484:	45535049 	.word	0x45535049
 8002488:	003d444e 	.word	0x003d444e
	...
 80024e4:	6d74683c 	.word	0x6d74683c
 80024e8:	005f3e6c 	.word	0x005f3e6c
	...
 800273c:	682f3c5f 	.word	0x682f3c5f
 8002740:	3e6c6d74 	.word	0x3e6c6d74
	...

08002750 <default_config>:
 8002750:	0001c200 40000000 00000000 00000000     .......@........
 8002760:	6c756e28 0000296c 0000002c 00006325     (null)..,...%c..
 8002770:	00003d63 00007325 65636552 64657669     c=..%s..Received
 8002780:	74746820 65722070 73657571 00000074      http request...
 8002790:	65696c43 6920746e 00003d64 000a7325     Client id=..%s..
 80027a0:	6d6d6f43 3d646e61 00000000 2d206425     Command=....%d -
 80027b0:	00000020 4450492b 00000000 00000000      ...+IPD........

080027c0 <ram_areas>:
 80027c0:	08002eac 2000b468 2000b468 2000b468     ....h.. h.. h.. 
 80027d0:	08002eac 00000000 00000000 00000000     ................
 80027e0:	08002eac 00000000 00000000 00000000     ................
 80027f0:	08002eac 00000000 00000000 00000000     ................
 8002800:	08002eac 00000000 00000000 00000000     ................
 8002810:	08002eac 00000000 00000000 00000000     ................
 8002820:	08002eac 00000000 00000000 00000000     ................
 8002830:	08002eac 00000000 00000000 00000000     ................

08002840 <ch_debug>:
 8002840:	6e69616d 18431600 08440404 1814100c     main..C...D.....
 8002850:	1e1d1c00 00000000 00000000 00000000     ................

08002860 <vmt>:
 8002860:	08000a31 08000b51 08000ab1 08000bc1     1...Q...........
 8002870:	08000aa1 08000bb1 08000a21 08000b41     ........!...A...
 8002880:	656c6469 00000000 522b5441 0a0d5453     idle....AT+RST..
 8002890:	00000000 432b5441 444f4d57 0d323d45     ....AT+CWMODE=2.
 80028a0:	0000000a 432b5441 52534649 00000a0d     ....AT+CIFSR....
 80028b0:	432b5441 554d5049 0d313d58 0000000a     AT+CIPMUX=1.....
 80028c0:	432b5441 45535049 52455652 382c313d     AT+CIPSERVER=1,8
 80028d0:	000a0d30 00000000 00000000 00000000     0...............

080028e0 <_ctype_>:
 80028e0:	20202000 20202020 28282020 20282828     .         ((((( 
 80028f0:	20202020 20202020 20202020 20202020                     
 8002900:	10108820 10101010 10101010 10101010      ...............
 8002910:	04040410 04040404 10040404 10101010     ................
 8002920:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8002930:	01010101 01010101 01010101 10101010     ................
 8002940:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8002950:	02020202 02020202 02020202 10101010     ................
 8002960:	00000020 00000000 00000000 00000000      ...............
	...
 80029f0:	00000043                                         C.
